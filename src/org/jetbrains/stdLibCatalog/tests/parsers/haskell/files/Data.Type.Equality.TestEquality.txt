[Classifier]
class TestEquality f where testEquality :: f a -> f b -> Maybe (a :~: b)
Name: TestEquality
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Type-Equality.html#t:TestEquality
Containing package: Data.Type.Equality
parameters {
}
derived {
	Data.Type.Equality::Data.Type.Equality.TestEquality_(:~:)<a<>>
	Data.Typeable::Data.Type.Equality.TestEquality_(:~:)<a<>>
}
supertypes {
}
members {

	[Function]
	testEquality :: f a -> f b -> Maybe (a :~: b)
	Name: testEquality
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Type-Equality.html#v:testEquality
	Containing package: Data.Type.Equality
	Containing type: TestEquality
	parameters {
		f: (TestEquality f; f; Data.Type.Equality::TestEquality)
		a
		b
	}
	Signature = <function> {
		[parameters]
		null::f {
			null::a
		}
		null::f {
			null::b
		}
	
		[result]
		Data.Maybe::Maybe {
			null::(:~:) {
				null::a
				null::b
			}
		}
	}
}