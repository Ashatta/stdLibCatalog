[Package]
Name: java.lang.reflect
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/package-summary.html
Containing package: java.lang
attributes {
}

Subpackages {
}

[Classifier]
public interface AnnotatedArrayType
extends AnnotatedType
Name: AnnotatedArrayType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedArrayType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::AnnotatedType
}
members {

	[Function]
	AnnotatedType getAnnotatedGenericComponentType()
	Name: getAnnotatedGenericComponentType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedArrayType.html#getAnnotatedGenericComponentType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedArrayType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}
}

[Classifier]
public interface AnnotatedElement
Name: AnnotatedElement
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::AnnotatedType
	java.lang.reflect::GenericDeclaration
	java.lang::Class
	java.lang.reflect::TypeVariable
	java.lang.reflect::AccessibleObject
	java.lang.reflect::Parameter
	java.lang::Package
}
supertypes {
}
members {

	[Function]
	default boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)
	Name: isAnnotationPresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#isAnnotationPresent-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			? {
				extends java.lang.annotation::Annotation
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	<T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	Annotation[] getAnnotations()
	Name: getAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	default <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
	Name: getAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	default <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)
	Name: getDeclaredAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	default <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)
	Name: getDeclaredAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedElement.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedElement
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}
}

[Classifier]
public interface AnnotatedParameterizedType
extends AnnotatedType
Name: AnnotatedParameterizedType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedParameterizedType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::AnnotatedType
}
members {

	[Function]
	AnnotatedType[] getAnnotatedActualTypeArguments()
	Name: getAnnotatedActualTypeArguments
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedParameterizedType.html#getAnnotatedActualTypeArguments--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedParameterizedType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}
}

[Classifier]
public interface AnnotatedType
extends AnnotatedElement
Name: AnnotatedType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::AnnotatedTypeVariable
	java.lang.reflect::AnnotatedParameterizedType
	java.lang.reflect::AnnotatedWildcardType
	java.lang.reflect::AnnotatedArrayType
}
supertypes {
	java.lang.reflect::AnnotatedElement
}
members {

	[Function]
	Type getType()
	Name: getType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedType.html#getType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}
}

[Classifier]
public interface AnnotatedTypeVariable
extends AnnotatedType
Name: AnnotatedTypeVariable
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedTypeVariable.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::AnnotatedType
}
members {

	[Function]
	AnnotatedType[] getAnnotatedBounds()
	Name: getAnnotatedBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedTypeVariable.html#getAnnotatedBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedTypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}
}

[Classifier]
public interface AnnotatedWildcardType
extends AnnotatedType
Name: AnnotatedWildcardType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedWildcardType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::AnnotatedType
}
members {

	[Function]
	AnnotatedType[] getAnnotatedLowerBounds()
	Name: getAnnotatedLowerBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedWildcardType.html#getAnnotatedLowerBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedWildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}

	[Function]
	AnnotatedType[] getAnnotatedUpperBounds()
	Name: getAnnotatedUpperBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AnnotatedWildcardType.html#getAnnotatedUpperBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AnnotatedWildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}
}

[Classifier]
public interface GenericArrayType
extends Type
Name: GenericArrayType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericArrayType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::Type
}
members {

	[Function]
	Type getGenericComponentType()
	Name: getGenericComponentType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericArrayType.html#getGenericComponentType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: GenericArrayType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}
}

[Classifier]
public interface GenericDeclaration
extends AnnotatedElement
Name: GenericDeclaration
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericDeclaration.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang::Class
	java.lang.reflect::Executable
}
supertypes {
	java.lang.reflect::AnnotatedElement
}
members {

	[Function]
	TypeVariable<?>[] getTypeParameters()
	Name: getTypeParameters
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericDeclaration.html#getTypeParameters--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: GenericDeclaration
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::TypeVariable {
				?
			}
		}
	}
}

[Classifier]
public interface InvocationHandler
Name: InvocationHandler
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationHandler.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.rmi.server::RemoteObjectInvocationHandler
	javax.management::MBeanServerInvocationHandler
	java.beans::EventHandler
	javax.management.openmbean::CompositeDataInvocationHandler
}
supertypes {
}
members {

	[Function]
	Object invoke(Object proxy,
	              Method method,
	              Object[] args)
	       throws Throwable
	Name: invoke
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationHandler.html#invoke-java.lang.Object-java.lang.reflect.Method-java.lang.Object:A-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: InvocationHandler
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		java.lang.reflect::Method
		other::[] {
			java.lang::Object
		}
	
		[result]
		java.lang::Object
	}
}

[Classifier]
public interface Member
Name: Member
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::Field
	java.lang.reflect::Executable
}
supertypes {
}
members {

	[Function]
	static final int PUBLIC
	Name: PUBLIC
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#PUBLIC
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	static final int DECLARED
	Name: DECLARED
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#DECLARED
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	Class<?> getDeclaringClass()
	Name: getDeclaringClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#getDeclaringClass--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Member.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Member
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public interface ParameterizedType
extends Type
Name: ParameterizedType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ParameterizedType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::Type
}
members {

	[Function]
	Type[] getActualTypeArguments()
	Name: getActualTypeArguments
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ParameterizedType.html#getActualTypeArguments--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ParameterizedType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	Type getRawType()
	Name: getRawType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ParameterizedType.html#getRawType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ParameterizedType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}

	[Function]
	Type getOwnerType()
	Name: getOwnerType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ParameterizedType.html#getOwnerType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ParameterizedType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}
}

[Classifier]
public interface Type
Name: Type
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Type.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::GenericArrayType
	java.lang::Class
	java.lang.reflect::ParameterizedType
	java.lang.reflect::TypeVariable
	java.lang.reflect::WildcardType
}
supertypes {
}
members {

	[Function]
	default String getTypeName()
	Name: getTypeName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Type.html#getTypeName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Type
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public interface TypeVariable<D extends GenericDeclaration>
extends Type, AnnotatedElement
Name: TypeVariable
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/TypeVariable.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	D: (D extends GenericDeclaration; D; java.lang.reflect::GenericDeclaration)
}
derived {
}
supertypes {
	java.lang.reflect::Type
	java.lang.reflect::AnnotatedElement
}
members {

	[Function]
	Type[] getBounds()
	Name: getBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/TypeVariable.html#getBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	D getGenericDeclaration()
	Name: getGenericDeclaration
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/TypeVariable.html#getGenericDeclaration--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::D
	}

	[Function]
	String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/TypeVariable.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	AnnotatedType[] getAnnotatedBounds()
	Name: getAnnotatedBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/TypeVariable.html#getAnnotatedBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}
}

[Classifier]
public interface WildcardType
extends Type
Name: WildcardType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/WildcardType.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::Type
}
members {

	[Function]
	Type[] getUpperBounds()
	Name: getUpperBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/WildcardType.html#getUpperBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: WildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	Type[] getLowerBounds()
	Name: getLowerBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/WildcardType.html#getLowerBounds--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: WildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}
}

[Classifier]
public class AccessibleObject
extends Object
implements AnnotatedElement
Name: AccessibleObject
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::Field
	java.lang.reflect::Executable
}
supertypes {
	java.lang.reflect::AnnotatedElement
	java.lang::Object
}
members {

	[Function]
	protected AccessibleObject()
	Name: AccessibleObject
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#AccessibleObject--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AccessibleObject
	}

	[Function]
	public static void setAccessible(AccessibleObject[] array,
	                                 boolean flag)
	                          throws SecurityException
	Name: setAccessible
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-java.lang.reflect.AccessibleObject:A-boolean-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			java.lang.reflect::AccessibleObject
		}
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public void setAccessible(boolean flag)
	                   throws SecurityException
	Name: setAccessible
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#setAccessible-boolean-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public boolean isAccessible()
	Name: isAccessible
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#isAccessible--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass)
	Name: isAnnotationPresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#isAnnotationPresent-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			? {
				extends java.lang.annotation::Annotation
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
	Name: getAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getAnnotations()
	Name: getAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)
	Name: getDeclaredAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getDeclaredAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)
	Name: getDeclaredAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getDeclaredAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/AccessibleObject.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AccessibleObject
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}
}

[Classifier]
public final class Array
extends Object
Name: Array
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public static Object newInstance(Class<?> componentType,
	                                 int length)
	                          throws NegativeArraySizeException
	Name: newInstance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#newInstance-java.lang.Class-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			?
		}
		other::int
	
		[result]
		java.lang::Object
	}

	[Function]
	public static Object newInstance(Class<?> componentType,
	                                 int... dimensions)
	                          throws IllegalArgumentException,
	                                 NegativeArraySizeException
	Name: newInstance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#newInstance-java.lang.Class-int...-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			?
		}
		other::... {
			other::int
		}
	
		[result]
		java.lang::Object
	}

	[Function]
	public static int getLength(Object array)
	                     throws IllegalArgumentException
	Name: getLength
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getLength-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::int
	}

	[Function]
	public static Object get(Object array,
	                         int index)
	                  throws IllegalArgumentException,
	                         ArrayIndexOutOfBoundsException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#get-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		java.lang::Object
	}

	[Function]
	public static boolean getBoolean(Object array,
	                                 int index)
	                          throws IllegalArgumentException,
	                                 ArrayIndexOutOfBoundsException
	Name: getBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getBoolean-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static byte getByte(Object array,
	                           int index)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: getByte
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getByte-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::byte
	}

	[Function]
	public static char getChar(Object array,
	                           int index)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: getChar
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getChar-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::char
	}

	[Function]
	public static short getShort(Object array,
	                             int index)
	                      throws IllegalArgumentException,
	                             ArrayIndexOutOfBoundsException
	Name: getShort
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getShort-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::short
	}

	[Function]
	public static int getInt(Object array,
	                         int index)
	                  throws IllegalArgumentException,
	                         ArrayIndexOutOfBoundsException
	Name: getInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getInt-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::int
	}

	[Function]
	public static long getLong(Object array,
	                           int index)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: getLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getLong-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::long
	}

	[Function]
	public static float getFloat(Object array,
	                             int index)
	                      throws IllegalArgumentException,
	                             ArrayIndexOutOfBoundsException
	Name: getFloat
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getFloat-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::float
	}

	[Function]
	public static double getDouble(Object array,
	                               int index)
	                        throws IllegalArgumentException,
	                               ArrayIndexOutOfBoundsException
	Name: getDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#getDouble-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::double
	}

	[Function]
	public static void set(Object array,
	                       int index,
	                       Object value)
	                throws IllegalArgumentException,
	                       ArrayIndexOutOfBoundsException
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#set-java.lang.Object-int-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		java.lang::Object
	
		[result]
		other::void
	}

	[Function]
	public static void setBoolean(Object array,
	                              int index,
	                              boolean z)
	                       throws IllegalArgumentException,
	                              ArrayIndexOutOfBoundsException
	Name: setBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setBoolean-java.lang.Object-int-boolean-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public static void setByte(Object array,
	                           int index,
	                           byte b)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: setByte
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setByte-java.lang.Object-int-byte-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::byte
	
		[result]
		other::void
	}

	[Function]
	public static void setChar(Object array,
	                           int index,
	                           char c)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: setChar
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setChar-java.lang.Object-int-char-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::char
	
		[result]
		other::void
	}

	[Function]
	public static void setShort(Object array,
	                            int index,
	                            short s)
	                     throws IllegalArgumentException,
	                            ArrayIndexOutOfBoundsException
	Name: setShort
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setShort-java.lang.Object-int-short-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::short
	
		[result]
		other::void
	}

	[Function]
	public static void setInt(Object array,
	                          int index,
	                          int i)
	                   throws IllegalArgumentException,
	                          ArrayIndexOutOfBoundsException
	Name: setInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setInt-java.lang.Object-int-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::int
	
		[result]
		other::void
	}

	[Function]
	public static void setLong(Object array,
	                           int index,
	                           long l)
	                    throws IllegalArgumentException,
	                           ArrayIndexOutOfBoundsException
	Name: setLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setLong-java.lang.Object-int-long-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::long
	
		[result]
		other::void
	}

	[Function]
	public static void setFloat(Object array,
	                            int index,
	                            float f)
	                     throws IllegalArgumentException,
	                            ArrayIndexOutOfBoundsException
	Name: setFloat
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setFloat-java.lang.Object-int-float-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::float
	
		[result]
		other::void
	}

	[Function]
	public static void setDouble(Object array,
	                             int index,
	                             double d)
	                      throws IllegalArgumentException,
	                             ArrayIndexOutOfBoundsException
	Name: setDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Array.html#setDouble-java.lang.Object-int-double-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Array
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
		other::double
	
		[result]
		other::void
	}
}

[Classifier]
public final class Constructor<T>
extends Executable
Name: Constructor
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
}
derived {
}
supertypes {
	java.lang.reflect::Executable
}
members {

	[Function]
	public Class<T> getDeclaringClass()
	Name: getDeclaringClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getDeclaringClass--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			null::T
		}
	}

	[Function]
	public String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public TypeVariable<Constructor<T>>[] getTypeParameters()
	Name: getTypeParameters
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getTypeParameters--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::TypeVariable {
				java.lang.reflect::Constructor {
					null::T
				}
			}
		}
	}

	[Function]
	public Class<?>[] getParameterTypes()
	Name: getParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public int getParameterCount()
	Name: getParameterCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getParameterCount--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Type[] getGenericParameterTypes()
	Name: getGenericParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getGenericParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public Class<?>[] getExceptionTypes()
	Name: getExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public Type[] getGenericExceptionTypes()
	Name: getGenericExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getGenericExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public boolean equals(Object obj)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#equals-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#hashCode--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#toString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public String toGenericString()
	Name: toGenericString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#toGenericString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public T newInstance(Object... initargs)
	              throws InstantiationException,
	                     IllegalAccessException,
	                     IllegalArgumentException,
	                     InvocationTargetException
	Name: newInstance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#newInstance-java.lang.Object...-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::... {
			java.lang::Object
		}
	
		[result]
		null::T
	}

	[Function]
	public boolean isVarArgs()
	Name: isVarArgs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#isVarArgs--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public Annotation[][] getParameterAnnotations()
	Name: getParameterAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getParameterAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			other::[] {
				java.lang.annotation::Annotation
			}
		}
	}

	[Function]
	public AnnotatedType getAnnotatedReturnType()
	Name: getAnnotatedReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getAnnotatedReturnType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}

	[Function]
	public AnnotatedType getAnnotatedReceiverType()
	Name: getAnnotatedReceiverType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Constructor.html#getAnnotatedReceiverType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Constructor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}
}

[Classifier]
public abstract class Executable
extends AccessibleObject
implements Member, GenericDeclaration
Name: Executable
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html
Containing package: java.lang.reflect
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
	java.lang.reflect::Constructor
	java.lang.reflect::Method
}
supertypes {
	java.lang.reflect::Member
	java.lang.reflect::GenericDeclaration
	java.lang.reflect::AccessibleObject
}
members {

	[Function]
	public abstract Class<?> getDeclaringClass()
	Name: getDeclaringClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getDeclaringClass--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public abstract String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public abstract int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public abstract TypeVariable<?>[] getTypeParameters()
	Name: getTypeParameters
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getTypeParameters--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::TypeVariable {
				?
			}
		}
	}

	[Function]
	public abstract Class<?>[] getParameterTypes()
	Name: getParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public int getParameterCount()
	Name: getParameterCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getParameterCount--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Type[] getGenericParameterTypes()
	Name: getGenericParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getGenericParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public Parameter[] getParameters()
	Name: getParameters
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getParameters--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Parameter
		}
	}

	[Function]
	public abstract Class<?>[] getExceptionTypes()
	Name: getExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public Type[] getGenericExceptionTypes()
	Name: getGenericExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getGenericExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public abstract String toGenericString()
	Name: toGenericString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#toGenericString--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public boolean isVarArgs()
	Name: isVarArgs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#isVarArgs--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public abstract Annotation[][] getParameterAnnotations()
	Name: getParameterAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getParameterAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			other::[] {
				java.lang.annotation::Annotation
			}
		}
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
	Name: getAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public abstract AnnotatedType getAnnotatedReturnType()
	Name: getAnnotatedReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotatedReturnType--
	Containing package: java.lang.reflect
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}

	[Function]
	public AnnotatedType getAnnotatedReceiverType()
	Name: getAnnotatedReceiverType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotatedReceiverType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}

	[Function]
	public AnnotatedType[] getAnnotatedParameterTypes()
	Name: getAnnotatedParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotatedParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}

	[Function]
	public AnnotatedType[] getAnnotatedExceptionTypes()
	Name: getAnnotatedExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Executable.html#getAnnotatedExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::AnnotatedType
		}
	}
}

[Classifier]
public final class Field
extends AccessibleObject
implements Member
Name: Field
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::Member
	java.lang.reflect::AccessibleObject
}
members {

	[Function]
	public Class<?> getDeclaringClass()
	Name: getDeclaringClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getDeclaringClass--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEnumConstant()
	Name: isEnumConstant
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isEnumConstant--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public Class<?> getType()
	Name: getType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public Type getGenericType()
	Name: getGenericType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getGenericType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}

	[Function]
	public boolean equals(Object obj)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#equals-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#hashCode--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#toString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public String toGenericString()
	Name: toGenericString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#toGenericString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public Object get(Object obj)
	           throws IllegalArgumentException,
	                  IllegalAccessException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#get-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		java.lang::Object
	}

	[Function]
	public boolean getBoolean(Object obj)
	                   throws IllegalArgumentException,
	                          IllegalAccessException
	Name: getBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getBoolean-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public byte getByte(Object obj)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: getByte
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getByte-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::byte
	}

	[Function]
	public char getChar(Object obj)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: getChar
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getChar-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::char
	}

	[Function]
	public short getShort(Object obj)
	               throws IllegalArgumentException,
	                      IllegalAccessException
	Name: getShort
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getShort-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::short
	}

	[Function]
	public int getInt(Object obj)
	           throws IllegalArgumentException,
	                  IllegalAccessException
	Name: getInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getInt-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::int
	}

	[Function]
	public long getLong(Object obj)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: getLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getLong-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::long
	}

	[Function]
	public float getFloat(Object obj)
	               throws IllegalArgumentException,
	                      IllegalAccessException
	Name: getFloat
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getFloat-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::float
	}

	[Function]
	public double getDouble(Object obj)
	                 throws IllegalArgumentException,
	                        IllegalAccessException
	Name: getDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getDouble-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::double
	}

	[Function]
	public void set(Object obj,
	                Object value)
	         throws IllegalArgumentException,
	                IllegalAccessException
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#set-java.lang.Object-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		java.lang::Object
	
		[result]
		other::void
	}

	[Function]
	public void setBoolean(Object obj,
	                       boolean z)
	                throws IllegalArgumentException,
	                       IllegalAccessException
	Name: setBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setBoolean-java.lang.Object-boolean-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public void setByte(Object obj,
	                    byte b)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: setByte
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setByte-java.lang.Object-byte-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::byte
	
		[result]
		other::void
	}

	[Function]
	public void setChar(Object obj,
	                    char c)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: setChar
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setChar-java.lang.Object-char-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::char
	
		[result]
		other::void
	}

	[Function]
	public void setShort(Object obj,
	                     short s)
	              throws IllegalArgumentException,
	                     IllegalAccessException
	Name: setShort
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setShort-java.lang.Object-short-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::short
	
		[result]
		other::void
	}

	[Function]
	public void setInt(Object obj,
	                   int i)
	            throws IllegalArgumentException,
	                   IllegalAccessException
	Name: setInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setInt-java.lang.Object-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::int
	
		[result]
		other::void
	}

	[Function]
	public void setLong(Object obj,
	                    long l)
	             throws IllegalArgumentException,
	                    IllegalAccessException
	Name: setLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setLong-java.lang.Object-long-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::long
	
		[result]
		other::void
	}

	[Function]
	public void setFloat(Object obj,
	                     float f)
	              throws IllegalArgumentException,
	                     IllegalAccessException
	Name: setFloat
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setFloat-java.lang.Object-float-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::float
	
		[result]
		other::void
	}

	[Function]
	public void setDouble(Object obj,
	                      double d)
	               throws IllegalArgumentException,
	                      IllegalAccessException
	Name: setDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#setDouble-java.lang.Object-double-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::double
	
		[result]
		other::void
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
	Name: getAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public AnnotatedType getAnnotatedType()
	Name: getAnnotatedType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Field.html#getAnnotatedType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Field
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}
}

[Classifier]
public final class Method
extends Executable
Name: Method
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::Executable
}
members {

	[Function]
	public Class<?> getDeclaringClass()
	Name: getDeclaringClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getDeclaringClass--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public TypeVariable<Method>[] getTypeParameters()
	Name: getTypeParameters
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getTypeParameters--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::TypeVariable {
				java.lang.reflect::Method
			}
		}
	}

	[Function]
	public Class<?> getReturnType()
	Name: getReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getReturnType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public Type getGenericReturnType()
	Name: getGenericReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericReturnType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}

	[Function]
	public Class<?>[] getParameterTypes()
	Name: getParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public int getParameterCount()
	Name: getParameterCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getParameterCount--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Type[] getGenericParameterTypes()
	Name: getGenericParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericParameterTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public Class<?>[] getExceptionTypes()
	Name: getExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Class {
				?
			}
		}
	}

	[Function]
	public Type[] getGenericExceptionTypes()
	Name: getGenericExceptionTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getGenericExceptionTypes--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.reflect::Type
		}
	}

	[Function]
	public boolean equals(Object obj)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#equals-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#hashCode--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#toString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public String toGenericString()
	Name: toGenericString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#toGenericString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public Object invoke(Object obj,
	                     Object... args)
	              throws IllegalAccessException,
	                     IllegalArgumentException,
	                     InvocationTargetException
	Name: invoke
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::... {
			java.lang::Object
		}
	
		[result]
		java.lang::Object
	}

	[Function]
	public boolean isBridge()
	Name: isBridge
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isBridge--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isVarArgs()
	Name: isVarArgs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isVarArgs--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isDefault()
	Name: isDefault
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#isDefault--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public Object getDefaultValue()
	Name: getDefaultValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getDefaultValue--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Object
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public Annotation[][] getParameterAnnotations()
	Name: getParameterAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getParameterAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			other::[] {
				java.lang.annotation::Annotation
			}
		}
	}

	[Function]
	public AnnotatedType getAnnotatedReturnType()
	Name: getAnnotatedReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#getAnnotatedReturnType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Method
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}
}

[Classifier]
public class Modifier
extends Object
Name: Modifier
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public static final int PUBLIC
	Name: PUBLIC
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#PUBLIC
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int PRIVATE
	Name: PRIVATE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#PRIVATE
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int PROTECTED
	Name: PROTECTED
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#PROTECTED
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int STATIC
	Name: STATIC
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#STATIC
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int FINAL
	Name: FINAL
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#FINAL
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int SYNCHRONIZED
	Name: SYNCHRONIZED
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#SYNCHRONIZED
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int VOLATILE
	Name: VOLATILE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#VOLATILE
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int TRANSIENT
	Name: TRANSIENT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#TRANSIENT
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int NATIVE
	Name: NATIVE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#NATIVE
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int INTERFACE
	Name: INTERFACE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#INTERFACE
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int ABSTRACT
	Name: ABSTRACT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#ABSTRACT
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static final int STRICT
	Name: STRICT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#STRICT
	Containing package: java.lang.reflect
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Modifier()
	Name: Modifier
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#Modifier--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Modifier
	}

	[Function]
	public static boolean isPublic(int mod)
	Name: isPublic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isPublic-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isPrivate(int mod)
	Name: isPrivate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isPrivate-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isProtected(int mod)
	Name: isProtected
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isProtected-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isStatic(int mod)
	Name: isStatic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isStatic-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isFinal(int mod)
	Name: isFinal
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isFinal-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isSynchronized(int mod)
	Name: isSynchronized
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isSynchronized-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isVolatile(int mod)
	Name: isVolatile
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isVolatile-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isTransient(int mod)
	Name: isTransient
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isTransient-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isNative(int mod)
	Name: isNative
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isNative-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isInterface(int mod)
	Name: isInterface
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isInterface-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isAbstract(int mod)
	Name: isAbstract
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isAbstract-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static boolean isStrict(int mod)
	Name: isStrict
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#isStrict-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public static String toString(int mod)
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#toString-int-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.lang::String
	}

	[Function]
	public static int classModifiers()
	Name: classModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#classModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int interfaceModifiers()
	Name: interfaceModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#interfaceModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int constructorModifiers()
	Name: constructorModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#constructorModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int methodModifiers()
	Name: methodModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#methodModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int fieldModifiers()
	Name: fieldModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#fieldModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int parameterModifiers()
	Name: parameterModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Modifier.html#parameterModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Modifier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}
}

[Classifier]
public final class Parameter
extends Object
implements AnnotatedElement
Name: Parameter
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang.reflect::AnnotatedElement
	java.lang::Object
}
members {

	[Function]
	public boolean equals(Object obj)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#equals-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#hashCode--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isNamePresent()
	Name: isNamePresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#isNamePresent--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#toString--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public Executable getDeclaringExecutable()
	Name: getDeclaringExecutable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getDeclaringExecutable--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Executable
	}

	[Function]
	public int getModifiers()
	Name: getModifiers
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getModifiers--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String getName()
	Name: getName
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getName--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public Type getParameterizedType()
	Name: getParameterizedType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getParameterizedType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::Type
	}

	[Function]
	public Class<?> getType()
	Name: getType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public AnnotatedType getAnnotatedType()
	Name: getAnnotatedType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getAnnotatedType--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::AnnotatedType
	}

	[Function]
	public boolean isImplicit()
	Name: isImplicit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#isImplicit--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isSynthetic()
	Name: isSynthetic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#isSynthetic--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isVarArgs()
	Name: isVarArgs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#isVarArgs--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public <T extends Annotation> T getAnnotation(Class<T> annotationClass)
	Name: getAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public <T extends Annotation> T[] getAnnotationsByType(Class<T> annotationClass)
	Name: getAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getDeclaredAnnotations()
	Name: getDeclaredAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getDeclaredAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}

	[Function]
	public <T extends Annotation> T getDeclaredAnnotation(Class<T> annotationClass)
	Name: getDeclaredAnnotation
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getDeclaredAnnotation-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public <T extends Annotation> T[] getDeclaredAnnotationsByType(Class<T> annotationClass)
	Name: getDeclaredAnnotationsByType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getDeclaredAnnotationsByType-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
		T: (T extends Annotation; T; java.lang.annotation::Annotation)
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Annotation[] getAnnotations()
	Name: getAnnotations
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Parameter.html#getAnnotations--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Parameter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang.annotation::Annotation
		}
	}
}

[Classifier]
public class Proxy
extends Object
implements Serializable
Name: Proxy
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	protected InvocationHandler h
	Name: h
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#h
	Containing package: java.lang.reflect
	attributes {
		final=false
		scope=protected
		static=false
		memberType=field
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::InvocationHandler
	}

	[Function]
	protected Proxy(InvocationHandler h)
	Name: Proxy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#Proxy-java.lang.reflect.InvocationHandler-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang.reflect::InvocationHandler
	
		[result]
		java.lang.reflect::Proxy
	}

	[Function]
	public static Class<?> getProxyClass(ClassLoader loader,
	                                     Class<?>... interfaces)
	                              throws IllegalArgumentException
	Name: getProxyClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#getProxyClass-java.lang.ClassLoader-java.lang.Class...-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::ClassLoader
		other::... {
			java.lang::Class {
				?
			}
		}
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	public static Object newProxyInstance(ClassLoader loader,
	                                      Class<?>[] interfaces,
	                                      InvocationHandler h)
	                               throws IllegalArgumentException
	Name: newProxyInstance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#newProxyInstance-java.lang.ClassLoader-java.lang.Class:A-java.lang.reflect.InvocationHandler-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::ClassLoader
		other::[] {
			java.lang::Class {
				?
			}
		}
		java.lang.reflect::InvocationHandler
	
		[result]
		java.lang::Object
	}

	[Function]
	public static boolean isProxyClass(Class<?> cl)
	Name: isProxyClass
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#isProxyClass-java.lang.Class-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public static InvocationHandler getInvocationHandler(Object proxy)
	                                              throws IllegalArgumentException
	Name: getInvocationHandler
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html#getInvocationHandler-java.lang.Object-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Proxy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		java.lang.reflect::InvocationHandler
	}
}

[Classifier]
public final class ReflectPermission
extends BasicPermission
Name: ReflectPermission
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=true
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.security::BasicPermission
}
members {

	[Function]
	public ReflectPermission(String name)
	Name: ReflectPermission
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html#ReflectPermission-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ReflectPermission
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.lang.reflect::ReflectPermission
	}

	[Function]
	public ReflectPermission(String name,
	                         String actions)
	Name: ReflectPermission
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/ReflectPermission.html#ReflectPermission-java.lang.String-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ReflectPermission
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
		java.lang::String
	
		[result]
		java.lang.reflect::ReflectPermission
	}
}

[Classifier]
public class InvocationTargetException
extends ReflectiveOperationException
Name: InvocationTargetException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::ReflectiveOperationException
}
members {

	[Function]
	protected InvocationTargetException()
	Name: InvocationTargetException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html#InvocationTargetException--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: InvocationTargetException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::InvocationTargetException
	}

	[Function]
	public InvocationTargetException(Throwable target)
	Name: InvocationTargetException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html#InvocationTargetException-java.lang.Throwable-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: InvocationTargetException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		java.lang.reflect::InvocationTargetException
	}

	[Function]
	public InvocationTargetException(Throwable target,
	                                 String s)
	Name: InvocationTargetException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html#InvocationTargetException-java.lang.Throwable-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: InvocationTargetException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
		java.lang::String
	
		[result]
		java.lang.reflect::InvocationTargetException
	}

	[Function]
	public Throwable getTargetException()
	Name: getTargetException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html#getTargetException--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: InvocationTargetException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Throwable
	}

	[Function]
	public Throwable getCause()
	Name: getCause
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/InvocationTargetException.html#getCause--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: InvocationTargetException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Throwable
	}
}

[Classifier]
public class MalformedParameterizedTypeException
extends RuntimeException
Name: MalformedParameterizedTypeException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/MalformedParameterizedTypeException.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	public MalformedParameterizedTypeException()
	Name: MalformedParameterizedTypeException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/MalformedParameterizedTypeException.html#MalformedParameterizedTypeException--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: MalformedParameterizedTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::MalformedParameterizedTypeException
	}
}

[Classifier]
public class MalformedParametersException
extends RuntimeException
Name: MalformedParametersException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/MalformedParametersException.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	public MalformedParametersException()
	Name: MalformedParametersException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/MalformedParametersException.html#MalformedParametersException--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: MalformedParametersException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::MalformedParametersException
	}

	[Function]
	public MalformedParametersException(String reason)
	Name: MalformedParametersException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/MalformedParametersException.html#MalformedParametersException-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: MalformedParametersException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.lang.reflect::MalformedParametersException
	}
}

[Classifier]
public class UndeclaredThrowableException
extends RuntimeException
Name: UndeclaredThrowableException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/UndeclaredThrowableException.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	public UndeclaredThrowableException(Throwable undeclaredThrowable)
	Name: UndeclaredThrowableException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/UndeclaredThrowableException.html#UndeclaredThrowableException-java.lang.Throwable-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: UndeclaredThrowableException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		java.lang.reflect::UndeclaredThrowableException
	}

	[Function]
	public UndeclaredThrowableException(Throwable undeclaredThrowable,
	                                    String s)
	Name: UndeclaredThrowableException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/UndeclaredThrowableException.html#UndeclaredThrowableException-java.lang.Throwable-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: UndeclaredThrowableException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
		java.lang::String
	
		[result]
		java.lang.reflect::UndeclaredThrowableException
	}

	[Function]
	public Throwable getUndeclaredThrowable()
	Name: getUndeclaredThrowable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/UndeclaredThrowableException.html#getUndeclaredThrowable--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: UndeclaredThrowableException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Throwable
	}

	[Function]
	public Throwable getCause()
	Name: getCause
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/UndeclaredThrowableException.html#getCause--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: UndeclaredThrowableException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Throwable
	}
}

[Classifier]
public class GenericSignatureFormatError
extends ClassFormatError
Name: GenericSignatureFormatError
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericSignatureFormatError.html
Containing package: java.lang.reflect
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::ClassFormatError
}
members {

	[Function]
	public GenericSignatureFormatError()
	Name: GenericSignatureFormatError
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericSignatureFormatError.html#GenericSignatureFormatError--
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: GenericSignatureFormatError
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang.reflect::GenericSignatureFormatError
	}

	[Function]
	public GenericSignatureFormatError(String message)
	Name: GenericSignatureFormatError
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/GenericSignatureFormatError.html#GenericSignatureFormatError-java.lang.String-
	Containing package: java.lang.reflect
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: GenericSignatureFormatError
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.lang.reflect::GenericSignatureFormatError
	}
}