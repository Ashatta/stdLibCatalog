[Package]
Name: java.util.concurrent
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html
Containing package: java.util
attributes {
}

Subpackages {
	java.util.concurrent.locks
	java.util.concurrent.atomic
}

[Classifier]
public interface BlockingDeque<E>
extends BlockingQueue<E>, Deque<E>
Name: BlockingDeque
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	E
}
derived {
	java.util.concurrent::LinkedBlockingDeque
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.util::Deque {
		null::E
	}
}
members {

	[Function]
	void addFirst(E e)
	Name: addFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#addFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	void addLast(E e)
	Name: addLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#addLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	boolean offerFirst(E e)
	Name: offerFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offerFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	boolean offerLast(E e)
	Name: offerLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offerLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	void putFirst(E e)
	       throws InterruptedException
	Name: putFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#putFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	void putLast(E e)
	      throws InterruptedException
	Name: putLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#putLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	boolean offerFirst(E e,
	                   long timeout,
	                   TimeUnit unit)
	            throws InterruptedException
	Name: offerFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offerFirst-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	boolean offerLast(E e,
	                  long timeout,
	                  TimeUnit unit)
	           throws InterruptedException
	Name: offerLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offerLast-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	E takeFirst()
	     throws InterruptedException
	Name: takeFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#takeFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E takeLast()
	    throws InterruptedException
	Name: takeLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#takeLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E pollFirst(long timeout,
	            TimeUnit unit)
	     throws InterruptedException
	Name: pollFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#pollFirst-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	E pollLast(long timeout,
	           TimeUnit unit)
	    throws InterruptedException
	Name: pollLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#pollLast-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	boolean removeFirstOccurrence(Object o)
	Name: removeFirstOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#removeFirstOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	boolean removeLastOccurrence(Object o)
	Name: removeLastOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#removeLastOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	void put(E e)
	  throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	boolean offer(E e,
	              long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	E remove()
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#remove--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E take()
	throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E poll(long timeout,
	       TimeUnit unit)
	throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	E element()
	Name: element
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#element--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	void push(E e)
	Name: push
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingDeque.html#push-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}
}

[Classifier]
public interface BlockingQueue<E>
extends Queue<E>
Name: BlockingQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	E
}
derived {
	java.util.concurrent::SynchronousQueue
	java.util.concurrent::DelayQueue
	java.util.concurrent::LinkedBlockingQueue
	java.util.concurrent::PriorityBlockingQueue
	java.util.concurrent::ArrayBlockingQueue
	java.util.concurrent::TransferQueue
	java.util.concurrent::BlockingDeque
}
supertypes {
	java.util::Queue {
		null::E
	}
}
members {

	[Function]
	boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	void put(E e)
	  throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	boolean offer(E e,
	              long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	E take()
	throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	E poll(long timeout,
	       TimeUnit unit)
	throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	int drainTo(Collection<? super E> c,
	            int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BlockingQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: BlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}
}

[Classifier]
@FunctionalInterface
public interface Callable<V>
Name: Callable
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
	javax.tools::JavaCompiler.CompilationTask
	javax.tools::DocumentationTool.DocumentationTask
}
supertypes {
}
members {

	[Function]
	V call()
	throws Exception
	Name: call
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html#call--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Callable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}
}

[Classifier]
public static interface CompletableFuture.AsynchronousCompletionTask
Name: CompletableFuture.AsynchronousCompletionTask
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.AsynchronousCompletionTask.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
public interface CompletionService<V>
Name: CompletionService
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
	java.util.concurrent::ExecutorCompletionService
}
supertypes {
}
members {

	[Function]
	Future<V> submit(Callable<V> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	Future<V> submit(Runnable task,
	                 V result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html#submit-java.lang.Runnable-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::V
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	Future<V> take()
	        throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	Future<V> poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	Future<V> poll(long timeout,
	               TimeUnit unit)
	        throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionService.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}
}

[Classifier]
public interface CompletionStage<T>
Name: CompletionStage
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	T
}
derived {
	java.util.concurrent::CompletableFuture
}
supertypes {
}
members {

	[Function]
	<U> CompletionStage<U> thenApply(Function<? super T,? extends U> fn)
	Name: thenApply
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenApply-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> thenApplyAsync(Function<? super T,? extends U> fn)
	Name: thenApplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenApplyAsync-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> thenApplyAsync(Function<? super T,? extends U> fn,
	                                      Executor executor)
	Name: thenApplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenApplyAsync-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	CompletionStage<Void> thenAccept(Consumer<? super T> action)
	Name: thenAccept
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAccept-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action)
	Name: thenAcceptAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAcceptAsync-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> thenAcceptAsync(Consumer<? super T> action,
	                                      Executor executor)
	Name: thenAcceptAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAcceptAsync-java.util.function.Consumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> thenRun(Runnable action)
	Name: thenRun
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenRun-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> thenRunAsync(Runnable action)
	Name: thenRunAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenRunAsync-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> thenRunAsync(Runnable action,
	                                   Executor executor)
	Name: thenRunAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenRunAsync-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	<U,V> CompletionStage<V> thenCombine(CompletionStage<? extends U> other,
	                                     BiFunction<? super T,? super U,? extends V> fn)
	Name: thenCombine
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenCombine-java.util.concurrent.CompletionStage-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::V
		}
	}

	[Function]
	<U,V> CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other,
	                                          BiFunction<? super T,? super U,? extends V> fn)
	Name: thenCombineAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenCombineAsync-java.util.concurrent.CompletionStage-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::V
		}
	}

	[Function]
	<U,V> CompletionStage<V> thenCombineAsync(CompletionStage<? extends U> other,
	                                          BiFunction<? super T,? super U,? extends V> fn,
	                                          Executor executor)
	Name: thenCombineAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenCombineAsync-java.util.concurrent.CompletionStage-java.util.function.BiFunction-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::V
		}
	}

	[Function]
	<U> CompletionStage<Void> thenAcceptBoth(CompletionStage<? extends U> other,
	                                         BiConsumer<? super T,? super U> action)
	Name: thenAcceptBoth
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAcceptBoth-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	<U> CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
	                                              BiConsumer<? super T,? super U> action)
	Name: thenAcceptBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAcceptBothAsync-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	<U> CompletionStage<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
	                                              BiConsumer<? super T,? super U> action,
	                                              Executor executor)
	Name: thenAcceptBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenAcceptBothAsync-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterBoth(CompletionStage<?> other,
	                                   Runnable action)
	Name: runAfterBoth
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterBoth-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other,
	                                        Runnable action)
	Name: runAfterBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterBothAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterBothAsync(CompletionStage<?> other,
	                                        Runnable action,
	                                        Executor executor)
	Name: runAfterBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterBothAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	<U> CompletionStage<U> applyToEither(CompletionStage<? extends T> other,
	                                     Function<? super T,U> fn)
	Name: applyToEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#applyToEither-java.util.concurrent.CompletionStage-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other,
	                                          Function<? super T,U> fn)
	Name: applyToEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#applyToEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> applyToEitherAsync(CompletionStage<? extends T> other,
	                                          Function<? super T,U> fn,
	                                          Executor executor)
	Name: applyToEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#applyToEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	CompletionStage<Void> acceptEither(CompletionStage<? extends T> other,
	                                   Consumer<? super T> action)
	Name: acceptEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#acceptEither-java.util.concurrent.CompletionStage-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other,
	                                        Consumer<? super T> action)
	Name: acceptEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#acceptEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> acceptEitherAsync(CompletionStage<? extends T> other,
	                                        Consumer<? super T> action,
	                                        Executor executor)
	Name: acceptEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#acceptEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Consumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterEither(CompletionStage<?> other,
	                                     Runnable action)
	Name: runAfterEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterEither-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other,
	                                          Runnable action)
	Name: runAfterEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterEitherAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	CompletionStage<Void> runAfterEitherAsync(CompletionStage<?> other,
	                                          Runnable action,
	                                          Executor executor)
	Name: runAfterEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#runAfterEitherAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			java.lang::Void
		}
	}

	[Function]
	<U> CompletionStage<U> thenCompose(Function<? super T,? extends CompletionStage<U>> fn)
	Name: thenCompose
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenCompose-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)
	Name: thenComposeAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenComposeAsync-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn,
	                                        Executor executor)
	Name: thenComposeAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#thenComposeAsync-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	CompletionStage<T> exceptionally(Function<Throwable,? extends T> fn)
	Name: exceptionally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#exceptionally-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			java.lang::Throwable
			? {
				extends null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::T
		}
	}

	[Function]
	CompletionStage<T> whenComplete(BiConsumer<? super T,? super Throwable> action)
	Name: whenComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#whenComplete-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::T
		}
	}

	[Function]
	CompletionStage<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)
	Name: whenCompleteAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#whenCompleteAsync-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::T
		}
	}

	[Function]
	CompletionStage<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action,
	                                     Executor executor)
	Name: whenCompleteAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#whenCompleteAsync-java.util.function.BiConsumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::T
		}
	}

	[Function]
	<U> CompletionStage<U> handle(BiFunction<? super T,Throwable,? extends U> fn)
	Name: handle
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#handle-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn)
	Name: handleAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#handleAsync-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	<U> CompletionStage<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn,
	                                   Executor executor)
	Name: handleAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#handleAsync-java.util.function.BiFunction-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletionStage {
			null::U
		}
	}

	[Function]
	CompletableFuture<T> toCompletableFuture()
	Name: toCompletableFuture
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html#toCompletableFuture--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletionStage
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}
}

[Classifier]
public interface ConcurrentMap<K,V>
extends Map<K,V>
Name: ConcurrentMap
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
	K
}
derived {
	java.util.concurrent::ConcurrentHashMap
	java.util.concurrent::ConcurrentNavigableMap
}
supertypes {
	java.util::Map {
		null::K
		null::V
	}
}
members {

	[Function]
	default V getOrDefault(Object key,
	                       V defaultValue)
	Name: getOrDefault
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#getOrDefault-java.lang.Object-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		null::V
	
		[result]
		null::V
	}

	[Function]
	default void forEach(BiConsumer<? super K,? super V> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#forEach-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	V putIfAbsent(K key,
	              V value)
	Name: putIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#putIfAbsent-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	boolean remove(Object key,
	               Object value)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#remove-java.lang.Object-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	boolean replace(K key,
	                V oldValue,
	                V newValue)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#replace-K-V-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	V replace(K key,
	          V value)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#replace-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	default void replaceAll(BiFunction<? super K,? super V,? extends V> function)
	Name: replaceAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#replaceAll-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	default V computeIfAbsent(K key,
	                          Function<? super K,? extends V> mappingFunction)
	Name: computeIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#computeIfAbsent-K-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	default V computeIfPresent(K key,
	                           BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: computeIfPresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#computeIfPresent-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	default V compute(K key,
	                  BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#compute-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	default V merge(K key,
	                V value,
	                BiFunction<? super V,? super V,? extends V> remappingFunction)
	Name: merge
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentMap.html#merge-K-V-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=true
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		java.util.function::BiFunction {
			? {
				super null::V
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}
}

[Classifier]
public interface ConcurrentNavigableMap<K,V>
extends ConcurrentMap<K,V>, NavigableMap<K,V>
Name: ConcurrentNavigableMap
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
	K
}
derived {
	java.util.concurrent::ConcurrentSkipListMap
}
supertypes {
	java.util.concurrent::ConcurrentMap {
		null::K
		null::V
	}
	java.util::NavigableMap {
		null::K
		null::V
	}
}
members {

	[Function]
	ConcurrentNavigableMap<K,V> subMap(K fromKey,
	                                   boolean fromInclusive,
	                                   K toKey,
	                                   boolean toInclusive)
	Name: subMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#subMap-K-boolean-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> headMap(K toKey,
	                                    boolean inclusive)
	Name: headMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#headMap-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> tailMap(K fromKey,
	                                    boolean inclusive)
	Name: tailMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#tailMap-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> subMap(K fromKey,
	                                   K toKey)
	Name: subMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#subMap-K-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> headMap(K toKey)
	Name: headMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#headMap-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> tailMap(K fromKey)
	Name: tailMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#tailMap-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	ConcurrentNavigableMap<K,V> descendingMap()
	Name: descendingMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#descendingMap--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	NavigableSet<K> navigableKeySet()
	Name: navigableKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#navigableKeySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}

	[Function]
	NavigableSet<K> keySet()
	Name: keySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#keySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}

	[Function]
	NavigableSet<K> descendingKeySet()
	Name: descendingKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentNavigableMap.html#descendingKeySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentNavigableMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}
}

[Classifier]
public interface Delayed
extends Comparable<Delayed>
Name: Delayed
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Delayed.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ScheduledFuture
}
supertypes {
	java.lang::Comparable {
		java.util.concurrent::Delayed
	}
}
members {

	[Function]
	long getDelay(TimeUnit unit)
	Name: getDelay
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Delayed.html#getDelay-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Delayed
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::TimeUnit
	
		[result]
		other::long
	}
}

[Classifier]
public interface Executor
Name: Executor
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ExecutorService
}
supertypes {
}
members {

	[Function]
	void execute(Runnable command)
	Name: execute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Executor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		other::void
	}
}

[Classifier]
public interface ExecutorService
extends Executor
Name: ExecutorService
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::AbstractExecutorService
	java.util.concurrent::ScheduledExecutorService
}
supertypes {
	java.util.concurrent::Executor
}
members {

	[Function]
	void shutdown()
	Name: shutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#shutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	List<Runnable> shutdownNow()
	Name: shutdownNow
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#shutdownNow--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			java.lang::Runnable
		}
	}

	[Function]
	boolean isShutdown()
	Name: isShutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#isShutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	boolean isTerminated()
	Name: isTerminated
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#isTerminated--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	boolean awaitTermination(long timeout,
	                         TimeUnit unit)
	                  throws InterruptedException
	Name: awaitTermination
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#awaitTermination-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	<T> Future<T> submit(Callable<T> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	<T> Future<T> submit(Runnable task,
	                     T result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	Future<?> submit(Runnable task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#submit-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::Future {
			?
		}
	}

	[Function]
	<T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
	                       throws InterruptedException
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
	
		[result]
		java.util::List {
			java.util.concurrent::Future {
				null::T
			}
		}
	}

	[Function]
	<T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,
	                              long timeout,
	                              TimeUnit unit)
	                       throws InterruptedException
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util::List {
			java.util.concurrent::Future {
				null::T
			}
		}
	}

	[Function]
	<T> T invokeAny(Collection<? extends Callable<T>> tasks)
	         throws InterruptedException,
	                ExecutionException
	Name: invokeAny
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
	
		[result]
		null::T
	}

	[Function]
	<T> T invokeAny(Collection<? extends Callable<T>> tasks,
	                long timeout,
	                TimeUnit unit)
	         throws InterruptedException,
	                ExecutionException,
	                TimeoutException
	Name: invokeAny
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html#invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::T
	}
}

[Classifier]
public static interface ForkJoinPool.ForkJoinWorkerThreadFactory
Name: ForkJoinPool.ForkJoinWorkerThreadFactory
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
}
members {

	[Function]
	ForkJoinWorkerThread newThread(ForkJoinPool pool)
	Name: newThread
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ForkJoinWorkerThreadFactory.html#newThread-java.util.concurrent.ForkJoinPool-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool.ForkJoinWorkerThreadFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinPool
	
		[result]
		java.util.concurrent::ForkJoinWorkerThread
	}
}

[Classifier]
public static interface ForkJoinPool.ManagedBlocker
Name: ForkJoinPool.ManagedBlocker
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ManagedBlocker.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
}
members {

	[Function]
	boolean block()
	       throws InterruptedException
	Name: block
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ManagedBlocker.html#block--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool.ManagedBlocker
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	boolean isReleasable()
	Name: isReleasable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.ManagedBlocker.html#isReleasable--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool.ManagedBlocker
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public interface Future<V>
Name: Future
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
	javax.xml.ws::Response
	java.util.concurrent::RunnableFuture
	java.util.concurrent::ScheduledFuture
	java.util.concurrent::CompletableFuture
	java.util.concurrent::ForkJoinTask
}
supertypes {
}
members {

	[Function]
	boolean cancel(boolean mayInterruptIfRunning)
	Name: cancel
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html#cancel-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Future
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	boolean isCancelled()
	Name: isCancelled
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html#isCancelled--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Future
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	boolean isDone()
	Name: isDone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html#isDone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Future
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	V get()
	throws InterruptedException,
	      ExecutionException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html#get--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Future
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	V get(long timeout,
	      TimeUnit unit)
	throws InterruptedException,
	      ExecutionException,
	      TimeoutException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html#get-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Future
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::V
	}
}

[Classifier]
public interface RejectedExecutionHandler
Name: RejectedExecutionHandler
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionHandler.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ThreadPoolExecutor.CallerRunsPolicy
	java.util.concurrent::ThreadPoolExecutor.AbortPolicy
	java.util.concurrent::ThreadPoolExecutor.DiscardPolicy
	java.util.concurrent::ThreadPoolExecutor.DiscardOldestPolicy
}
supertypes {
}
members {

	[Function]
	void rejectedExecution(Runnable r,
	                       ThreadPoolExecutor executor)
	Name: rejectedExecution
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionHandler.html#rejectedExecution-java.lang.Runnable-java.util.concurrent.ThreadPoolExecutor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RejectedExecutionHandler
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::ThreadPoolExecutor
	
		[result]
		other::void
	}
}

[Classifier]
public interface RunnableFuture<V>
extends Runnable, Future<V>
Name: RunnableFuture
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableFuture.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
	javax.swing::SwingWorker
	java.util.concurrent::RunnableScheduledFuture
	java.util.concurrent::FutureTask
}
supertypes {
	java.lang::Runnable
	java.util.concurrent::Future {
		null::V
	}
}
members {

	[Function]
	void run()
	Name: run
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableFuture.html#run--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RunnableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}
}

[Classifier]
public interface RunnableScheduledFuture<V>
extends RunnableFuture<V>, ScheduledFuture<V>
Name: RunnableScheduledFuture
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableScheduledFuture.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.util.concurrent::RunnableFuture {
		null::V
	}
	java.util.concurrent::ScheduledFuture {
		null::V
	}
}
members {

	[Function]
	boolean isPeriodic()
	Name: isPeriodic
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RunnableScheduledFuture.html#isPeriodic--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RunnableScheduledFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public interface ScheduledExecutorService
extends ExecutorService
Name: ScheduledExecutorService
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ScheduledThreadPoolExecutor
}
supertypes {
	java.util.concurrent::ExecutorService
}
members {

	[Function]
	ScheduledFuture<?> schedule(Runnable command,
	                            long delay,
	                            TimeUnit unit)
	Name: schedule
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html#schedule-java.lang.Runnable-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}

	[Function]
	<V> ScheduledFuture<V> schedule(Callable<V> callable,
	                                long delay,
	                                TimeUnit unit)
	Name: schedule
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html#schedule-java.util.concurrent.Callable-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledExecutorService
	parameters {
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			null::V
		}
	}

	[Function]
	ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
	                                       long initialDelay,
	                                       long period,
	                                       TimeUnit unit)
	Name: scheduleAtFixedRate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html#scheduleAtFixedRate-java.lang.Runnable-long-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}

	[Function]
	ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
	                                          long initialDelay,
	                                          long delay,
	                                          TimeUnit unit)
	Name: scheduleWithFixedDelay
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html#scheduleWithFixedDelay-java.lang.Runnable-long-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}
}

[Classifier]
public interface ScheduledFuture<V>
extends Delayed, Future<V>
Name: ScheduledFuture
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledFuture.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	V
}
derived {
	java.util.concurrent::RunnableScheduledFuture
}
supertypes {
	java.util.concurrent::Delayed
	java.util.concurrent::Future {
		null::V
	}
}
members {
}

[Classifier]
public interface ThreadFactory
Name: ThreadFactory
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadFactory.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
}
members {

	[Function]
	Thread newThread(Runnable r)
	Name: newThread
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadFactory.html#newThread-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.lang::Thread
	}
}

[Classifier]
public interface TransferQueue<E>
extends BlockingQueue<E>
Name: TransferQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	E
}
derived {
	java.util.concurrent::LinkedTransferQueue
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
}
members {

	[Function]
	boolean tryTransfer(E e)
	Name: tryTransfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html#tryTransfer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	void transfer(E e)
	       throws InterruptedException
	Name: transfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html#transfer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	boolean tryTransfer(E e,
	                    long timeout,
	                    TimeUnit unit)
	             throws InterruptedException
	Name: tryTransfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html#tryTransfer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	boolean hasWaitingConsumer()
	Name: hasWaitingConsumer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html#hasWaitingConsumer--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	int getWaitingConsumerCount()
	Name: getWaitingConsumerCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TransferQueue.html#getWaitingConsumerCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}
}

[Classifier]
public abstract class AbstractExecutorService
extends Object
implements ExecutorService
Name: AbstractExecutorService
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html
Containing package: java.util.concurrent
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ThreadPoolExecutor
	java.util.concurrent::ForkJoinPool
}
supertypes {
	java.util.concurrent::ExecutorService
	java.lang::Object
}
members {

	[Function]
	public AbstractExecutorService()
	Name: AbstractExecutorService
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#AbstractExecutorService--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AbstractExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::AbstractExecutorService
	}

	[Function]
	protected <T> RunnableFuture<T> newTaskFor(Runnable runnable,
	                                           T value)
	Name: newTaskFor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::RunnableFuture {
			null::T
		}
	}

	[Function]
	protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
	Name: newTaskFor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#newTaskFor-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::RunnableFuture {
			null::T
		}
	}

	[Function]
	public Future<?> submit(Runnable task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#submit-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::Future {
			?
		}
	}

	[Function]
	public <T> Future<T> submit(Runnable task,
	                            T result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#submit-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	public <T> Future<T> submit(Callable<T> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	public <T> T invokeAny(Collection<? extends Callable<T>> tasks)
	                throws InterruptedException,
	                       ExecutionException
	Name: invokeAny
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#invokeAny-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
	
		[result]
		null::T
	}

	[Function]
	public <T> T invokeAny(Collection<? extends Callable<T>> tasks,
	                       long timeout,
	                       TimeUnit unit)
	                throws InterruptedException,
	                       ExecutionException,
	                       TimeoutException
	Name: invokeAny
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#invokeAny-java.util.Collection-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::T
	}

	[Function]
	public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
	                              throws InterruptedException
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#invokeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
	
		[result]
		java.util::List {
			java.util.concurrent::Future {
				null::T
			}
		}
	}

	[Function]
	public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,
	                                     long timeout,
	                                     TimeUnit unit)
	                              throws InterruptedException
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/AbstractExecutorService.html#invokeAll-java.util.Collection-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AbstractExecutorService
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util::List {
			java.util.concurrent::Future {
				null::T
			}
		}
	}
}

[Classifier]
public class ArrayBlockingQueue<E>
extends AbstractQueue<E>
implements BlockingQueue<E>, Serializable
Name: ArrayBlockingQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public ArrayBlockingQueue(int capacity)
	Name: ArrayBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#ArrayBlockingQueue-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ArrayBlockingQueue
	}

	[Function]
	public ArrayBlockingQueue(int capacity,
	                          boolean fair)
	Name: ArrayBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#ArrayBlockingQueue-int-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::boolean
	
		[result]
		java.util.concurrent::ArrayBlockingQueue
	}

	[Function]
	public ArrayBlockingQueue(int capacity,
	                          boolean fair,
	                          Collection<? extends E> c)
	Name: ArrayBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#ArrayBlockingQueue-int-boolean-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::boolean
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::ArrayBlockingQueue
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void put(E e)
	         throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	              throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class CompletableFuture<T>
extends Object
implements Future<T>, CompletionStage<T>
Name: CompletableFuture
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
}
derived {
}
supertypes {
	java.util.concurrent::Future {
		null::T
	}
	java.util.concurrent::CompletionStage {
		null::T
	}
	java.lang::Object
}
members {

	[Function]
	public CompletableFuture()
	Name: CompletableFuture
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#CompletableFuture--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CompletableFuture
	}

	[Function]
	public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)
	Name: supplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#supplyAsync-java.util.function.Supplier-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Supplier {
			null::U
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,
	                                                   Executor executor)
	Name: supplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#supplyAsync-java.util.function.Supplier-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Supplier {
			null::U
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public static CompletableFuture<Void> runAsync(Runnable runnable)
	Name: runAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAsync-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public static CompletableFuture<Void> runAsync(Runnable runnable,
	                                               Executor executor)
	Name: runAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAsync-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public static <U> CompletableFuture<U> completedFuture(U value)
	Name: completedFuture
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#completedFuture-U-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		null::U
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public boolean isDone()
	Name: isDone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#isDone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public T get()
	      throws InterruptedException,
	             ExecutionException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#get--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T
	}

	[Function]
	public T get(long timeout,
	             TimeUnit unit)
	      throws InterruptedException,
	             ExecutionException,
	             TimeoutException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#get-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::T
	}

	[Function]
	public T join()
	Name: join
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#join--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T
	}

	[Function]
	public T getNow(T valueIfAbsent)
	Name: getNow
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#getNow-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		null::T
	}

	[Function]
	public boolean complete(T value)
	Name: complete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#complete-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::boolean
	}

	[Function]
	public boolean completeExceptionally(Throwable ex)
	Name: completeExceptionally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#completeExceptionally-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		other::boolean
	}

	[Function]
	public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)
	Name: thenApply
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenApply-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn)
	Name: thenApplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenApplyAsync-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn,
	                                               Executor executor)
	Name: thenApplyAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenApplyAsync-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public CompletableFuture<Void> thenAccept(Consumer<? super T> action)
	Name: thenAccept
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAccept-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action)
	Name: thenAcceptAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptAsync-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action,
	                                               Executor executor)
	Name: thenAcceptAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptAsync-java.util.function.Consumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> thenRun(Runnable action)
	Name: thenRun
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenRun-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> thenRunAsync(Runnable action)
	Name: thenRunAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenRunAsync-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> thenRunAsync(Runnable action,
	                                            Executor executor)
	Name: thenRunAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenRunAsync-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other,
	                                              BiFunction<? super T,? super U,? extends V> fn)
	Name: thenCombine
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCombine-java.util.concurrent.CompletionStage-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::V
		}
	}

	[Function]
	public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other,
	                                                   BiFunction<? super T,? super U,? extends V> fn)
	Name: thenCombineAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCombineAsync-java.util.concurrent.CompletionStage-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::V
		}
	}

	[Function]
	public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other,
	                                                   BiFunction<? super T,? super U,? extends V> fn,
	                                                   Executor executor)
	Name: thenCombineAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCombineAsync-java.util.concurrent.CompletionStage-java.util.function.BiFunction-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::T
			}
			? {
				super null::U
			}
			? {
				extends null::V
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::V
		}
	}

	[Function]
	public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other,
	                                                  BiConsumer<? super T,? super U> action)
	Name: thenAcceptBoth
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptBoth-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
	                                                       BiConsumer<? super T,? super U> action)
	Name: thenAcceptBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
	                                                       BiConsumer<? super T,? super U> action,
	                                                       Executor executor)
	Name: thenAcceptBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenAcceptBothAsync-java.util.concurrent.CompletionStage-java.util.function.BiConsumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::U
			}
		}
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other,
	                                            Runnable action)
	Name: runAfterBoth
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterBoth-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other,
	                                                 Runnable action)
	Name: runAfterBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterBothAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other,
	                                                 Runnable action,
	                                                 Executor executor)
	Name: runAfterBothAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterBothAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other,
	                                              Function<? super T,U> fn)
	Name: applyToEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#applyToEither-java.util.concurrent.CompletionStage-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other,
	                                                   Function<? super T,U> fn)
	Name: applyToEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#applyToEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other,
	                                                   Function<? super T,U> fn,
	                                                   Executor executor)
	Name: applyToEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#applyToEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Function {
			? {
				super null::T
			}
			null::U
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other,
	                                            Consumer<? super T> action)
	Name: acceptEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#acceptEither-java.util.concurrent.CompletionStage-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other,
	                                                 Consumer<? super T> action)
	Name: acceptEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#acceptEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other,
	                                                 Consumer<? super T> action,
	                                                 Executor executor)
	Name: acceptEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#acceptEitherAsync-java.util.concurrent.CompletionStage-java.util.function.Consumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			? {
				extends null::T
			}
		}
		java.util.function::Consumer {
			? {
				super null::T
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterEither(CompletionStage<?> other,
	                                              Runnable action)
	Name: runAfterEither
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterEither-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other,
	                                                   Runnable action)
	Name: runAfterEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other,
	                                                   Runnable action,
	                                                   Executor executor)
	Name: runAfterEitherAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#runAfterEitherAsync-java.util.concurrent.CompletionStage-java.lang.Runnable-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CompletionStage {
			?
		}
		java.lang::Runnable
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public <U> CompletableFuture<U> thenCompose(Function<? super T,? extends CompletionStage<U>> fn)
	Name: thenCompose
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenCompose-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)
	Name: thenComposeAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenComposeAsync-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn,
	                                                 Executor executor)
	Name: thenComposeAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#thenComposeAsync-java.util.function.Function-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			? {
				super null::T
			}
			? {
				extends java.util.concurrent::CompletionStage {
					null::U
				}
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action)
	Name: whenComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#whenComplete-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}

	[Function]
	public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)
	Name: whenCompleteAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#whenCompleteAsync-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}

	[Function]
	public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action,
	                                              Executor executor)
	Name: whenCompleteAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#whenCompleteAsync-java.util.function.BiConsumer-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::T
			}
			? {
				super java.lang::Throwable
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}

	[Function]
	public <U> CompletableFuture<U> handle(BiFunction<? super T,Throwable,? extends U> fn)
	Name: handle
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#handle-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn)
	Name: handleAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#handleAsync-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public <U> CompletableFuture<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn,
	                                            Executor executor)
	Name: handleAsync
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#handleAsync-java.util.function.BiFunction-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::T
			}
			java.lang::Throwable
			? {
				extends null::U
			}
		}
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::U
		}
	}

	[Function]
	public CompletableFuture<T> toCompletableFuture()
	Name: toCompletableFuture
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#toCompletableFuture--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}

	[Function]
	public CompletableFuture<T> exceptionally(Function<Throwable,? extends T> fn)
	Name: exceptionally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#exceptionally-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Function {
			java.lang::Throwable
			? {
				extends null::T
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			null::T
		}
	}

	[Function]
	public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs)
	Name: allOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#allOf-java.util.concurrent.CompletableFuture...-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::... {
			java.util.concurrent::CompletableFuture {
				?
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Void
		}
	}

	[Function]
	public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs)
	Name: anyOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#anyOf-java.util.concurrent.CompletableFuture...-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::... {
			java.util.concurrent::CompletableFuture {
				?
			}
		}
	
		[result]
		java.util.concurrent::CompletableFuture {
			java.lang::Object
		}
	}

	[Function]
	public boolean cancel(boolean mayInterruptIfRunning)
	Name: cancel
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#cancel-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isCancelled()
	Name: isCancelled
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#isCancelled--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isCompletedExceptionally()
	Name: isCompletedExceptionally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#isCompletedExceptionally--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void obtrudeValue(T value)
	Name: obtrudeValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#obtrudeValue-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::void
	}

	[Function]
	public void obtrudeException(Throwable ex)
	Name: obtrudeException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#obtrudeException-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		other::void
	}

	[Function]
	public int getNumberOfDependents()
	Name: getNumberOfDependents
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#getNumberOfDependents--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CompletableFuture
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public class ConcurrentHashMap<K,V>
extends AbstractMap<K,V>
implements ConcurrentMap<K,V>, Serializable
Name: ConcurrentHashMap
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
	K
}
derived {
}
supertypes {
	java.util.concurrent::ConcurrentMap {
		null::K
		null::V
	}
	java.io::Serializable
	java.util::AbstractMap {
		null::K
		null::V
	}
}
members {

	[Function]
	public ConcurrentHashMap()
	Name: ConcurrentHashMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#ConcurrentHashMap--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentHashMap
	}

	[Function]
	public ConcurrentHashMap(int initialCapacity)
	Name: ConcurrentHashMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#ConcurrentHashMap-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ConcurrentHashMap
	}

	[Function]
	public ConcurrentHashMap(Map<? extends K,? extends V> m)
	Name: ConcurrentHashMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#ConcurrentHashMap-java.util.Map-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Map {
			? {
				extends null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentHashMap
	}

	[Function]
	public ConcurrentHashMap(int initialCapacity,
	                         float loadFactor)
	Name: ConcurrentHashMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#ConcurrentHashMap-int-float-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::float
	
		[result]
		java.util.concurrent::ConcurrentHashMap
	}

	[Function]
	public ConcurrentHashMap(int initialCapacity,
	                         float loadFactor,
	                         int concurrencyLevel)
	Name: ConcurrentHashMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#ConcurrentHashMap-int-float-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::float
		other::int
	
		[result]
		java.util.concurrent::ConcurrentHashMap
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public V get(Object key)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#get-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		null::V
	}

	[Function]
	public boolean containsKey(Object key)
	Name: containsKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#containsKey-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean containsValue(Object value)
	Name: containsValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#containsValue-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public V put(K key,
	             V value)
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#put-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public void putAll(Map<? extends K,? extends V> m)
	Name: putAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#putAll-java.util.Map-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Map {
			? {
				extends null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public V remove(Object key)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		null::V
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public ConcurrentHashMap.KeySetView<K,V> keySet()
	Name: keySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#keySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentHashMap.KeySetView {
			null::K
			null::V
		}
	}

	[Function]
	public Collection<V> values()
	Name: values
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#values--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Collection {
			null::V
		}
	}

	[Function]
	public Set<Map.Entry<K,V>> entrySet()
	Name: entrySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#entrySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Set {
			java.util::Map.Entry {
				null::K
				null::V
			}
		}
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#hashCode--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public V putIfAbsent(K key,
	                     V value)
	Name: putIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#putIfAbsent-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public boolean remove(Object key,
	                      Object value)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#remove-java.lang.Object-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean replace(K key,
	                       V oldValue,
	                       V newValue)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#replace-K-V-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public V replace(K key,
	                 V value)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#replace-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public V getOrDefault(Object key,
	                      V defaultValue)
	Name: getOrDefault
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#getOrDefault-java.lang.Object-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		null::V
	
		[result]
		null::V
	}

	[Function]
	public void forEach(BiConsumer<? super K,? super V> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEach-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public void replaceAll(BiFunction<? super K,? super V,? extends V> function)
	Name: replaceAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#replaceAll-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public V computeIfAbsent(K key,
	                         Function<? super K,? extends V> mappingFunction)
	Name: computeIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#computeIfAbsent-K-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V computeIfPresent(K key,
	                          BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: computeIfPresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#computeIfPresent-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V compute(K key,
	                 BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#compute-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V merge(K key,
	               V value,
	               BiFunction<? super V,? super V,? extends V> remappingFunction)
	Name: merge
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#merge-K-V-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		java.util.function::BiFunction {
			? {
				super null::V
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public boolean contains(Object value)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Enumeration<K> keys()
	Name: keys
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#keys--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Enumeration {
			null::K
		}
	}

	[Function]
	public Enumeration<V> elements()
	Name: elements
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#elements--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Enumeration {
			null::V
		}
	}

	[Function]
	public long mappingCount()
	Name: mappingCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#mappingCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet()
	Name: newKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#newKeySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		K
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentHashMap.KeySetView {
			null::K
			java.lang::Boolean
		}
	}

	[Function]
	public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet(int initialCapacity)
	Name: newKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#newKeySet-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		K
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ConcurrentHashMap.KeySetView {
			null::K
			java.lang::Boolean
		}
	}

	[Function]
	public ConcurrentHashMap.KeySetView<K,V> keySet(V mappedValue)
	Name: keySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#keySet-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		java.util.concurrent::ConcurrentHashMap.KeySetView {
			null::K
			null::V
		}
	}

	[Function]
	public void forEach(long parallelismThreshold,
	                    BiConsumer<? super K,? super V> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEach-long-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiConsumer {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> void forEach(long parallelismThreshold,
	                        BiFunction<? super K,? super V,? extends U> transformer,
	                        Consumer<? super U> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEach-long-java.util.function.BiFunction-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::Consumer {
			? {
				super null::U
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> U search(long parallelismThreshold,
	                    BiFunction<? super K,? super V,? extends U> searchFunction)
	Name: search
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#search-long-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public <U> U reduce(long parallelismThreshold,
	                    BiFunction<? super K,? super V,? extends U> transformer,
	                    BiFunction<? super U,? super U,? extends U> reducer)
	Name: reduce
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduce-long-java.util.function.BiFunction-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::U
			}
			? {
				super null::U
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public double reduceToDouble(long parallelismThreshold,
	                             ToDoubleBiFunction<? super K,? super V> transformer,
	                             double basis,
	                             DoubleBinaryOperator reducer)
	Name: reduceToDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceToDouble-long-java.util.function.ToDoubleBiFunction-double-java.util.function.DoubleBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToDoubleBiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
		other::double
		java.util.function::DoubleBinaryOperator
	
		[result]
		other::double
	}

	[Function]
	public long reduceToLong(long parallelismThreshold,
	                         ToLongBiFunction<? super K,? super V> transformer,
	                         long basis,
	                         LongBinaryOperator reducer)
	Name: reduceToLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceToLong-long-java.util.function.ToLongBiFunction-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToLongBiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public int reduceToInt(long parallelismThreshold,
	                       ToIntBiFunction<? super K,? super V> transformer,
	                       int basis,
	                       IntBinaryOperator reducer)
	Name: reduceToInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceToInt-long-java.util.function.ToIntBiFunction-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToIntBiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public void forEachKey(long parallelismThreshold,
	                       Consumer<? super K> action)
	Name: forEachKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachKey-long-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Consumer {
			? {
				super null::K
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> void forEachKey(long parallelismThreshold,
	                           Function<? super K,? extends U> transformer,
	                           Consumer<? super U> action)
	Name: forEachKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachKey-long-java.util.function.Function-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::U
			}
		}
		java.util.function::Consumer {
			? {
				super null::U
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> U searchKeys(long parallelismThreshold,
	                        Function<? super K,? extends U> searchFunction)
	Name: searchKeys
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#searchKeys-long-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public K reduceKeys(long parallelismThreshold,
	                    BiFunction<? super K,? super K,? extends K> reducer)
	Name: reduceKeys
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceKeys-long-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::K
			}
			? {
				extends null::K
			}
		}
	
		[result]
		null::K
	}

	[Function]
	public <U> U reduceKeys(long parallelismThreshold,
	                        Function<? super K,? extends U> transformer,
	                        BiFunction<? super U,? super U,? extends U> reducer)
	Name: reduceKeys
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceKeys-long-java.util.function.Function-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::U
			}
			? {
				super null::U
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public double reduceKeysToDouble(long parallelismThreshold,
	                                 ToDoubleFunction<? super K> transformer,
	                                 double basis,
	                                 DoubleBinaryOperator reducer)
	Name: reduceKeysToDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToDoubleFunction {
			? {
				super null::K
			}
		}
		other::double
		java.util.function::DoubleBinaryOperator
	
		[result]
		other::double
	}

	[Function]
	public long reduceKeysToLong(long parallelismThreshold,
	                             ToLongFunction<? super K> transformer,
	                             long basis,
	                             LongBinaryOperator reducer)
	Name: reduceKeysToLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToLongFunction {
			? {
				super null::K
			}
		}
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public int reduceKeysToInt(long parallelismThreshold,
	                           ToIntFunction<? super K> transformer,
	                           int basis,
	                           IntBinaryOperator reducer)
	Name: reduceKeysToInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceKeysToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToIntFunction {
			? {
				super null::K
			}
		}
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public void forEachValue(long parallelismThreshold,
	                         Consumer<? super V> action)
	Name: forEachValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachValue-long-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Consumer {
			? {
				super null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> void forEachValue(long parallelismThreshold,
	                             Function<? super V,? extends U> transformer,
	                             Consumer<? super U> action)
	Name: forEachValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachValue-long-java.util.function.Function-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::Consumer {
			? {
				super null::U
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> U searchValues(long parallelismThreshold,
	                          Function<? super V,? extends U> searchFunction)
	Name: searchValues
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#searchValues-long-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public V reduceValues(long parallelismThreshold,
	                      BiFunction<? super V,? super V,? extends V> reducer)
	Name: reduceValues
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceValues-long-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			? {
				super null::V
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public <U> U reduceValues(long parallelismThreshold,
	                          Function<? super V,? extends U> transformer,
	                          BiFunction<? super U,? super U,? extends U> reducer)
	Name: reduceValues
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceValues-long-java.util.function.Function-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			? {
				super null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::U
			}
			? {
				super null::U
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public double reduceValuesToDouble(long parallelismThreshold,
	                                   ToDoubleFunction<? super V> transformer,
	                                   double basis,
	                                   DoubleBinaryOperator reducer)
	Name: reduceValuesToDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToDoubleFunction {
			? {
				super null::V
			}
		}
		other::double
		java.util.function::DoubleBinaryOperator
	
		[result]
		other::double
	}

	[Function]
	public long reduceValuesToLong(long parallelismThreshold,
	                               ToLongFunction<? super V> transformer,
	                               long basis,
	                               LongBinaryOperator reducer)
	Name: reduceValuesToLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToLongFunction {
			? {
				super null::V
			}
		}
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public int reduceValuesToInt(long parallelismThreshold,
	                             ToIntFunction<? super V> transformer,
	                             int basis,
	                             IntBinaryOperator reducer)
	Name: reduceValuesToInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceValuesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToIntFunction {
			? {
				super null::V
			}
		}
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public void forEachEntry(long parallelismThreshold,
	                         Consumer<? super Map.Entry<K,V>> action)
	Name: forEachEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachEntry-long-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Consumer {
			? {
				super java.util::Map.Entry {
					null::K
					null::V
				}
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> void forEachEntry(long parallelismThreshold,
	                             Function<Map.Entry<K,V>,? extends U> transformer,
	                             Consumer<? super U> action)
	Name: forEachEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#forEachEntry-long-java.util.function.Function-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			java.util::Map.Entry {
				null::K
				null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::Consumer {
			? {
				super null::U
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public <U> U searchEntries(long parallelismThreshold,
	                           Function<Map.Entry<K,V>,? extends U> searchFunction)
	Name: searchEntries
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#searchEntries-long-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			java.util::Map.Entry {
				null::K
				null::V
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public Map.Entry<K,V> reduceEntries(long parallelismThreshold,
	                                    BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)
	Name: reduceEntries
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceEntries-long-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::BiFunction {
			java.util::Map.Entry {
				null::K
				null::V
			}
			java.util::Map.Entry {
				null::K
				null::V
			}
			? {
				extends java.util::Map.Entry {
					null::K
					null::V
				}
			}
		}
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public <U> U reduceEntries(long parallelismThreshold,
	                           Function<Map.Entry<K,V>,? extends U> transformer,
	                           BiFunction<? super U,? super U,? extends U> reducer)
	Name: reduceEntries
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceEntries-long-java.util.function.Function-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::Function {
			java.util::Map.Entry {
				null::K
				null::V
			}
			? {
				extends null::U
			}
		}
		java.util.function::BiFunction {
			? {
				super null::U
			}
			? {
				super null::U
			}
			? {
				extends null::U
			}
		}
	
		[result]
		null::U
	}

	[Function]
	public double reduceEntriesToDouble(long parallelismThreshold,
	                                    ToDoubleFunction<Map.Entry<K,V>> transformer,
	                                    double basis,
	                                    DoubleBinaryOperator reducer)
	Name: reduceEntriesToDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToDouble-long-java.util.function.ToDoubleFunction-double-java.util.function.DoubleBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToDoubleFunction {
			java.util::Map.Entry {
				null::K
				null::V
			}
		}
		other::double
		java.util.function::DoubleBinaryOperator
	
		[result]
		other::double
	}

	[Function]
	public long reduceEntriesToLong(long parallelismThreshold,
	                                ToLongFunction<Map.Entry<K,V>> transformer,
	                                long basis,
	                                LongBinaryOperator reducer)
	Name: reduceEntriesToLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToLong-long-java.util.function.ToLongFunction-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToLongFunction {
			java.util::Map.Entry {
				null::K
				null::V
			}
		}
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public int reduceEntriesToInt(long parallelismThreshold,
	                              ToIntFunction<Map.Entry<K,V>> transformer,
	                              int basis,
	                              IntBinaryOperator reducer)
	Name: reduceEntriesToInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html#reduceEntriesToInt-long-java.util.function.ToIntFunction-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::ToIntFunction {
			java.util::Map.Entry {
				null::K
				null::V
			}
		}
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}
}

[Classifier]
public static class ConcurrentHashMap.KeySetView<K,V>
extends Object
implements Set<K>, Serializable
Name: ConcurrentHashMap.KeySetView
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=true
	scope=public
}
parameters {
	V
	K
}
derived {
}
supertypes {
	java.util::Set {
		null::K
	}
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public V getMappedValue()
	Name: getMappedValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#getMappedValue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Iterator<K> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::K
		}
	}

	[Function]
	public boolean add(K e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#add-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addAll(Collection<? extends K> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#addAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::K
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#hashCode--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Spliterator<K> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::K
		}
	}

	[Function]
	public void forEach(Consumer<? super K> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#forEach-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::K
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public ConcurrentHashMap<K,V> getMap()
	Name: getMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#getMap--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentHashMap {
			null::K
			null::V
		}
	}

	[Function]
	public final void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public final <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public final String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public final boolean containsAll(Collection<?> c)
	Name: containsAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#containsAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean removeAll(Collection<?> c)
	Name: removeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#removeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean retainAll(Collection<?> c)
	Name: retainAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.KeySetView.html#retainAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentHashMap.KeySetView
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}
}

[Classifier]
public class ConcurrentLinkedDeque<E>
extends AbstractCollection<E>
implements Deque<E>, Serializable
Name: ConcurrentLinkedDeque
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util::Deque {
		null::E
	}
	java.io::Serializable
	java.util::AbstractCollection {
		null::E
	}
}
members {

	[Function]
	public ConcurrentLinkedDeque()
	Name: ConcurrentLinkedDeque
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#ConcurrentLinkedDeque--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentLinkedDeque
	}

	[Function]
	public ConcurrentLinkedDeque(Collection<? extends E> c)
	Name: ConcurrentLinkedDeque
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#ConcurrentLinkedDeque-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentLinkedDeque
	}

	[Function]
	public void addFirst(E e)
	Name: addFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#addFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public void addLast(E e)
	Name: addLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#addLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offerFirst(E e)
	Name: offerFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#offerFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offerLast(E e)
	Name: offerLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#offerLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public E peekFirst()
	Name: peekFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#peekFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peekLast()
	Name: peekLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#peekLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E getFirst()
	Name: getFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#getFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E getLast()
	Name: getLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#getLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollFirst()
	Name: pollFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#pollFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollLast()
	Name: pollLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#pollLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E removeFirst()
	Name: removeFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#removeFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E removeLast()
	Name: removeLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#removeLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E remove()
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#remove--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pop()
	Name: pop
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#pop--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E element()
	Name: element
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#element--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public void push(E e)
	Name: push
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#push-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean removeFirstOccurrence(Object o)
	Name: removeFirstOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#removeFirstOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeLastOccurrence(Object o)
	Name: removeLastOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#removeLastOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addAll(Collection<? extends E> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#addAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Iterator<E> descendingIterator()
	Name: descendingIterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#descendingIterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedDeque.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class ConcurrentLinkedQueue<E>
extends AbstractQueue<E>
implements Queue<E>, Serializable
Name: ConcurrentLinkedQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util::Queue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public ConcurrentLinkedQueue()
	Name: ConcurrentLinkedQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#ConcurrentLinkedQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentLinkedQueue
	}

	[Function]
	public ConcurrentLinkedQueue(Collection<? extends E> c)
	Name: ConcurrentLinkedQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#ConcurrentLinkedQueue-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentLinkedQueue
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addAll(Collection<? extends E> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#addAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentLinkedQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class ConcurrentSkipListMap<K,V>
extends AbstractMap<K,V>
implements ConcurrentNavigableMap<K,V>, Cloneable, Serializable
Name: ConcurrentSkipListMap
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
	K
}
derived {
}
supertypes {
	java.util.concurrent::ConcurrentNavigableMap {
		null::K
		null::V
	}
	java.lang::Cloneable
	java.io::Serializable
	java.util::AbstractMap {
		null::K
		null::V
	}
}
members {

	[Function]
	public ConcurrentSkipListMap()
	Name: ConcurrentSkipListMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ConcurrentSkipListMap--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentSkipListMap
	}

	[Function]
	public ConcurrentSkipListMap(Comparator<? super K> comparator)
	Name: ConcurrentSkipListMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ConcurrentSkipListMap-java.util.Comparator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Comparator {
			? {
				super null::K
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListMap
	}

	[Function]
	public ConcurrentSkipListMap(Map<? extends K,? extends V> m)
	Name: ConcurrentSkipListMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ConcurrentSkipListMap-java.util.Map-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Map {
			? {
				extends null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListMap
	}

	[Function]
	public ConcurrentSkipListMap(SortedMap<K,? extends V> m)
	Name: ConcurrentSkipListMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ConcurrentSkipListMap-java.util.SortedMap-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::SortedMap {
			null::K
			? {
				extends null::V
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListMap
	}

	[Function]
	public ConcurrentSkipListMap<K,V> clone()
	Name: clone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#clone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentSkipListMap {
			null::K
			null::V
		}
	}

	[Function]
	public boolean containsKey(Object key)
	Name: containsKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#containsKey-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public V get(Object key)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#get-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		null::V
	}

	[Function]
	public V getOrDefault(Object key,
	                      V defaultValue)
	Name: getOrDefault
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#getOrDefault-java.lang.Object-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		null::V
	
		[result]
		null::V
	}

	[Function]
	public V put(K key,
	             V value)
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#put-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public V remove(Object key)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		null::V
	}

	[Function]
	public boolean containsValue(Object value)
	Name: containsValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#containsValue-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public V computeIfAbsent(K key,
	                         Function<? super K,? extends V> mappingFunction)
	Name: computeIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#computeIfAbsent-K-java.util.function.Function-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::Function {
			? {
				super null::K
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V computeIfPresent(K key,
	                          BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: computeIfPresent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#computeIfPresent-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V compute(K key,
	                 BiFunction<? super K,? super V,? extends V> remappingFunction)
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#compute-K-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public V merge(K key,
	               V value,
	               BiFunction<? super V,? super V,? extends V> remappingFunction)
	Name: merge
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#merge-K-V-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		java.util.function::BiFunction {
			? {
				super null::V
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		null::V
	}

	[Function]
	public NavigableSet<K> keySet()
	Name: keySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#keySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}

	[Function]
	public NavigableSet<K> navigableKeySet()
	Name: navigableKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#navigableKeySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}

	[Function]
	public Collection<V> values()
	Name: values
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#values--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Collection {
			null::V
		}
	}

	[Function]
	public Set<Map.Entry<K,V>> entrySet()
	Name: entrySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#entrySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Set {
			java.util::Map.Entry {
				null::K
				null::V
			}
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> descendingMap()
	Name: descendingMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#descendingMap--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public NavigableSet<K> descendingKeySet()
	Name: descendingKeySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#descendingKeySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::K
		}
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public V putIfAbsent(K key,
	                     V value)
	Name: putIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#putIfAbsent-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public boolean remove(Object key,
	                      Object value)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#remove-java.lang.Object-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean replace(K key,
	                       V oldValue,
	                       V newValue)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#replace-K-V-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public V replace(K key,
	                 V value)
	Name: replace
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#replace-K-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::V
	
		[result]
		null::V
	}

	[Function]
	public Comparator<? super K> comparator()
	Name: comparator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#comparator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Comparator {
			? {
				super null::K
			}
		}
	}

	[Function]
	public K firstKey()
	Name: firstKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#firstKey--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::K
	}

	[Function]
	public K lastKey()
	Name: lastKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#lastKey--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::K
	}

	[Function]
	public ConcurrentNavigableMap<K,V> subMap(K fromKey,
	                                          boolean fromInclusive,
	                                          K toKey,
	                                          boolean toInclusive)
	Name: subMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#subMap-K-boolean-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> headMap(K toKey,
	                                           boolean inclusive)
	Name: headMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#headMap-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> tailMap(K fromKey,
	                                           boolean inclusive)
	Name: tailMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#tailMap-K-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		other::boolean
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> subMap(K fromKey,
	                                          K toKey)
	Name: subMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#subMap-K-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> headMap(K toKey)
	Name: headMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#headMap-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public ConcurrentNavigableMap<K,V> tailMap(K fromKey)
	Name: tailMap
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#tailMap-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util.concurrent::ConcurrentNavigableMap {
			null::K
			null::V
		}
	}

	[Function]
	public Map.Entry<K,V> lowerEntry(K key)
	Name: lowerEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#lowerEntry-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public K lowerKey(K key)
	Name: lowerKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#lowerKey-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		null::K
	}

	[Function]
	public Map.Entry<K,V> floorEntry(K key)
	Name: floorEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#floorEntry-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public K floorKey(K key)
	Name: floorKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#floorKey-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		null::K
	}

	[Function]
	public Map.Entry<K,V> ceilingEntry(K key)
	Name: ceilingEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ceilingEntry-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public K ceilingKey(K key)
	Name: ceilingKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#ceilingKey-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		null::K
	}

	[Function]
	public Map.Entry<K,V> higherEntry(K key)
	Name: higherEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#higherEntry-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public K higherKey(K key)
	Name: higherKey
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#higherKey-K-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::K
	
		[result]
		null::K
	}

	[Function]
	public Map.Entry<K,V> firstEntry()
	Name: firstEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#firstEntry--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public Map.Entry<K,V> lastEntry()
	Name: lastEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#lastEntry--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public Map.Entry<K,V> pollFirstEntry()
	Name: pollFirstEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#pollFirstEntry--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public Map.Entry<K,V> pollLastEntry()
	Name: pollLastEntry
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#pollLastEntry--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Map.Entry {
			null::K
			null::V
		}
	}

	[Function]
	public void forEach(BiConsumer<? super K,? super V> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#forEach-java.util.function.BiConsumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiConsumer {
			? {
				super null::K
			}
			? {
				super null::V
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public void replaceAll(BiFunction<? super K,? super V,? extends V> function)
	Name: replaceAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListMap.html#replaceAll-java.util.function.BiFunction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListMap
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::BiFunction {
			? {
				super null::K
			}
			? {
				super null::V
			}
			? {
				extends null::V
			}
		}
	
		[result]
		other::void
	}
}

[Classifier]
public class ConcurrentSkipListSet<E>
extends AbstractSet<E>
implements NavigableSet<E>, Cloneable, Serializable
Name: ConcurrentSkipListSet
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util::NavigableSet {
		null::E
	}
	java.lang::Cloneable
	java.io::Serializable
	java.util::AbstractSet {
		null::E
	}
}
members {

	[Function]
	public ConcurrentSkipListSet()
	Name: ConcurrentSkipListSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#ConcurrentSkipListSet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentSkipListSet
	}

	[Function]
	public ConcurrentSkipListSet(Comparator<? super E> comparator)
	Name: ConcurrentSkipListSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#ConcurrentSkipListSet-java.util.Comparator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Comparator {
			? {
				super null::E
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListSet
	}

	[Function]
	public ConcurrentSkipListSet(Collection<? extends E> c)
	Name: ConcurrentSkipListSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#ConcurrentSkipListSet-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListSet
	}

	[Function]
	public ConcurrentSkipListSet(SortedSet<E> s)
	Name: ConcurrentSkipListSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#ConcurrentSkipListSet-java.util.SortedSet-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::SortedSet {
			null::E
		}
	
		[result]
		java.util.concurrent::ConcurrentSkipListSet
	}

	[Function]
	public ConcurrentSkipListSet<E> clone()
	Name: clone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#clone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ConcurrentSkipListSet {
			null::E
		}
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Iterator<E> descendingIterator()
	Name: descendingIterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#descendingIterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeAll(Collection<?> c)
	Name: removeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#removeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public E lower(E e)
	Name: lower
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#lower-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		null::E
	}

	[Function]
	public E floor(E e)
	Name: floor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#floor-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		null::E
	}

	[Function]
	public E ceiling(E e)
	Name: ceiling
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#ceiling-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		null::E
	}

	[Function]
	public E higher(E e)
	Name: higher
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#higher-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		null::E
	}

	[Function]
	public E pollFirst()
	Name: pollFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#pollFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollLast()
	Name: pollLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#pollLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public Comparator<? super E> comparator()
	Name: comparator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#comparator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Comparator {
			? {
				super null::E
			}
		}
	}

	[Function]
	public E first()
	Name: first
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#first--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E last()
	Name: last
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#last--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public NavigableSet<E> subSet(E fromElement,
	                              boolean fromInclusive,
	                              E toElement,
	                              boolean toInclusive)
	Name: subSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#subSet-E-boolean-E-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::boolean
		null::E
		other::boolean
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> headSet(E toElement,
	                               boolean inclusive)
	Name: headSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#headSet-E-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::boolean
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> tailSet(E fromElement,
	                               boolean inclusive)
	Name: tailSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#tailSet-E-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::boolean
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> subSet(E fromElement,
	                              E toElement)
	Name: subSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#subSet-E-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		null::E
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> headSet(E toElement)
	Name: headSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#headSet-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> tailSet(E fromElement)
	Name: tailSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#tailSet-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public NavigableSet<E> descendingSet()
	Name: descendingSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#descendingSet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::NavigableSet {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentSkipListSet.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ConcurrentSkipListSet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class CopyOnWriteArrayList<E>
extends Object
implements List<E>, RandomAccess, Cloneable, Serializable
Name: CopyOnWriteArrayList
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util::List {
		null::E
	}
	java.util::RandomAccess
	java.lang::Cloneable
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public CopyOnWriteArrayList()
	Name: CopyOnWriteArrayList
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#CopyOnWriteArrayList--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CopyOnWriteArrayList
	}

	[Function]
	public CopyOnWriteArrayList(Collection<? extends E> c)
	Name: CopyOnWriteArrayList
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#CopyOnWriteArrayList-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::CopyOnWriteArrayList
	}

	[Function]
	public CopyOnWriteArrayList(E[] toCopyIn)
	Name: CopyOnWriteArrayList
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#CopyOnWriteArrayList-E:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::E
		}
	
		[result]
		java.util.concurrent::CopyOnWriteArrayList
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int indexOf(Object o)
	Name: indexOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#indexOf-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::int
	}

	[Function]
	public int indexOf(E e,
	                   int index)
	Name: indexOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#indexOf-E-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int lastIndexOf(Object o)
	Name: lastIndexOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#lastIndexOf-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::int
	}

	[Function]
	public int lastIndexOf(E e,
	                       int index)
	Name: lastIndexOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#lastIndexOf-E-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::int
	
		[result]
		other::int
	}

	[Function]
	public Object clone()
	Name: clone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#clone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Object
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public E get(int index)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#get-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		null::E
	}

	[Function]
	public E set(int index,
	             E element)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#set-int-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
	
		[result]
		null::E
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void add(int index,
	                E element)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#add-int-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
	
		[result]
		other::void
	}

	[Function]
	public E remove(int index)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#remove-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		null::E
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addIfAbsent(E e)
	Name: addIfAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#addIfAbsent-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean containsAll(Collection<?> c)
	Name: containsAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#containsAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeAll(Collection<?> c)
	Name: removeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#removeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean retainAll(Collection<?> c)
	Name: retainAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#retainAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public int addAllAbsent(Collection<? extends E> c)
	Name: addAllAbsent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#addAllAbsent-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public boolean addAll(Collection<? extends E> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#addAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addAll(int index,
	                      Collection<? extends E> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#addAll-int-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public void forEach(Consumer<? super E> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#forEach-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::E
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public boolean removeIf(Predicate<? super E> filter)
	Name: removeIf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#removeIf-java.util.function.Predicate-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Predicate {
			? {
				super null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public void replaceAll(UnaryOperator<E> operator)
	Name: replaceAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#replaceAll-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::UnaryOperator {
			null::E
		}
	
		[result]
		other::void
	}

	[Function]
	public void sort(Comparator<? super E> c)
	Name: sort
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#sort-java.util.Comparator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Comparator {
			? {
				super null::E
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#hashCode--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public ListIterator<E> listIterator()
	Name: listIterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#listIterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::ListIterator {
			null::E
		}
	}

	[Function]
	public ListIterator<E> listIterator(int index)
	Name: listIterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#listIterator-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util::ListIterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}

	[Function]
	public List<E> subList(int fromIndex,
	                       int toIndex)
	Name: subList
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html#subList-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArrayList
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		java.util::List {
			null::E
		}
	}
}

[Classifier]
public class CopyOnWriteArraySet<E>
extends AbstractSet<E>
implements Serializable
Name: CopyOnWriteArraySet
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.io::Serializable
	java.util::AbstractSet {
		null::E
	}
}
members {

	[Function]
	public CopyOnWriteArraySet()
	Name: CopyOnWriteArraySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#CopyOnWriteArraySet--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CopyOnWriteArraySet
	}

	[Function]
	public CopyOnWriteArraySet(Collection<? extends E> c)
	Name: CopyOnWriteArraySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#CopyOnWriteArraySet-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::CopyOnWriteArraySet
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean containsAll(Collection<?> c)
	Name: containsAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#containsAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean addAll(Collection<? extends E> c)
	Name: addAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#addAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeAll(Collection<?> c)
	Name: removeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#removeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean retainAll(Collection<?> c)
	Name: retainAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#retainAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public boolean equals(Object o)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#equals-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeIf(Predicate<? super E> filter)
	Name: removeIf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#removeIf-java.util.function.Predicate-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Predicate {
			? {
				super null::E
			}
		}
	
		[result]
		other::boolean
	}

	[Function]
	public void forEach(Consumer<? super E> action)
	Name: forEach
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#forEach-java.util.function.Consumer-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::Consumer {
			? {
				super null::E
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArraySet.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CopyOnWriteArraySet
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class CountDownLatch
extends Object
Name: CountDownLatch
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public CountDownLatch(int count)
	Name: CountDownLatch
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#CountDownLatch-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::CountDownLatch
	}

	[Function]
	public void await()
	           throws InterruptedException
	Name: await
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#await--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public boolean await(long timeout,
	                     TimeUnit unit)
	              throws InterruptedException
	Name: await
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#await-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public void countDown()
	Name: countDown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#countDown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public long getCount()
	Name: getCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#getCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountDownLatch.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountDownLatch
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public abstract class CountedCompleter<T>
extends ForkJoinTask<T>
Name: CountedCompleter
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html
Containing package: java.util.concurrent
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
}
derived {
}
supertypes {
	java.util.concurrent::ForkJoinTask {
		null::T
	}
}
members {

	[Function]
	protected CountedCompleter(CountedCompleter<?> completer,
	                           int initialPendingCount)
	Name: CountedCompleter
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#CountedCompleter-java.util.concurrent.CountedCompleter-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CountedCompleter {
			?
		}
		other::int
	
		[result]
		java.util.concurrent::CountedCompleter
	}

	[Function]
	protected CountedCompleter(CountedCompleter<?> completer)
	Name: CountedCompleter
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#CountedCompleter-java.util.concurrent.CountedCompleter-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CountedCompleter {
			?
		}
	
		[result]
		java.util.concurrent::CountedCompleter
	}

	[Function]
	protected CountedCompleter()
	Name: CountedCompleter
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#CountedCompleter--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CountedCompleter
	}

	[Function]
	public abstract void compute()
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#compute--
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void onCompletion(CountedCompleter<?> caller)
	Name: onCompletion
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#onCompletion-java.util.concurrent.CountedCompleter-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::CountedCompleter {
			?
		}
	
		[result]
		other::void
	}

	[Function]
	public boolean onExceptionalCompletion(Throwable ex,
	                                       CountedCompleter<?> caller)
	Name: onExceptionalCompletion
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#onExceptionalCompletion-java.lang.Throwable-java.util.concurrent.CountedCompleter-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
		java.util.concurrent::CountedCompleter {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public final CountedCompleter<?> getCompleter()
	Name: getCompleter
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#getCompleter--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CountedCompleter {
			?
		}
	}

	[Function]
	public final int getPendingCount()
	Name: getPendingCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#getPendingCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final void setPendingCount(int count)
	Name: setPendingCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#setPendingCount-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final void addToPendingCount(int delta)
	Name: addToPendingCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#addToPendingCount-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final boolean compareAndSetPendingCount(int expected,
	                                               int count)
	Name: compareAndSetPendingCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#compareAndSetPendingCount-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public final int decrementPendingCountUnlessZero()
	Name: decrementPendingCountUnlessZero
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#decrementPendingCountUnlessZero--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final CountedCompleter<?> getRoot()
	Name: getRoot
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#getRoot--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CountedCompleter {
			?
		}
	}

	[Function]
	public final void tryComplete()
	Name: tryComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#tryComplete--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final void propagateCompletion()
	Name: propagateCompletion
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#propagateCompletion--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void complete(T rawResult)
	Name: complete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#complete-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::void
	}

	[Function]
	public final CountedCompleter<?> firstComplete()
	Name: firstComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#firstComplete--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CountedCompleter {
			?
		}
	}

	[Function]
	public final CountedCompleter<?> nextComplete()
	Name: nextComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#nextComplete--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CountedCompleter {
			?
		}
	}

	[Function]
	public final void quietlyCompleteRoot()
	Name: quietlyCompleteRoot
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#quietlyCompleteRoot--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final void helpComplete(int maxTasks)
	Name: helpComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#helpComplete-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	protected final boolean exec()
	Name: exec
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#exec--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public T getRawResult()
	Name: getRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#getRawResult--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T
	}

	[Function]
	protected void setRawResult(T t)
	Name: setRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CountedCompleter.html#setRawResult-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CountedCompleter
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::void
	}
}

[Classifier]
public class CyclicBarrier
extends Object
Name: CyclicBarrier
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public CyclicBarrier(int parties,
	                     Runnable barrierAction)
	Name: CyclicBarrier
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier-int-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.lang::Runnable
	
		[result]
		java.util.concurrent::CyclicBarrier
	}

	[Function]
	public CyclicBarrier(int parties)
	Name: CyclicBarrier
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#CyclicBarrier-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::CyclicBarrier
	}

	[Function]
	public int getParties()
	Name: getParties
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#getParties--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int await()
	          throws InterruptedException,
	                 BrokenBarrierException
	Name: await
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#await--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int await(long timeout,
	                 TimeUnit unit)
	          throws InterruptedException,
	                 BrokenBarrierException,
	                 TimeoutException
	Name: await
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#await-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::int
	}

	[Function]
	public boolean isBroken()
	Name: isBroken
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#isBroken--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void reset()
	Name: reset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#reset--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public int getNumberWaiting()
	Name: getNumberWaiting
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CyclicBarrier.html#getNumberWaiting--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: CyclicBarrier
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}
}

[Classifier]
public class DelayQueue<E extends Delayed>
extends AbstractQueue<E>
implements BlockingQueue<E>
Name: DelayQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E: (E extends Delayed; E; java.util.concurrent::Delayed)
}
derived {
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public DelayQueue()
	Name: DelayQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#DelayQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::DelayQueue
	}

	[Function]
	public DelayQueue(Collection<? extends E> c)
	Name: DelayQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#DelayQueue-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::DelayQueue
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void put(E e)
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DelayQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}
}

[Classifier]
public class Exchanger<V>
extends Object
Name: Exchanger
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public Exchanger()
	Name: Exchanger
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html#Exchanger--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Exchanger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Exchanger
	}

	[Function]
	public V exchange(V x)
	           throws InterruptedException
	Name: exchange
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html#exchange-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Exchanger
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		null::V
	}

	[Function]
	public V exchange(V x,
	                  long timeout,
	                  TimeUnit unit)
	           throws InterruptedException,
	                  TimeoutException
	Name: exchange
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Exchanger.html#exchange-V-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Exchanger
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::V
	}
}

[Classifier]
public class ExecutorCompletionService<V>
extends Object
implements CompletionService<V>
Name: ExecutorCompletionService
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.util.concurrent::CompletionService {
		null::V
	}
	java.lang::Object
}
members {

	[Function]
	public ExecutorCompletionService(Executor executor)
	Name: ExecutorCompletionService
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#ExecutorCompletionService-java.util.concurrent.Executor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Executor
	
		[result]
		java.util.concurrent::ExecutorCompletionService
	}

	[Function]
	public ExecutorCompletionService(Executor executor,
	                                 BlockingQueue<Future<V>> completionQueue)
	Name: ExecutorCompletionService
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#ExecutorCompletionService-java.util.concurrent.Executor-java.util.concurrent.BlockingQueue-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Executor
		java.util.concurrent::BlockingQueue {
			java.util.concurrent::Future {
				null::V
			}
		}
	
		[result]
		java.util.concurrent::ExecutorCompletionService
	}

	[Function]
	public Future<V> submit(Callable<V> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	public Future<V> submit(Runnable task,
	                        V result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#submit-java.lang.Runnable-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::V
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	public Future<V> take()
	               throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	public Future<V> poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}

	[Function]
	public Future<V> poll(long timeout,
	                      TimeUnit unit)
	               throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorCompletionService.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutorCompletionService
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::Future {
			null::V
		}
	}
}

[Classifier]
public class Executors
extends Object
Name: Executors
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public static ExecutorService newFixedThreadPool(int nThreads)
	Name: newFixedThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newWorkStealingPool(int parallelism)
	Name: newWorkStealingPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newWorkStealingPool-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newWorkStealingPool()
	Name: newWorkStealingPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newWorkStealingPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newFixedThreadPool(int nThreads,
	                                                 ThreadFactory threadFactory)
	Name: newFixedThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool-int-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newSingleThreadExecutor()
	Name: newSingleThreadExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)
	Name: newSingleThreadExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newCachedThreadPool()
	Name: newCachedThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory)
	Name: newCachedThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ScheduledExecutorService newSingleThreadScheduledExecutor()
	Name: newSingleThreadScheduledExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ScheduledExecutorService
	}

	[Function]
	public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)
	Name: newSingleThreadScheduledExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ScheduledExecutorService
	}

	[Function]
	public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)
	Name: newScheduledThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newScheduledThreadPool-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ScheduledExecutorService
	}

	[Function]
	public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,
	                                                              ThreadFactory threadFactory)
	Name: newScheduledThreadPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#newScheduledThreadPool-int-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ScheduledExecutorService
	}

	[Function]
	public static ExecutorService unconfigurableExecutorService(ExecutorService executor)
	Name: unconfigurableExecutorService
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#unconfigurableExecutorService-java.util.concurrent.ExecutorService-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ExecutorService
	
		[result]
		java.util.concurrent::ExecutorService
	}

	[Function]
	public static ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)
	Name: unconfigurableScheduledExecutorService
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#unconfigurableScheduledExecutorService-java.util.concurrent.ScheduledExecutorService-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ScheduledExecutorService
	
		[result]
		java.util.concurrent::ScheduledExecutorService
	}

	[Function]
	public static ThreadFactory defaultThreadFactory()
	Name: defaultThreadFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#defaultThreadFactory--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadFactory
	}

	[Function]
	public static ThreadFactory privilegedThreadFactory()
	Name: privilegedThreadFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#privilegedThreadFactory--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadFactory
	}

	[Function]
	public static <T> Callable<T> callable(Runnable task,
	                                       T result)
	Name: callable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#callable-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::Callable {
			null::T
		}
	}

	[Function]
	public static Callable<Object> callable(Runnable task)
	Name: callable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#callable-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::Callable {
			java.lang::Object
		}
	}

	[Function]
	public static Callable<Object> callable(PrivilegedAction<?> action)
	Name: callable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#callable-java.security.PrivilegedAction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.security::PrivilegedAction {
			?
		}
	
		[result]
		java.util.concurrent::Callable {
			java.lang::Object
		}
	}

	[Function]
	public static Callable<Object> callable(PrivilegedExceptionAction<?> action)
	Name: callable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#callable-java.security.PrivilegedExceptionAction-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.security::PrivilegedExceptionAction {
			?
		}
	
		[result]
		java.util.concurrent::Callable {
			java.lang::Object
		}
	}

	[Function]
	public static <T> Callable<T> privilegedCallable(Callable<T> callable)
	Name: privilegedCallable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#privilegedCallable-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::Callable {
			null::T
		}
	}

	[Function]
	public static <T> Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable)
	Name: privilegedCallableUsingCurrentClassLoader
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html#privilegedCallableUsingCurrentClassLoader-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: Executors
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::Callable {
			null::T
		}
	}
}

[Classifier]
public class ForkJoinPool
extends AbstractExecutorService
Name: ForkJoinPool
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::AbstractExecutorService
}
members {

	[Function]
	public static final ForkJoinPool.ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory
	Name: defaultForkJoinWorkerThreadFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#defaultForkJoinWorkerThreadFactory
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=field
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool.ForkJoinWorkerThreadFactory
	}

	[Function]
	public ForkJoinPool()
	Name: ForkJoinPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#ForkJoinPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public ForkJoinPool(int parallelism)
	Name: ForkJoinPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#ForkJoinPool-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public ForkJoinPool(int parallelism,
	                    ForkJoinPool.ForkJoinWorkerThreadFactory factory,
	                    Thread.UncaughtExceptionHandler handler,
	                    boolean asyncMode)
	Name: ForkJoinPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#ForkJoinPool-int-java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory-java.lang.Thread.UncaughtExceptionHandler-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::ForkJoinPool.ForkJoinWorkerThreadFactory
		java.lang::Thread.UncaughtExceptionHandler
		other::boolean
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public static ForkJoinPool commonPool()
	Name: commonPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#commonPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public <T> T invoke(ForkJoinTask<T> task)
	Name: invoke
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#invoke-java.util.concurrent.ForkJoinTask-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	
		[result]
		null::T
	}

	[Function]
	public void execute(ForkJoinTask<?> task)
	Name: execute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#execute-java.util.concurrent.ForkJoinTask-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinTask {
			?
		}
	
		[result]
		other::void
	}

	[Function]
	public void execute(Runnable task)
	Name: execute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#execute-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		other::void
	}

	[Function]
	public <T> ForkJoinTask<T> submit(ForkJoinTask<T> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#submit-java.util.concurrent.ForkJoinTask-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	}

	[Function]
	public <T> ForkJoinTask<T> submit(Callable<T> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	}

	[Function]
	public <T> ForkJoinTask<T> submit(Runnable task,
	                                  T result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#submit-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	}

	[Function]
	public ForkJoinTask<?> submit(Runnable task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#submit-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#invokeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends java.util.concurrent::Callable {
					null::T
				}
			}
		}
	
		[result]
		java.util::List {
			java.util.concurrent::Future {
				null::T
			}
		}
	}

	[Function]
	public ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()
	Name: getFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getFactory--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool.ForkJoinWorkerThreadFactory
	}

	[Function]
	public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()
	Name: getUncaughtExceptionHandler
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getUncaughtExceptionHandler--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Thread.UncaughtExceptionHandler
	}

	[Function]
	public int getParallelism()
	Name: getParallelism
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getParallelism--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int getCommonPoolParallelism()
	Name: getCommonPoolParallelism
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getCommonPoolParallelism--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getPoolSize()
	Name: getPoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getPoolSize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean getAsyncMode()
	Name: getAsyncMode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getAsyncMode--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int getRunningThreadCount()
	Name: getRunningThreadCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getRunningThreadCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getActiveThreadCount()
	Name: getActiveThreadCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getActiveThreadCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean isQuiescent()
	Name: isQuiescent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#isQuiescent--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public long getStealCount()
	Name: getStealCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getStealCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public long getQueuedTaskCount()
	Name: getQueuedTaskCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getQueuedTaskCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public int getQueuedSubmissionCount()
	Name: getQueuedSubmissionCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#getQueuedSubmissionCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean hasQueuedSubmissions()
	Name: hasQueuedSubmissions
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#hasQueuedSubmissions--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	protected ForkJoinTask<?> pollSubmission()
	Name: pollSubmission
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#pollSubmission--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	protected int drainTasksTo(Collection<? super ForkJoinTask<?>> c)
	Name: drainTasksTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#drainTasksTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super java.util.concurrent::ForkJoinTask {
					?
				}
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public void shutdown()
	Name: shutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#shutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public List<Runnable> shutdownNow()
	Name: shutdownNow
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#shutdownNow--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			java.lang::Runnable
		}
	}

	[Function]
	public boolean isTerminated()
	Name: isTerminated
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#isTerminated--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isTerminating()
	Name: isTerminating
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#isTerminating--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isShutdown()
	Name: isShutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#isShutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean awaitTermination(long timeout,
	                                TimeUnit unit)
	                         throws InterruptedException
	Name: awaitTermination
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#awaitTermination-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public boolean awaitQuiescence(long timeout,
	                               TimeUnit unit)
	Name: awaitQuiescence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#awaitQuiescence-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public static void managedBlock(ForkJoinPool.ManagedBlocker blocker)
	                         throws InterruptedException
	Name: managedBlock
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinPool.ManagedBlocker
	
		[result]
		other::void
	}

	[Function]
	protected <T> RunnableFuture<T> newTaskFor(Runnable runnable,
	                                           T value)
	Name: newTaskFor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#newTaskFor-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::RunnableFuture {
			null::T
		}
	}

	[Function]
	protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
	Name: newTaskFor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#newTaskFor-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinPool
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::RunnableFuture {
			null::T
		}
	}
}

[Classifier]
public abstract class ForkJoinTask<V>
extends Object
implements Future<V>, Serializable
Name: ForkJoinTask
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html
Containing package: java.util.concurrent
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
	java.util.concurrent::RecursiveTask
	java.util.concurrent::CountedCompleter
	java.util.concurrent::RecursiveAction
}
supertypes {
	java.util.concurrent::Future {
		null::V
	}
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public ForkJoinTask()
	Name: ForkJoinTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#ForkJoinTask--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask
	}

	[Function]
	public final ForkJoinTask<V> fork()
	Name: fork
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#fork--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::V
		}
	}

	[Function]
	public final V join()
	Name: join
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#join--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public final V invoke()
	Name: invoke
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#invoke--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public static void invokeAll(ForkJoinTask<?> t1,
	                             ForkJoinTask<?> t2)
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#invokeAll-java.util.concurrent.ForkJoinTask-java.util.concurrent.ForkJoinTask-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinTask {
			?
		}
		java.util.concurrent::ForkJoinTask {
			?
		}
	
		[result]
		other::void
	}

	[Function]
	public static void invokeAll(ForkJoinTask<?>... tasks)
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#invokeAll-java.util.concurrent.ForkJoinTask...-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::... {
			java.util.concurrent::ForkJoinTask {
				?
			}
		}
	
		[result]
		other::void
	}

	[Function]
	public static <T extends ForkJoinTask<?>> Collection<T> invokeAll(Collection<T> tasks)
	Name: invokeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#invokeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
		T: (T extends ForkJoinTask<?>; T; java.util.concurrent::ForkJoinTask)
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			null::T
		}
	
		[result]
		java.util::Collection {
			null::T
		}
	}

	[Function]
	public boolean cancel(boolean mayInterruptIfRunning)
	Name: cancel
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#cancel-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean isDone()
	Name: isDone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#isDone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean isCancelled()
	Name: isCancelled
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#isCancelled--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean isCompletedAbnormally()
	Name: isCompletedAbnormally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#isCompletedAbnormally--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean isCompletedNormally()
	Name: isCompletedNormally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#isCompletedNormally--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final Throwable getException()
	Name: getException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Throwable
	}

	[Function]
	public void completeExceptionally(Throwable ex)
	Name: completeExceptionally
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#completeExceptionally-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		other::void
	}

	[Function]
	public void complete(V value)
	Name: complete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#complete-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	public final void quietlyComplete()
	Name: quietlyComplete
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#quietlyComplete--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final V get()
	            throws InterruptedException,
	                   ExecutionException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#get--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public final V get(long timeout,
	                   TimeUnit unit)
	            throws InterruptedException,
	                   ExecutionException,
	                   TimeoutException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#get-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::V
	}

	[Function]
	public final void quietlyJoin()
	Name: quietlyJoin
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#quietlyJoin--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final void quietlyInvoke()
	Name: quietlyInvoke
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#quietlyInvoke--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public static void helpQuiesce()
	Name: helpQuiesce
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#helpQuiesce--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void reinitialize()
	Name: reinitialize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#reinitialize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public static ForkJoinPool getPool()
	Name: getPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public static boolean inForkJoinPool()
	Name: inForkJoinPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#inForkJoinPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean tryUnfork()
	Name: tryUnfork
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#tryUnfork--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public static int getQueuedTaskCount()
	Name: getQueuedTaskCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getQueuedTaskCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public static int getSurplusQueuedTaskCount()
	Name: getSurplusQueuedTaskCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getSurplusQueuedTaskCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public abstract V getRawResult()
	Name: getRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getRawResult--
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	protected abstract void setRawResult(V value)
	Name: setRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#setRawResult-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	protected abstract boolean exec()
	Name: exec
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#exec--
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	protected static ForkJoinTask<?> peekNextLocalTask()
	Name: peekNextLocalTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#peekNextLocalTask--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	protected static ForkJoinTask<?> pollNextLocalTask()
	Name: pollNextLocalTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#pollNextLocalTask--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	protected static ForkJoinTask<?> pollTask()
	Name: pollTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#pollTask--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	public final short getForkJoinTaskTag()
	Name: getForkJoinTaskTag
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#getForkJoinTaskTag--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::short
	}

	[Function]
	public final short setForkJoinTaskTag(short tag)
	Name: setForkJoinTaskTag
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#setForkJoinTaskTag-short-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::short
	
		[result]
		other::short
	}

	[Function]
	public final boolean compareAndSetForkJoinTaskTag(short e,
	                                                  short tag)
	Name: compareAndSetForkJoinTaskTag
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#compareAndSetForkJoinTaskTag-short-short-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::short
		other::short
	
		[result]
		other::boolean
	}

	[Function]
	public static ForkJoinTask<?> adapt(Runnable runnable)
	Name: adapt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#adapt-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::ForkJoinTask {
			?
		}
	}

	[Function]
	public static <T> ForkJoinTask<T> adapt(Runnable runnable,
	                                        T result)
	Name: adapt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#adapt-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	}

	[Function]
	public static <T> ForkJoinTask<T> adapt(Callable<? extends T> callable)
	Name: adapt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinTask.html#adapt-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinTask
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			? {
				extends null::T
			}
		}
	
		[result]
		java.util.concurrent::ForkJoinTask {
			null::T
		}
	}
}

[Classifier]
public class ForkJoinWorkerThread
extends Thread
Name: ForkJoinWorkerThread
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Thread
}
members {

	[Function]
	protected ForkJoinWorkerThread(ForkJoinPool pool)
	Name: ForkJoinWorkerThread
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#ForkJoinWorkerThread-java.util.concurrent.ForkJoinPool-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ForkJoinPool
	
		[result]
		java.util.concurrent::ForkJoinWorkerThread
	}

	[Function]
	public ForkJoinPool getPool()
	Name: getPool
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#getPool--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ForkJoinPool
	}

	[Function]
	public int getPoolIndex()
	Name: getPoolIndex
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#getPoolIndex--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	protected void onStart()
	Name: onStart
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#onStart--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	protected void onTermination(Throwable exception)
	Name: onTermination
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#onTermination-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		other::void
	}

	[Function]
	public void run()
	Name: run
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinWorkerThread.html#run--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ForkJoinWorkerThread
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}
}

[Classifier]
public class FutureTask<V>
extends Object
implements RunnableFuture<V>
Name: FutureTask
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.util.concurrent::RunnableFuture {
		null::V
	}
	java.lang::Object
}
members {

	[Function]
	public FutureTask(Callable<V> callable)
	Name: FutureTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#FutureTask-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
	
		[result]
		java.util.concurrent::FutureTask
	}

	[Function]
	public FutureTask(Runnable runnable,
	                  V result)
	Name: FutureTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#FutureTask-java.lang.Runnable-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::V
	
		[result]
		java.util.concurrent::FutureTask
	}

	[Function]
	public boolean isCancelled()
	Name: isCancelled
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#isCancelled--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isDone()
	Name: isDone
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#isDone--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean cancel(boolean mayInterruptIfRunning)
	Name: cancel
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#cancel-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public V get()
	      throws InterruptedException,
	             ExecutionException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#get--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public V get(long timeout,
	             TimeUnit unit)
	      throws InterruptedException,
	             ExecutionException,
	             TimeoutException
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#get-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::V
	}

	[Function]
	protected void done()
	Name: done
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#done--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	protected void set(V v)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#set-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	protected void setException(Throwable t)
	Name: setException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#setException-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		other::void
	}

	[Function]
	public void run()
	Name: run
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#run--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	protected boolean runAndReset()
	Name: runAndReset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/FutureTask.html#runAndReset--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: FutureTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public class LinkedBlockingDeque<E>
extends AbstractQueue<E>
implements BlockingDeque<E>, Serializable
Name: LinkedBlockingDeque
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::BlockingDeque {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public LinkedBlockingDeque()
	Name: LinkedBlockingDeque
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#LinkedBlockingDeque--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::LinkedBlockingDeque
	}

	[Function]
	public LinkedBlockingDeque(int capacity)
	Name: LinkedBlockingDeque
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#LinkedBlockingDeque-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::LinkedBlockingDeque
	}

	[Function]
	public LinkedBlockingDeque(Collection<? extends E> c)
	Name: LinkedBlockingDeque
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#LinkedBlockingDeque-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::LinkedBlockingDeque
	}

	[Function]
	public void addFirst(E e)
	Name: addFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#addFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public void addLast(E e)
	Name: addLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#addLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offerFirst(E e)
	Name: offerFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offerFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offerLast(E e)
	Name: offerLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offerLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void putFirst(E e)
	              throws InterruptedException
	Name: putFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#putFirst-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public void putLast(E e)
	             throws InterruptedException
	Name: putLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#putLast-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offerFirst(E e,
	                          long timeout,
	                          TimeUnit unit)
	                   throws InterruptedException
	Name: offerFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offerFirst-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offerLast(E e,
	                         long timeout,
	                         TimeUnit unit)
	                  throws InterruptedException
	Name: offerLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offerLast-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E removeFirst()
	Name: removeFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#removeFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E removeLast()
	Name: removeLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#removeLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollFirst()
	Name: pollFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#pollFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollLast()
	Name: pollLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#pollLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E takeFirst()
	            throws InterruptedException
	Name: takeFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#takeFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E takeLast()
	           throws InterruptedException
	Name: takeLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#takeLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E pollFirst(long timeout,
	                   TimeUnit unit)
	            throws InterruptedException
	Name: pollFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#pollFirst-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E pollLast(long timeout,
	                  TimeUnit unit)
	           throws InterruptedException
	Name: pollLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#pollLast-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E getFirst()
	Name: getFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#getFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E getLast()
	Name: getLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#getLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peekFirst()
	Name: peekFirst
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#peekFirst--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peekLast()
	Name: peekLast
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#peekLast--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean removeFirstOccurrence(Object o)
	Name: removeFirstOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#removeFirstOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeLastOccurrence(Object o)
	Name: removeLastOccurrence
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#removeLastOccurrence-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void put(E e)
	         throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	              throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E remove()
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#remove--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E element()
	Name: element
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#element--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public void push(E e)
	Name: push
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#push-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public E pop()
	Name: pop
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#pop--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Iterator<E> descendingIterator()
	Name: descendingIterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#descendingIterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingDeque.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingDeque
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class LinkedBlockingQueue<E>
extends AbstractQueue<E>
implements BlockingQueue<E>, Serializable
Name: LinkedBlockingQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public LinkedBlockingQueue()
	Name: LinkedBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#LinkedBlockingQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::LinkedBlockingQueue
	}

	[Function]
	public LinkedBlockingQueue(int capacity)
	Name: LinkedBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#LinkedBlockingQueue-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::LinkedBlockingQueue
	}

	[Function]
	public LinkedBlockingQueue(Collection<? extends E> c)
	Name: LinkedBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#LinkedBlockingQueue-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::LinkedBlockingQueue
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public void put(E e)
	         throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	              throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedBlockingQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public class LinkedTransferQueue<E>
extends AbstractQueue<E>
implements TransferQueue<E>, Serializable
Name: LinkedTransferQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::TransferQueue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public LinkedTransferQueue()
	Name: LinkedTransferQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#LinkedTransferQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::LinkedTransferQueue
	}

	[Function]
	public LinkedTransferQueue(Collection<? extends E> c)
	Name: LinkedTransferQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#LinkedTransferQueue-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::LinkedTransferQueue
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}

	[Function]
	public void put(E e)
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean tryTransfer(E e)
	Name: tryTransfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#tryTransfer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void transfer(E e)
	              throws InterruptedException
	Name: transfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#transfer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean tryTransfer(E e,
	                           long timeout,
	                           TimeUnit unit)
	                    throws InterruptedException
	Name: tryTransfer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#tryTransfer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean hasWaitingConsumer()
	Name: hasWaitingConsumer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#hasWaitingConsumer--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getWaitingConsumerCount()
	Name: getWaitingConsumerCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#getWaitingConsumerCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/LinkedTransferQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LinkedTransferQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}
}

[Classifier]
public class Phaser
extends Object
Name: Phaser
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public Phaser()
	Name: Phaser
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#Phaser--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public Phaser(int parties)
	Name: Phaser
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#Phaser-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public Phaser(Phaser parent)
	Name: Phaser
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#Phaser-java.util.concurrent.Phaser-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Phaser
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public Phaser(Phaser parent,
	              int parties)
	Name: Phaser
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#Phaser-java.util.concurrent.Phaser-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Phaser
		other::int
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public int register()
	Name: register
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#register--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int bulkRegister(int parties)
	Name: bulkRegister
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#bulkRegister-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int arrive()
	Name: arrive
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#arrive--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int arriveAndDeregister()
	Name: arriveAndDeregister
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#arriveAndDeregister--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int arriveAndAwaitAdvance()
	Name: arriveAndAwaitAdvance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#arriveAndAwaitAdvance--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int awaitAdvance(int phase)
	Name: awaitAdvance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#awaitAdvance-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int awaitAdvanceInterruptibly(int phase)
	                              throws InterruptedException
	Name: awaitAdvanceInterruptibly
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#awaitAdvanceInterruptibly-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int awaitAdvanceInterruptibly(int phase,
	                                     long timeout,
	                                     TimeUnit unit)
	                              throws InterruptedException,
	                                     TimeoutException
	Name: awaitAdvanceInterruptibly
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#awaitAdvanceInterruptibly-int-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::int
	}

	[Function]
	public void forceTermination()
	Name: forceTermination
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#forceTermination--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final int getPhase()
	Name: getPhase
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getPhase--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getRegisteredParties()
	Name: getRegisteredParties
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getRegisteredParties--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getArrivedParties()
	Name: getArrivedParties
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getArrivedParties--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getUnarrivedParties()
	Name: getUnarrivedParties
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getUnarrivedParties--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public Phaser getParent()
	Name: getParent
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getParent--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public Phaser getRoot()
	Name: getRoot
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#getRoot--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::Phaser
	}

	[Function]
	public boolean isTerminated()
	Name: isTerminated
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#isTerminated--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	protected boolean onAdvance(int phase,
	                            int registeredParties)
	Name: onAdvance
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#onAdvance-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Phaser.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Phaser
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public class PriorityBlockingQueue<E>
extends AbstractQueue<E>
implements BlockingQueue<E>, Serializable
Name: PriorityBlockingQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public PriorityBlockingQueue()
	Name: PriorityBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#PriorityBlockingQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::PriorityBlockingQueue
	}

	[Function]
	public PriorityBlockingQueue(int initialCapacity)
	Name: PriorityBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#PriorityBlockingQueue-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::PriorityBlockingQueue
	}

	[Function]
	public PriorityBlockingQueue(int initialCapacity,
	                             Comparator<? super E> comparator)
	Name: PriorityBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#PriorityBlockingQueue-int-java.util.Comparator-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util::Comparator {
			? {
				super null::E
			}
		}
	
		[result]
		java.util.concurrent::PriorityBlockingQueue
	}

	[Function]
	public PriorityBlockingQueue(Collection<? extends E> c)
	Name: PriorityBlockingQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#PriorityBlockingQueue-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				extends null::E
			}
		}
	
		[result]
		java.util.concurrent::PriorityBlockingQueue
	}

	[Function]
	public boolean add(E e)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#add-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public void put(E e)
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public Comparator<? super E> comparator()
	Name: comparator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#comparator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Comparator {
			? {
				super null::E
			}
		}
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/PriorityBlockingQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: PriorityBlockingQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}
}

[Classifier]
public abstract class RecursiveAction
extends ForkJoinTask<Void>
Name: RecursiveAction
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html
Containing package: java.util.concurrent
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::ForkJoinTask {
		java.lang::Void
	}
}
members {

	[Function]
	public RecursiveAction()
	Name: RecursiveAction
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html#RecursiveAction--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RecursiveAction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::RecursiveAction
	}

	[Function]
	protected abstract void compute()
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html#compute--
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveAction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public final Void getRawResult()
	Name: getRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html#getRawResult--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveAction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Void
	}

	[Function]
	protected final void setRawResult(Void mustBeNull)
	Name: setRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html#setRawResult-java.lang.Void-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveAction
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Void
	
		[result]
		other::void
	}

	[Function]
	protected final boolean exec()
	Name: exec
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveAction.html#exec--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveAction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public abstract class RecursiveTask<V>
extends ForkJoinTask<V>
Name: RecursiveTask
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html
Containing package: java.util.concurrent
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.util.concurrent::ForkJoinTask {
		null::V
	}
}
members {

	[Function]
	public RecursiveTask()
	Name: RecursiveTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html#RecursiveTask--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RecursiveTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::RecursiveTask
	}

	[Function]
	protected abstract V compute()
	Name: compute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html#compute--
	Containing package: java.util.concurrent
	attributes {
		abstract=true
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public final V getRawResult()
	Name: getRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html#getRawResult--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	protected final void setRawResult(V value)
	Name: setRawResult
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html#setRawResult-V-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveTask
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	protected final boolean exec()
	Name: exec
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RecursiveTask.html#exec--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: RecursiveTask
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public class ScheduledThreadPoolExecutor
extends ThreadPoolExecutor
implements ScheduledExecutorService
Name: ScheduledThreadPoolExecutor
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::ScheduledExecutorService
	java.util.concurrent::ThreadPoolExecutor
}
members {

	[Function]
	public ScheduledThreadPoolExecutor(int corePoolSize)
	Name: ScheduledThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::ScheduledThreadPoolExecutor
	}

	[Function]
	public ScheduledThreadPoolExecutor(int corePoolSize,
	                                   ThreadFactory threadFactory)
	Name: ScheduledThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor-int-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ScheduledThreadPoolExecutor
	}

	[Function]
	public ScheduledThreadPoolExecutor(int corePoolSize,
	                                   RejectedExecutionHandler handler)
	Name: ScheduledThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor-int-java.util.concurrent.RejectedExecutionHandler-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::RejectedExecutionHandler
	
		[result]
		java.util.concurrent::ScheduledThreadPoolExecutor
	}

	[Function]
	public ScheduledThreadPoolExecutor(int corePoolSize,
	                                   ThreadFactory threadFactory,
	                                   RejectedExecutionHandler handler)
	Name: ScheduledThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor-int-java.util.concurrent.ThreadFactory-java.util.concurrent.RejectedExecutionHandler-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.concurrent::ThreadFactory
		java.util.concurrent::RejectedExecutionHandler
	
		[result]
		java.util.concurrent::ScheduledThreadPoolExecutor
	}

	[Function]
	protected <V> RunnableScheduledFuture<V> decorateTask(Runnable runnable,
	                                                      RunnableScheduledFuture<V> task)
	Name: decorateTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#decorateTask-java.lang.Runnable-java.util.concurrent.RunnableScheduledFuture-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
		V
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::RunnableScheduledFuture {
			null::V
		}
	
		[result]
		java.util.concurrent::RunnableScheduledFuture {
			null::V
		}
	}

	[Function]
	protected <V> RunnableScheduledFuture<V> decorateTask(Callable<V> callable,
	                                                      RunnableScheduledFuture<V> task)
	Name: decorateTask
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#decorateTask-java.util.concurrent.Callable-java.util.concurrent.RunnableScheduledFuture-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
		java.util.concurrent::RunnableScheduledFuture {
			null::V
		}
	
		[result]
		java.util.concurrent::RunnableScheduledFuture {
			null::V
		}
	}

	[Function]
	public ScheduledFuture<?> schedule(Runnable command,
	                                   long delay,
	                                   TimeUnit unit)
	Name: schedule
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#schedule-java.lang.Runnable-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}

	[Function]
	public <V> ScheduledFuture<V> schedule(Callable<V> callable,
	                                       long delay,
	                                       TimeUnit unit)
	Name: schedule
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#schedule-java.util.concurrent.Callable-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
		V
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::V
		}
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			null::V
		}
	}

	[Function]
	public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
	                                              long initialDelay,
	                                              long period,
	                                              TimeUnit unit)
	Name: scheduleAtFixedRate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleAtFixedRate-java.lang.Runnable-long-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}

	[Function]
	public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
	                                                 long initialDelay,
	                                                 long delay,
	                                                 TimeUnit unit)
	Name: scheduleWithFixedDelay
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#scheduleWithFixedDelay-java.lang.Runnable-long-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		other::long
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		java.util.concurrent::ScheduledFuture {
			?
		}
	}

	[Function]
	public void execute(Runnable command)
	Name: execute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#execute-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		other::void
	}

	[Function]
	public Future<?> submit(Runnable task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#submit-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		java.util.concurrent::Future {
			?
		}
	}

	[Function]
	public <T> Future<T> submit(Runnable task,
	                            T result)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#submit-java.lang.Runnable-T-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		null::T
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	public <T> Future<T> submit(Callable<T> task)
	Name: submit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#submit-java.util.concurrent.Callable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::Callable {
			null::T
		}
	
		[result]
		java.util.concurrent::Future {
			null::T
		}
	}

	[Function]
	public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)
	Name: setContinueExistingPeriodicTasksAfterShutdownPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#setContinueExistingPeriodicTasksAfterShutdownPolicy-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()
	Name: getContinueExistingPeriodicTasksAfterShutdownPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#getContinueExistingPeriodicTasksAfterShutdownPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)
	Name: setExecuteExistingDelayedTasksAfterShutdownPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#setExecuteExistingDelayedTasksAfterShutdownPolicy-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()
	Name: getExecuteExistingDelayedTasksAfterShutdownPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#getExecuteExistingDelayedTasksAfterShutdownPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void setRemoveOnCancelPolicy(boolean value)
	Name: setRemoveOnCancelPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#setRemoveOnCancelPolicy-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public boolean getRemoveOnCancelPolicy()
	Name: getRemoveOnCancelPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#getRemoveOnCancelPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void shutdown()
	Name: shutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#shutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public List<Runnable> shutdownNow()
	Name: shutdownNow
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#shutdownNow--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			java.lang::Runnable
		}
	}

	[Function]
	public BlockingQueue<Runnable> getQueue()
	Name: getQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#getQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ScheduledThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
	}
}

[Classifier]
public class Semaphore
extends Object
implements Serializable
Name: Semaphore
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public Semaphore(int permits)
	Name: Semaphore
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#Semaphore-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent::Semaphore
	}

	[Function]
	public Semaphore(int permits,
	                 boolean fair)
	Name: Semaphore
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#Semaphore-int-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::boolean
	
		[result]
		java.util.concurrent::Semaphore
	}

	[Function]
	public void acquire()
	             throws InterruptedException
	Name: acquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#acquire--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void acquireUninterruptibly()
	Name: acquireUninterruptibly
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#acquireUninterruptibly--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public boolean tryAcquire()
	Name: tryAcquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#tryAcquire--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean tryAcquire(long timeout,
	                          TimeUnit unit)
	                   throws InterruptedException
	Name: tryAcquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#tryAcquire-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public void release()
	Name: release
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#release--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void acquire(int permits)
	             throws InterruptedException
	Name: acquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#acquire-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public void acquireUninterruptibly(int permits)
	Name: acquireUninterruptibly
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#acquireUninterruptibly-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public boolean tryAcquire(int permits)
	Name: tryAcquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#tryAcquire-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public boolean tryAcquire(int permits,
	                          long timeout,
	                          TimeUnit unit)
	                   throws InterruptedException
	Name: tryAcquire
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#tryAcquire-int-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public void release(int permits)
	Name: release
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#release-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public int availablePermits()
	Name: availablePermits
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#availablePermits--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int drainPermits()
	Name: drainPermits
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#drainPermits--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	protected void reducePermits(int reduction)
	Name: reducePermits
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#reducePermits-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public boolean isFair()
	Name: isFair
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#isFair--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean hasQueuedThreads()
	Name: hasQueuedThreads
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#hasQueuedThreads--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final int getQueueLength()
	Name: getQueueLength
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#getQueueLength--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	protected Collection<Thread> getQueuedThreads()
	Name: getQueuedThreads
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#getQueuedThreads--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Collection {
			java.lang::Thread
		}
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: Semaphore
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public class SynchronousQueue<E>
extends AbstractQueue<E>
implements BlockingQueue<E>, Serializable
Name: SynchronousQueue
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.util.concurrent::BlockingQueue {
		null::E
	}
	java.io::Serializable
	java.util::AbstractQueue {
		null::E
	}
}
members {

	[Function]
	public SynchronousQueue()
	Name: SynchronousQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#SynchronousQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::SynchronousQueue
	}

	[Function]
	public SynchronousQueue(boolean fair)
	Name: SynchronousQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#SynchronousQueue-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		java.util.concurrent::SynchronousQueue
	}

	[Function]
	public void put(E e)
	         throws InterruptedException
	Name: put
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#put-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::void
	}

	[Function]
	public boolean offer(E e,
	                     long timeout,
	                     TimeUnit unit)
	              throws InterruptedException
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#offer-E-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	public boolean offer(E e)
	Name: offer
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#offer-E-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public E take()
	       throws InterruptedException
	Name: take
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#take--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public E poll(long timeout,
	              TimeUnit unit)
	       throws InterruptedException
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#poll-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		null::E
	}

	[Function]
	public E poll()
	Name: poll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#poll--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public boolean isEmpty()
	Name: isEmpty
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#isEmpty--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int size()
	Name: size
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#size--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int remainingCapacity()
	Name: remainingCapacity
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#remainingCapacity--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public void clear()
	Name: clear
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#clear--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public boolean contains(Object o)
	Name: contains
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#contains-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean remove(Object o)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#remove-java.lang.Object-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	public boolean containsAll(Collection<?> c)
	Name: containsAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#containsAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean removeAll(Collection<?> c)
	Name: removeAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#removeAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public boolean retainAll(Collection<?> c)
	Name: retainAll
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#retainAll-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			?
		}
	
		[result]
		other::boolean
	}

	[Function]
	public E peek()
	Name: peek
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#peek--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::E
	}

	[Function]
	public Iterator<E> iterator()
	Name: iterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#iterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Iterator {
			null::E
		}
	}

	[Function]
	public Spliterator<E> spliterator()
	Name: spliterator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#spliterator--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::Spliterator {
			null::E
		}
	}

	[Function]
	public Object[] toArray()
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#toArray--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.lang::Object
		}
	}

	[Function]
	public <T> T[] toArray(T[] a)
	Name: toArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#toArray-T:A-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::T
		}
	
		[result]
		other::[] {
			null::T
		}
	}

	[Function]
	public int drainTo(Collection<? super E> c)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#drainTo-java.util.Collection-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
	
		[result]
		other::int
	}

	[Function]
	public int drainTo(Collection<? super E> c,
	                   int maxElements)
	Name: drainTo
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/SynchronousQueue.html#drainTo-java.util.Collection-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: SynchronousQueue
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::Collection {
			? {
				super null::E
			}
		}
		other::int
	
		[result]
		other::int
	}
}

[Classifier]
public class ThreadLocalRandom
extends Random
Name: ThreadLocalRandom
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util::Random
}
members {

	[Function]
	public static ThreadLocalRandom current()
	Name: current
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#current--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadLocalRandom
	}

	[Function]
	public void setSeed(long seed)
	Name: setSeed
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#setSeed-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}

	[Function]
	protected int next(int bits)
	Name: next
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#next-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int nextInt()
	Name: nextInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextInt--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int nextInt(int bound)
	Name: nextInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextInt-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int nextInt(int origin,
	                   int bound)
	Name: nextInt
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextInt-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::int
	}

	[Function]
	public long nextLong()
	Name: nextLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextLong--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public long nextLong(long bound)
	Name: nextLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextLong-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long nextLong(long origin,
	                     long bound)
	Name: nextLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextLong-long-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::long
	
		[result]
		other::long
	}

	[Function]
	public double nextDouble()
	Name: nextDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextDouble--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public double nextDouble(double bound)
	Name: nextDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextDouble-double-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::double
	
		[result]
		other::double
	}

	[Function]
	public double nextDouble(double origin,
	                         double bound)
	Name: nextDouble
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextDouble-double-double-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::double
		other::double
	
		[result]
		other::double
	}

	[Function]
	public boolean nextBoolean()
	Name: nextBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextBoolean--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public float nextFloat()
	Name: nextFloat
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextFloat--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}

	[Function]
	public double nextGaussian()
	Name: nextGaussian
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#nextGaussian--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public IntStream ints(long streamSize)
	Name: ints
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#ints-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		java.util.stream::IntStream
	}

	[Function]
	public IntStream ints()
	Name: ints
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#ints--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.stream::IntStream
	}

	[Function]
	public IntStream ints(long streamSize,
	                      int randomNumberOrigin,
	                      int randomNumberBound)
	Name: ints
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#ints-long-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::int
		other::int
	
		[result]
		java.util.stream::IntStream
	}

	[Function]
	public IntStream ints(int randomNumberOrigin,
	                      int randomNumberBound)
	Name: ints
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#ints-int-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		java.util.stream::IntStream
	}

	[Function]
	public LongStream longs(long streamSize)
	Name: longs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#longs-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		java.util.stream::LongStream
	}

	[Function]
	public LongStream longs()
	Name: longs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#longs--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.stream::LongStream
	}

	[Function]
	public LongStream longs(long streamSize,
	                        long randomNumberOrigin,
	                        long randomNumberBound)
	Name: longs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#longs-long-long-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::long
		other::long
	
		[result]
		java.util.stream::LongStream
	}

	[Function]
	public LongStream longs(long randomNumberOrigin,
	                        long randomNumberBound)
	Name: longs
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#longs-long-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::long
	
		[result]
		java.util.stream::LongStream
	}

	[Function]
	public DoubleStream doubles(long streamSize)
	Name: doubles
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#doubles-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		java.util.stream::DoubleStream
	}

	[Function]
	public DoubleStream doubles()
	Name: doubles
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#doubles--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.stream::DoubleStream
	}

	[Function]
	public DoubleStream doubles(long streamSize,
	                            double randomNumberOrigin,
	                            double randomNumberBound)
	Name: doubles
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#doubles-long-double-double-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::double
		other::double
	
		[result]
		java.util.stream::DoubleStream
	}

	[Function]
	public DoubleStream doubles(double randomNumberOrigin,
	                            double randomNumberBound)
	Name: doubles
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadLocalRandom.html#doubles-double-double-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadLocalRandom
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::double
		other::double
	
		[result]
		java.util.stream::DoubleStream
	}
}

[Classifier]
public class ThreadPoolExecutor
extends AbstractExecutorService
Name: ThreadPoolExecutor
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
	java.util.concurrent::ScheduledThreadPoolExecutor
}
supertypes {
	java.util.concurrent::AbstractExecutorService
}
members {

	[Function]
	public ThreadPoolExecutor(int corePoolSize,
	                          int maximumPoolSize,
	                          long keepAliveTime,
	                          TimeUnit unit,
	                          BlockingQueue<Runnable> workQueue)
	Name: ThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#ThreadPoolExecutor-int-int-long-java.util.concurrent.TimeUnit-java.util.concurrent.BlockingQueue-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::long
		java.util.concurrent::TimeUnit
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
	
		[result]
		java.util.concurrent::ThreadPoolExecutor
	}

	[Function]
	public ThreadPoolExecutor(int corePoolSize,
	                          int maximumPoolSize,
	                          long keepAliveTime,
	                          TimeUnit unit,
	                          BlockingQueue<Runnable> workQueue,
	                          ThreadFactory threadFactory)
	Name: ThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#ThreadPoolExecutor-int-int-long-java.util.concurrent.TimeUnit-java.util.concurrent.BlockingQueue-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::long
		java.util.concurrent::TimeUnit
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
		java.util.concurrent::ThreadFactory
	
		[result]
		java.util.concurrent::ThreadPoolExecutor
	}

	[Function]
	public ThreadPoolExecutor(int corePoolSize,
	                          int maximumPoolSize,
	                          long keepAliveTime,
	                          TimeUnit unit,
	                          BlockingQueue<Runnable> workQueue,
	                          RejectedExecutionHandler handler)
	Name: ThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#ThreadPoolExecutor-int-int-long-java.util.concurrent.TimeUnit-java.util.concurrent.BlockingQueue-java.util.concurrent.RejectedExecutionHandler-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::long
		java.util.concurrent::TimeUnit
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
		java.util.concurrent::RejectedExecutionHandler
	
		[result]
		java.util.concurrent::ThreadPoolExecutor
	}

	[Function]
	public ThreadPoolExecutor(int corePoolSize,
	                          int maximumPoolSize,
	                          long keepAliveTime,
	                          TimeUnit unit,
	                          BlockingQueue<Runnable> workQueue,
	                          ThreadFactory threadFactory,
	                          RejectedExecutionHandler handler)
	Name: ThreadPoolExecutor
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#ThreadPoolExecutor-int-int-long-java.util.concurrent.TimeUnit-java.util.concurrent.BlockingQueue-java.util.concurrent.ThreadFactory-java.util.concurrent.RejectedExecutionHandler-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::long
		java.util.concurrent::TimeUnit
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
		java.util.concurrent::ThreadFactory
		java.util.concurrent::RejectedExecutionHandler
	
		[result]
		java.util.concurrent::ThreadPoolExecutor
	}

	[Function]
	public void execute(Runnable command)
	Name: execute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#execute-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		other::void
	}

	[Function]
	public void shutdown()
	Name: shutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public List<Runnable> shutdownNow()
	Name: shutdownNow
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#shutdownNow--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			java.lang::Runnable
		}
	}

	[Function]
	public boolean isShutdown()
	Name: isShutdown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#isShutdown--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isTerminating()
	Name: isTerminating
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#isTerminating--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean isTerminated()
	Name: isTerminated
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#isTerminated--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public boolean awaitTermination(long timeout,
	                                TimeUnit unit)
	                         throws InterruptedException
	Name: awaitTermination
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#awaitTermination-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::boolean
	}

	[Function]
	protected void finalize()
	Name: finalize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#finalize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void setThreadFactory(ThreadFactory threadFactory)
	Name: setThreadFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#setThreadFactory-java.util.concurrent.ThreadFactory-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::ThreadFactory
	
		[result]
		other::void
	}

	[Function]
	public ThreadFactory getThreadFactory()
	Name: getThreadFactory
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getThreadFactory--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadFactory
	}

	[Function]
	public void setRejectedExecutionHandler(RejectedExecutionHandler handler)
	Name: setRejectedExecutionHandler
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#setRejectedExecutionHandler-java.util.concurrent.RejectedExecutionHandler-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::RejectedExecutionHandler
	
		[result]
		other::void
	}

	[Function]
	public RejectedExecutionHandler getRejectedExecutionHandler()
	Name: getRejectedExecutionHandler
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getRejectedExecutionHandler--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::RejectedExecutionHandler
	}

	[Function]
	public void setCorePoolSize(int corePoolSize)
	Name: setCorePoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#setCorePoolSize-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public int getCorePoolSize()
	Name: getCorePoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getCorePoolSize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean prestartCoreThread()
	Name: prestartCoreThread
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#prestartCoreThread--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public int prestartAllCoreThreads()
	Name: prestartAllCoreThreads
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#prestartAllCoreThreads--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public boolean allowsCoreThreadTimeOut()
	Name: allowsCoreThreadTimeOut
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#allowsCoreThreadTimeOut--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public void allowCoreThreadTimeOut(boolean value)
	Name: allowCoreThreadTimeOut
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#allowCoreThreadTimeOut-boolean-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public void setMaximumPoolSize(int maximumPoolSize)
	Name: setMaximumPoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#setMaximumPoolSize-int-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public int getMaximumPoolSize()
	Name: getMaximumPoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getMaximumPoolSize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public void setKeepAliveTime(long time,
	                             TimeUnit unit)
	Name: setKeepAliveTime
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#setKeepAliveTime-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::void
	}

	[Function]
	public long getKeepAliveTime(TimeUnit unit)
	Name: getKeepAliveTime
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getKeepAliveTime-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.concurrent::TimeUnit
	
		[result]
		other::long
	}

	[Function]
	public BlockingQueue<Runnable> getQueue()
	Name: getQueue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getQueue--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::BlockingQueue {
			java.lang::Runnable
		}
	}

	[Function]
	public boolean remove(Runnable task)
	Name: remove
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#remove-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
	
		[result]
		other::boolean
	}

	[Function]
	public void purge()
	Name: purge
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#purge--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public int getPoolSize()
	Name: getPoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getPoolSize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getActiveCount()
	Name: getActiveCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getActiveCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public int getLargestPoolSize()
	Name: getLargestPoolSize
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getLargestPoolSize--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public long getTaskCount()
	Name: getTaskCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getTaskCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public long getCompletedTaskCount()
	Name: getCompletedTaskCount
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#getCompletedTaskCount--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#toString--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	protected void beforeExecute(Thread t,
	                             Runnable r)
	Name: beforeExecute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#beforeExecute-java.lang.Thread-java.lang.Runnable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Thread
		java.lang::Runnable
	
		[result]
		other::void
	}

	[Function]
	protected void afterExecute(Runnable r,
	                            Throwable t)
	Name: afterExecute
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#afterExecute-java.lang.Runnable-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.lang::Throwable
	
		[result]
		other::void
	}

	[Function]
	protected void terminated()
	Name: terminated
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html#terminated--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}
}

[Classifier]
public static class ThreadPoolExecutor.AbortPolicy
extends Object
implements RejectedExecutionHandler
Name: ThreadPoolExecutor.AbortPolicy
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::RejectedExecutionHandler
	java.lang::Object
}
members {

	[Function]
	public AbortPolicy()
	Name: AbortPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html#AbortPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor.AbortPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadPoolExecutor.AbortPolicy
	}

	[Function]
	public void rejectedExecution(Runnable r,
	                              ThreadPoolExecutor e)
	Name: rejectedExecution
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.AbortPolicy.html#rejectedExecution-java.lang.Runnable-java.util.concurrent.ThreadPoolExecutor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor.AbortPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::ThreadPoolExecutor
	
		[result]
		other::void
	}
}

[Classifier]
public static class ThreadPoolExecutor.CallerRunsPolicy
extends Object
implements RejectedExecutionHandler
Name: ThreadPoolExecutor.CallerRunsPolicy
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::RejectedExecutionHandler
	java.lang::Object
}
members {

	[Function]
	public CallerRunsPolicy()
	Name: CallerRunsPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html#CallerRunsPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor.CallerRunsPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadPoolExecutor.CallerRunsPolicy
	}

	[Function]
	public void rejectedExecution(Runnable r,
	                              ThreadPoolExecutor e)
	Name: rejectedExecution
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.CallerRunsPolicy.html#rejectedExecution-java.lang.Runnable-java.util.concurrent.ThreadPoolExecutor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor.CallerRunsPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::ThreadPoolExecutor
	
		[result]
		other::void
	}
}

[Classifier]
public static class ThreadPoolExecutor.DiscardOldestPolicy
extends Object
implements RejectedExecutionHandler
Name: ThreadPoolExecutor.DiscardOldestPolicy
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::RejectedExecutionHandler
	java.lang::Object
}
members {

	[Function]
	public DiscardOldestPolicy()
	Name: DiscardOldestPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html#DiscardOldestPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor.DiscardOldestPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadPoolExecutor.DiscardOldestPolicy
	}

	[Function]
	public void rejectedExecution(Runnable r,
	                              ThreadPoolExecutor e)
	Name: rejectedExecution
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardOldestPolicy.html#rejectedExecution-java.lang.Runnable-java.util.concurrent.ThreadPoolExecutor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor.DiscardOldestPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::ThreadPoolExecutor
	
		[result]
		other::void
	}
}

[Classifier]
public static class ThreadPoolExecutor.DiscardPolicy
extends Object
implements RejectedExecutionHandler
Name: ThreadPoolExecutor.DiscardPolicy
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=true
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.util.concurrent::RejectedExecutionHandler
	java.lang::Object
}
members {

	[Function]
	public DiscardPolicy()
	Name: DiscardPolicy
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html#DiscardPolicy--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ThreadPoolExecutor.DiscardPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ThreadPoolExecutor.DiscardPolicy
	}

	[Function]
	public void rejectedExecution(Runnable r,
	                              ThreadPoolExecutor e)
	Name: rejectedExecution
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.DiscardPolicy.html#rejectedExecution-java.lang.Runnable-java.util.concurrent.ThreadPoolExecutor-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ThreadPoolExecutor.DiscardPolicy
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Runnable
		java.util.concurrent::ThreadPoolExecutor
	
		[result]
		other::void
	}
}

[Classifier]
public enum TimeUnit
extends Enum<TimeUnit>
Name: TimeUnit
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=enum
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Enum {
		java.util.concurrent::TimeUnit
	}
}
members {

	[Function]
	public static final TimeUnit NANOSECONDS
	Name: NANOSECONDS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#NANOSECONDS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit MICROSECONDS
	Name: MICROSECONDS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#MICROSECONDS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit MILLISECONDS
	Name: MILLISECONDS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#MILLISECONDS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit SECONDS
	Name: SECONDS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#SECONDS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit MINUTES
	Name: MINUTES
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#MINUTES
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit HOURS
	Name: HOURS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#HOURS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static final TimeUnit DAYS
	Name: DAYS
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#DAYS
	Containing package: java.util.concurrent
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public static TimeUnit[] values()
	Name: values
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#values--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			java.util.concurrent::TimeUnit
		}
	}

	[Function]
	public static TimeUnit valueOf(String name)
	Name: valueOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#valueOf-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::TimeUnit
	}

	[Function]
	public long convert(long sourceDuration,
	                    TimeUnit sourceUnit)
	Name: convert
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#convert-long-java.util.concurrent.TimeUnit-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.concurrent::TimeUnit
	
		[result]
		other::long
	}

	[Function]
	public long toNanos(long duration)
	Name: toNanos
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toNanos-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toMicros(long duration)
	Name: toMicros
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toMicros-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toMillis(long duration)
	Name: toMillis
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toMillis-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toSeconds(long duration)
	Name: toSeconds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toSeconds-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toMinutes(long duration)
	Name: toMinutes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toMinutes-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toHours(long duration)
	Name: toHours
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toHours-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long toDays(long duration)
	Name: toDays
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#toDays-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public void timedWait(Object obj,
	                      long timeout)
	               throws InterruptedException
	Name: timedWait
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#timedWait-java.lang.Object-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
		other::long
	
		[result]
		other::void
	}

	[Function]
	public void timedJoin(Thread thread,
	                      long timeout)
	               throws InterruptedException
	Name: timedJoin
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#timedJoin-java.lang.Thread-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Thread
		other::long
	
		[result]
		other::void
	}

	[Function]
	public void sleep(long timeout)
	           throws InterruptedException
	Name: sleep
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html#sleep-long-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TimeUnit
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}
}

[Classifier]
public class BrokenBarrierException
extends Exception
Name: BrokenBarrierException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BrokenBarrierException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Exception
}
members {

	[Function]
	public BrokenBarrierException()
	Name: BrokenBarrierException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BrokenBarrierException.html#BrokenBarrierException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: BrokenBarrierException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::BrokenBarrierException
	}

	[Function]
	public BrokenBarrierException(String message)
	Name: BrokenBarrierException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/BrokenBarrierException.html#BrokenBarrierException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: BrokenBarrierException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::BrokenBarrierException
	}
}

[Classifier]
public class CancellationException
extends IllegalStateException
Name: CancellationException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CancellationException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::IllegalStateException
}
members {

	[Function]
	public CancellationException()
	Name: CancellationException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CancellationException.html#CancellationException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CancellationException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CancellationException
	}

	[Function]
	public CancellationException(String message)
	Name: CancellationException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CancellationException.html#CancellationException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CancellationException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::CancellationException
	}
}

[Classifier]
public class CompletionException
extends RuntimeException
Name: CompletionException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	protected CompletionException()
	Name: CompletionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionException.html#CompletionException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CompletionException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::CompletionException
	}

	[Function]
	protected CompletionException(String message)
	Name: CompletionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionException.html#CompletionException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CompletionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::CompletionException
	}

	[Function]
	public CompletionException(String message,
	                           Throwable cause)
	Name: CompletionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionException.html#CompletionException-java.lang.String-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CompletionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
		java.lang::Throwable
	
		[result]
		java.util.concurrent::CompletionException
	}

	[Function]
	public CompletionException(Throwable cause)
	Name: CompletionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionException.html#CompletionException-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: CompletionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		java.util.concurrent::CompletionException
	}
}

[Classifier]
public class ExecutionException
extends Exception
Name: ExecutionException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutionException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Exception
}
members {

	[Function]
	protected ExecutionException()
	Name: ExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutionException.html#ExecutionException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::ExecutionException
	}

	[Function]
	protected ExecutionException(String message)
	Name: ExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutionException.html#ExecutionException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::ExecutionException
	}

	[Function]
	public ExecutionException(String message,
	                          Throwable cause)
	Name: ExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutionException.html#ExecutionException-java.lang.String-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
		java.lang::Throwable
	
		[result]
		java.util.concurrent::ExecutionException
	}

	[Function]
	public ExecutionException(Throwable cause)
	Name: ExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutionException.html#ExecutionException-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: ExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		java.util.concurrent::ExecutionException
	}
}

[Classifier]
public class RejectedExecutionException
extends RuntimeException
Name: RejectedExecutionException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	public RejectedExecutionException()
	Name: RejectedExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionException.html#RejectedExecutionException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RejectedExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::RejectedExecutionException
	}

	[Function]
	public RejectedExecutionException(String message)
	Name: RejectedExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionException.html#RejectedExecutionException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RejectedExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::RejectedExecutionException
	}

	[Function]
	public RejectedExecutionException(String message,
	                                  Throwable cause)
	Name: RejectedExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionException.html#RejectedExecutionException-java.lang.String-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RejectedExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
		java.lang::Throwable
	
		[result]
		java.util.concurrent::RejectedExecutionException
	}

	[Function]
	public RejectedExecutionException(Throwable cause)
	Name: RejectedExecutionException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/RejectedExecutionException.html#RejectedExecutionException-java.lang.Throwable-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: RejectedExecutionException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Throwable
	
		[result]
		java.util.concurrent::RejectedExecutionException
	}
}

[Classifier]
public class TimeoutException
extends Exception
Name: TimeoutException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeoutException.html
Containing package: java.util.concurrent
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Exception
}
members {

	[Function]
	public TimeoutException()
	Name: TimeoutException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeoutException.html#TimeoutException--
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: TimeoutException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent::TimeoutException
	}

	[Function]
	public TimeoutException(String message)
	Name: TimeoutException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeoutException.html#TimeoutException-java.lang.String-
	Containing package: java.util.concurrent
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: TimeoutException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		java.util.concurrent::TimeoutException
	}
}