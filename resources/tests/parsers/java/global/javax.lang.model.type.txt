[Package]
Name: javax.lang.model.type
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/package-summary.html
Containing package: javax.lang.model
attributes {
}

Subpackages {
}

[Classifier]
public interface ArrayType
extends ReferenceType
Name: ArrayType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ArrayType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::ReferenceType
}
members {

	[Function]
	TypeMirror getComponentType()
	Name: getComponentType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ArrayType.html#getComponentType--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ArrayType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}
}

[Classifier]
public interface DeclaredType
extends ReferenceType
Name: DeclaredType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/DeclaredType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	javax.lang.model.type::ErrorType
}
supertypes {
	javax.lang.model.type::ReferenceType
}
members {

	[Function]
	Element asElement()
	Name: asElement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/DeclaredType.html#asElement--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DeclaredType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.element::Element
	}

	[Function]
	TypeMirror getEnclosingType()
	Name: getEnclosingType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/DeclaredType.html#getEnclosingType--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DeclaredType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	List<? extends TypeMirror> getTypeArguments()
	Name: getTypeArguments
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/DeclaredType.html#getTypeArguments--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DeclaredType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}
}

[Classifier]
public interface ErrorType
extends DeclaredType
Name: ErrorType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ErrorType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::DeclaredType
}
members {
}

[Classifier]
public interface ExecutableType
extends TypeMirror
Name: ExecutableType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {

	[Function]
	List<? extends TypeVariable> getTypeVariables()
	Name: getTypeVariables
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html#getTypeVariables--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutableType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeVariable
			}
		}
	}

	[Function]
	TypeMirror getReturnType()
	Name: getReturnType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html#getReturnType--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutableType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	List<? extends TypeMirror> getParameterTypes()
	Name: getParameterTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html#getParameterTypes--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutableType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}

	[Function]
	TypeMirror getReceiverType()
	Name: getReceiverType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html#getReceiverType--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutableType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	List<? extends TypeMirror> getThrownTypes()
	Name: getThrownTypes
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ExecutableType.html#getThrownTypes--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: ExecutableType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}
}

[Classifier]
public interface IntersectionType
extends TypeMirror
Name: IntersectionType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/IntersectionType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {

	[Function]
	List<? extends TypeMirror> getBounds()
	Name: getBounds
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/IntersectionType.html#getBounds--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: IntersectionType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}
}

[Classifier]
public interface NoType
extends TypeMirror
Name: NoType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/NoType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {
}

[Classifier]
public interface NullType
extends ReferenceType
Name: NullType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/NullType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::ReferenceType
}
members {
}

[Classifier]
public interface PrimitiveType
extends TypeMirror
Name: PrimitiveType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/PrimitiveType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {
}

[Classifier]
public interface ReferenceType
extends TypeMirror
Name: ReferenceType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/ReferenceType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	javax.lang.model.type::NullType
	javax.lang.model.type::DeclaredType
	javax.lang.model.type::TypeVariable
	javax.lang.model.type::ArrayType
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {
}

[Classifier]
public interface TypeMirror
extends AnnotatedConstruct
Name: TypeMirror
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
	javax.lang.model.type::PrimitiveType
	javax.lang.model.type::UnionType
	javax.lang.model.type::NoType
	javax.lang.model.type::ReferenceType
	javax.lang.model.type::ExecutableType
	javax.lang.model.type::WildcardType
	javax.lang.model.type::IntersectionType
}
supertypes {
	javax.lang.model::AnnotatedConstruct
}
members {

	[Function]
	TypeKind getKind()
	Name: getKind
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#getKind--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeMirror
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	boolean equals(Object obj)
	Name: equals
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#equals-java.lang.Object-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeMirror
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::Object
	
		[result]
		other::boolean
	}

	[Function]
	int hashCode()
	Name: hashCode
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#hashCode--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeMirror
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#toString--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeMirror
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	<R,P> R accept(TypeVisitor<R,P> v,
	               P p)
	Name: accept
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeMirror.html#accept-javax.lang.model.type.TypeVisitor-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeMirror
	parameters {
		P
		R
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeVisitor {
			null::R
			null::P
		}
		null::P
	
		[result]
		null::R
	}
}

[Classifier]
public interface TypeVariable
extends ReferenceType
Name: TypeVariable
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVariable.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::ReferenceType
}
members {

	[Function]
	Element asElement()
	Name: asElement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVariable.html#asElement--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.element::Element
	}

	[Function]
	TypeMirror getUpperBound()
	Name: getUpperBound
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVariable.html#getUpperBound--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	TypeMirror getLowerBound()
	Name: getLowerBound
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVariable.html#getLowerBound--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVariable
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}
}

[Classifier]
public interface TypeVisitor<R,P>
Name: TypeVisitor
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
	P
	R
}
derived {
	javax.lang.model.util::AbstractTypeVisitor6
}
supertypes {
}
members {

	[Function]
	R visit(TypeMirror t,
	        P p)
	Name: visit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visit-javax.lang.model.type.TypeMirror-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeMirror
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visit(TypeMirror t)
	Name: visit
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visit-javax.lang.model.type.TypeMirror-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeMirror
	
		[result]
		null::R
	}

	[Function]
	R visitPrimitive(PrimitiveType t,
	                 P p)
	Name: visitPrimitive
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitPrimitive-javax.lang.model.type.PrimitiveType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::PrimitiveType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitNull(NullType t,
	            P p)
	Name: visitNull
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitNull-javax.lang.model.type.NullType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::NullType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitArray(ArrayType t,
	             P p)
	Name: visitArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitArray-javax.lang.model.type.ArrayType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::ArrayType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitDeclared(DeclaredType t,
	                P p)
	Name: visitDeclared
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitDeclared-javax.lang.model.type.DeclaredType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::DeclaredType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitError(ErrorType t,
	             P p)
	Name: visitError
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitError-javax.lang.model.type.ErrorType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::ErrorType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitTypeVariable(TypeVariable t,
	                    P p)
	Name: visitTypeVariable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitTypeVariable-javax.lang.model.type.TypeVariable-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeVariable
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitWildcard(WildcardType t,
	                P p)
	Name: visitWildcard
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitWildcard-javax.lang.model.type.WildcardType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::WildcardType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitExecutable(ExecutableType t,
	                  P p)
	Name: visitExecutable
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitExecutable-javax.lang.model.type.ExecutableType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::ExecutableType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitNoType(NoType t,
	              P p)
	Name: visitNoType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitNoType-javax.lang.model.type.NoType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::NoType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitUnknown(TypeMirror t,
	               P p)
	Name: visitUnknown
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitUnknown-javax.lang.model.type.TypeMirror-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeMirror
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitUnion(UnionType t,
	             P p)
	Name: visitUnion
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitUnion-javax.lang.model.type.UnionType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::UnionType
		null::P
	
		[result]
		null::R
	}

	[Function]
	R visitIntersection(IntersectionType t,
	                    P p)
	Name: visitIntersection
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeVisitor.html#visitIntersection-javax.lang.model.type.IntersectionType-P-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeVisitor
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::IntersectionType
		null::P
	
		[result]
		null::R
	}
}

[Classifier]
public interface UnionType
extends TypeMirror
Name: UnionType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnionType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {

	[Function]
	List<? extends TypeMirror> getAlternatives()
	Name: getAlternatives
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnionType.html#getAlternatives--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: UnionType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}
}

[Classifier]
public interface WildcardType
extends TypeMirror
Name: WildcardType
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/WildcardType.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=interface
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::TypeMirror
}
members {

	[Function]
	TypeMirror getExtendsBound()
	Name: getExtendsBound
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/WildcardType.html#getExtendsBound--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: WildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	TypeMirror getSuperBound()
	Name: getSuperBound
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/WildcardType.html#getSuperBound--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: WildcardType
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}
}

[Classifier]
public enum TypeKind
extends Enum<TypeKind>
Name: TypeKind
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=enum
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.lang::Enum {
		javax.lang.model.type::TypeKind
	}
}
members {

	[Function]
	public static final TypeKind BOOLEAN
	Name: BOOLEAN
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#BOOLEAN
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind BYTE
	Name: BYTE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#BYTE
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind SHORT
	Name: SHORT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#SHORT
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind INT
	Name: INT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#INT
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind LONG
	Name: LONG
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#LONG
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind CHAR
	Name: CHAR
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#CHAR
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind FLOAT
	Name: FLOAT
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#FLOAT
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind DOUBLE
	Name: DOUBLE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#DOUBLE
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind VOID
	Name: VOID
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#VOID
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind NONE
	Name: NONE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#NONE
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind NULL
	Name: NULL
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#NULL
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind ARRAY
	Name: ARRAY
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#ARRAY
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind DECLARED
	Name: DECLARED
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#DECLARED
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind ERROR
	Name: ERROR
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#ERROR
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind TYPEVAR
	Name: TYPEVAR
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#TYPEVAR
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind WILDCARD
	Name: WILDCARD
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#WILDCARD
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind PACKAGE
	Name: PACKAGE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#PACKAGE
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind EXECUTABLE
	Name: EXECUTABLE
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#EXECUTABLE
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind OTHER
	Name: OTHER
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#OTHER
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind UNION
	Name: UNION
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#UNION
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static final TypeKind INTERSECTION
	Name: INTERSECTION
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#INTERSECTION
	Containing package: javax.lang.model.type
	attributes {
		final=true
		scope=public
		static=true
		memberType=enumConst
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public static TypeKind[] values()
	Name: values
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#values--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::[] {
			javax.lang.model.type::TypeKind
		}
	}

	[Function]
	public static TypeKind valueOf(String name)
	Name: valueOf
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#valueOf-java.lang.String-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.lang::String
	
		[result]
		javax.lang.model.type::TypeKind
	}

	[Function]
	public boolean isPrimitive()
	Name: isPrimitive
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/TypeKind.html#isPrimitive--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: TypeKind
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}
}

[Classifier]
public class MirroredTypeException
extends MirroredTypesException
Name: MirroredTypeException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypeException.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model.type::MirroredTypesException
}
members {

	[Function]
	public MirroredTypeException(TypeMirror type)
	Name: MirroredTypeException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypeException.html#MirroredTypeException-javax.lang.model.type.TypeMirror-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: MirroredTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeMirror
	
		[result]
		javax.lang.model.type::MirroredTypeException
	}

	[Function]
	public TypeMirror getTypeMirror()
	Name: getTypeMirror
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypeException.html#getTypeMirror--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: MirroredTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}
}

[Classifier]
public class MirroredTypesException
extends RuntimeException
Name: MirroredTypesException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypesException.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
	javax.lang.model.type::MirroredTypeException
}
supertypes {
	java.lang::RuntimeException
}
members {

	[Function]
	public MirroredTypesException(List<? extends TypeMirror> types)
	Name: MirroredTypesException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypesException.html#MirroredTypesException-java.util.List-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: MirroredTypesException
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	
		[result]
		javax.lang.model.type::MirroredTypesException
	}

	[Function]
	public List<? extends TypeMirror> getTypeMirrors()
	Name: getTypeMirrors
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/MirroredTypesException.html#getTypeMirrors--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: MirroredTypesException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util::List {
			? {
				extends javax.lang.model.type::TypeMirror
			}
		}
	}
}

[Classifier]
public class UnknownTypeException
extends UnknownEntityException
Name: UnknownTypeException
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnknownTypeException.html
Containing package: javax.lang.model.type
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	javax.lang.model::UnknownEntityException
}
members {

	[Function]
	public UnknownTypeException(TypeMirror t,
	                            Object p)
	Name: UnknownTypeException
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnknownTypeException.html#UnknownTypeException-javax.lang.model.type.TypeMirror-java.lang.Object-
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: UnknownTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
		javax.lang.model.type::TypeMirror
		java.lang::Object
	
		[result]
		javax.lang.model.type::UnknownTypeException
	}

	[Function]
	public TypeMirror getUnknownType()
	Name: getUnknownType
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnknownTypeException.html#getUnknownType--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: UnknownTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		javax.lang.model.type::TypeMirror
	}

	[Function]
	public Object getArgument()
	Name: getArgument
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/javax/lang/model/type/UnknownTypeException.html#getArgument--
	Containing package: javax.lang.model.type
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: UnknownTypeException
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Object
	}
}