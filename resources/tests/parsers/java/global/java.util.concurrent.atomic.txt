[Package]
Name: java.util.concurrent.atomic
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html
Containing package: java.util.concurrent
attributes {
}

Subpackages {
}

[Classifier]
public class AtomicBoolean
extends Object
implements Serializable
Name: AtomicBoolean
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public AtomicBoolean(boolean initialValue)
	Name: AtomicBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#AtomicBoolean-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		java.util.concurrent.atomic::AtomicBoolean
	}

	[Function]
	public AtomicBoolean()
	Name: AtomicBoolean
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#AtomicBoolean--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicBoolean
	}

	[Function]
	public final boolean get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean compareAndSet(boolean expect,
	                                   boolean update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#compareAndSet-boolean-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public boolean weakCompareAndSet(boolean expect,
	                                 boolean update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#weakCompareAndSet-boolean-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public final void set(boolean newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#set-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(boolean newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#lazySet-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public final boolean getAndSet(boolean newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#getAndSet-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicBoolean
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public class AtomicInteger
extends Number
implements Serializable
Name: AtomicInteger
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public AtomicInteger(int initialValue)
	Name: AtomicInteger
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#AtomicInteger-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent.atomic::AtomicInteger
	}

	[Function]
	public AtomicInteger()
	Name: AtomicInteger
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#AtomicInteger--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicInteger
	}

	[Function]
	public final int get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final void set(int newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#set-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(int newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#lazySet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final int getAndSet(int newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndSet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final boolean compareAndSet(int expect,
	                                   int update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#compareAndSet-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(int expect,
	                                       int update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#weakCompareAndSet-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public final int getAndIncrement()
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndIncrement--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final int getAndDecrement()
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndDecrement--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final int getAndAdd(int delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndAdd-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int incrementAndGet()
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#incrementAndGet--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final int decrementAndGet()
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#decrementAndGet--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final int addAndGet(int delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#addAndGet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int getAndUpdate(IntUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndUpdate-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int updateAndGet(IntUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#updateAndGet-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int getAndAccumulate(int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndAccumulate-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int accumulateAndGet(int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#accumulateAndGet-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicInteger
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}
}

[Classifier]
public class AtomicIntegerArray
extends Object
implements Serializable
Name: AtomicIntegerArray
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public AtomicIntegerArray(int length)
	Name: AtomicIntegerArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#AtomicIntegerArray-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent.atomic::AtomicIntegerArray
	}

	[Function]
	public AtomicIntegerArray(int[] array)
	Name: AtomicIntegerArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#AtomicIntegerArray-int:A-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			other::int
		}
	
		[result]
		java.util.concurrent.atomic::AtomicIntegerArray
	}

	[Function]
	public final int length()
	Name: length
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#length--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final int get(int i)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#get-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final void set(int i,
	                      int newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#set-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(int i,
	                          int newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#lazySet-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::void
	}

	[Function]
	public final int getAndSet(int i,
	                           int newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndSet-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final boolean compareAndSet(int i,
	                                   int expect,
	                                   int update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#compareAndSet-int-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(int i,
	                                       int expect,
	                                       int update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#weakCompareAndSet-int-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public final int getAndIncrement(int i)
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndIncrement-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int getAndDecrement(int i)
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndDecrement-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int getAndAdd(int i,
	                           int delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndAdd-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int incrementAndGet(int i)
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#incrementAndGet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int decrementAndGet(int i)
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#decrementAndGet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int addAndGet(int i,
	                           int delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#addAndGet-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int getAndUpdate(int i,
	                              IntUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndUpdate-int-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int updateAndGet(int i,
	                              IntUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#updateAndGet-int-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int getAndAccumulate(int i,
	                                  int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#getAndAccumulate-int-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int accumulateAndGet(int i,
	                                  int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#accumulateAndGet-int-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerArray.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public abstract class AtomicIntegerFieldUpdater<T>
extends Object
Name: AtomicIntegerFieldUpdater
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	protected AtomicIntegerFieldUpdater()
	Name: AtomicIntegerFieldUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#AtomicIntegerFieldUpdater--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicIntegerFieldUpdater
	}

	[Function]
	public static <U> AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,
	                                                          String fieldName)
	Name: newUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#newUpdater-java.lang.Class-java.lang.String-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::U
		}
		java.lang::String
	
		[result]
		java.util.concurrent.atomic::AtomicIntegerFieldUpdater {
			null::U
		}
	}

	[Function]
	public abstract boolean compareAndSet(T obj,
	                                      int expect,
	                                      int update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#compareAndSet-T-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public abstract boolean weakCompareAndSet(T obj,
	                                          int expect,
	                                          int update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#weakCompareAndSet-T-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public abstract void set(T obj,
	                         int newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#set-T-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
	
		[result]
		other::void
	}

	[Function]
	public abstract void lazySet(T obj,
	                             int newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#lazySet-T-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
	
		[result]
		other::void
	}

	[Function]
	public abstract int get(T obj)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#get-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::int
	}

	[Function]
	public int getAndSet(T obj,
	                     int newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndSet-T-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int getAndIncrement(T obj)
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndIncrement-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::int
	}

	[Function]
	public int getAndDecrement(T obj)
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndDecrement-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::int
	}

	[Function]
	public int getAndAdd(T obj,
	                     int delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndAdd-T-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
	
		[result]
		other::int
	}

	[Function]
	public int incrementAndGet(T obj)
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#incrementAndGet-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::int
	}

	[Function]
	public int decrementAndGet(T obj)
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#decrementAndGet-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::int
	}

	[Function]
	public int addAndGet(T obj,
	                     int delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#addAndGet-T-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
	
		[result]
		other::int
	}

	[Function]
	public final int getAndUpdate(T obj,
	                              IntUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndUpdate-T-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int updateAndGet(T obj,
	                              IntUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#updateAndGet-T-java.util.function.IntUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::IntUnaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int getAndAccumulate(T obj,
	                                  int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#getAndAccumulate-T-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}

	[Function]
	public final int accumulateAndGet(T obj,
	                                  int x,
	                                  IntBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.html#accumulateAndGet-T-int-java.util.function.IntBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicIntegerFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::int
		java.util.function::IntBinaryOperator
	
		[result]
		other::int
	}
}

[Classifier]
public class AtomicLong
extends Number
implements Serializable
Name: AtomicLong
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public AtomicLong(long initialValue)
	Name: AtomicLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#AtomicLong-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		java.util.concurrent.atomic::AtomicLong
	}

	[Function]
	public AtomicLong()
	Name: AtomicLong
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#AtomicLong--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicLong
	}

	[Function]
	public final long get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public final void set(long newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#set-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(long newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#lazySet-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}

	[Function]
	public final long getAndSet(long newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndSet-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final boolean compareAndSet(long expect,
	                                   long update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#compareAndSet-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(long expect,
	                                       long update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#weakCompareAndSet-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public final long getAndIncrement()
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndIncrement--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public final long getAndDecrement()
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndDecrement--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public final long getAndAdd(long delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndAdd-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final long incrementAndGet()
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#incrementAndGet--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public final long decrementAndGet()
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#decrementAndGet--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public final long addAndGet(long delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#addAndGet-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final long getAndUpdate(LongUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndUpdate-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long updateAndGet(LongUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#updateAndGet-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long getAndAccumulate(long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#getAndAccumulate-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long accumulateAndGet(long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#accumulateAndGet-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLong.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLong
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}
}

[Classifier]
public class AtomicLongArray
extends Object
implements Serializable
Name: AtomicLongArray
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public AtomicLongArray(int length)
	Name: AtomicLongArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#AtomicLongArray-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent.atomic::AtomicLongArray
	}

	[Function]
	public AtomicLongArray(long[] array)
	Name: AtomicLongArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#AtomicLongArray-long:A-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			other::long
		}
	
		[result]
		java.util.concurrent.atomic::AtomicLongArray
	}

	[Function]
	public final int length()
	Name: length
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#length--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final long get(int i)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#get-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::long
	}

	[Function]
	public final void set(int i,
	                      long newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#set-int-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(int i,
	                          long newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#lazySet-int-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
	
		[result]
		other::void
	}

	[Function]
	public final long getAndSet(int i,
	                            long newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndSet-int-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final boolean compareAndSet(int i,
	                                   long expect,
	                                   long update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#compareAndSet-int-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(int i,
	                                       long expect,
	                                       long update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#weakCompareAndSet-int-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public final long getAndIncrement(int i)
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndIncrement-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::long
	}

	[Function]
	public final long getAndDecrement(int i)
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndDecrement-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::long
	}

	[Function]
	public final long getAndAdd(int i,
	                            long delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndAdd-int-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final long incrementAndGet(int i)
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#incrementAndGet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::long
	}

	[Function]
	public final long decrementAndGet(int i)
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#decrementAndGet-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		other::long
	}

	[Function]
	public long addAndGet(int i,
	                      long delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#addAndGet-int-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final long getAndUpdate(int i,
	                               LongUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndUpdate-int-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long updateAndGet(int i,
	                               LongUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#updateAndGet-int-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long getAndAccumulate(int i,
	                                   long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#getAndAccumulate-int-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long accumulateAndGet(int i,
	                                   long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#accumulateAndGet-int-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongArray.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public abstract class AtomicLongFieldUpdater<T>
extends Object
Name: AtomicLongFieldUpdater
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	protected AtomicLongFieldUpdater()
	Name: AtomicLongFieldUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#AtomicLongFieldUpdater--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicLongFieldUpdater
	}

	[Function]
	public static <U> AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,
	                                                       String fieldName)
	Name: newUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#newUpdater-java.lang.Class-java.lang.String-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::U
		}
		java.lang::String
	
		[result]
		java.util.concurrent.atomic::AtomicLongFieldUpdater {
			null::U
		}
	}

	[Function]
	public abstract boolean compareAndSet(T obj,
	                                      long expect,
	                                      long update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#compareAndSet-T-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public abstract boolean weakCompareAndSet(T obj,
	                                          long expect,
	                                          long update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#weakCompareAndSet-T-long-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
		other::long
	
		[result]
		other::boolean
	}

	[Function]
	public abstract void set(T obj,
	                         long newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#set-T-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
	
		[result]
		other::void
	}

	[Function]
	public abstract void lazySet(T obj,
	                             long newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#lazySet-T-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
	
		[result]
		other::void
	}

	[Function]
	public abstract long get(T obj)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#get-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::long
	}

	[Function]
	public long getAndSet(T obj,
	                      long newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndSet-T-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long getAndIncrement(T obj)
	Name: getAndIncrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndIncrement-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::long
	}

	[Function]
	public long getAndDecrement(T obj)
	Name: getAndDecrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndDecrement-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::long
	}

	[Function]
	public long getAndAdd(T obj,
	                      long delta)
	Name: getAndAdd
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndAdd-T-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
	
		[result]
		other::long
	}

	[Function]
	public long incrementAndGet(T obj)
	Name: incrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#incrementAndGet-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::long
	}

	[Function]
	public long decrementAndGet(T obj)
	Name: decrementAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#decrementAndGet-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		other::long
	}

	[Function]
	public long addAndGet(T obj,
	                      long delta)
	Name: addAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#addAndGet-T-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
	
		[result]
		other::long
	}

	[Function]
	public final long getAndUpdate(T obj,
	                               LongUnaryOperator updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndUpdate-T-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long updateAndGet(T obj,
	                               LongUnaryOperator updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#updateAndGet-T-java.util.function.LongUnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::LongUnaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long getAndAccumulate(T obj,
	                                   long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#getAndAccumulate-T-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}

	[Function]
	public final long accumulateAndGet(T obj,
	                                   long x,
	                                   LongBinaryOperator accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicLongFieldUpdater.html#accumulateAndGet-T-long-java.util.function.LongBinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicLongFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		other::long
		java.util.function::LongBinaryOperator
	
		[result]
		other::long
	}
}

[Classifier]
public class AtomicMarkableReference<V>
extends Object
Name: AtomicMarkableReference
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public AtomicMarkableReference(V initialRef,
	                               boolean initialMark)
	Name: AtomicMarkableReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#AtomicMarkableReference-V-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::boolean
	
		[result]
		java.util.concurrent.atomic::AtomicMarkableReference
	}

	[Function]
	public V getReference()
	Name: getReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#getReference--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public boolean isMarked()
	Name: isMarked
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#isMarked--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::boolean
	}

	[Function]
	public V get(boolean[] markHolder)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#get-boolean:A-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			other::boolean
		}
	
		[result]
		null::V
	}

	[Function]
	public boolean weakCompareAndSet(V expectedReference,
	                                 V newReference,
	                                 boolean expectedMark,
	                                 boolean newMark)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#weakCompareAndSet-V-V-boolean-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
		other::boolean
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public boolean compareAndSet(V expectedReference,
	                             V newReference,
	                             boolean expectedMark,
	                             boolean newMark)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#compareAndSet-V-V-boolean-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
		other::boolean
		other::boolean
	
		[result]
		other::boolean
	}

	[Function]
	public void set(V newReference,
	                boolean newMark)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#set-V-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::boolean
	
		[result]
		other::void
	}

	[Function]
	public boolean attemptMark(V expectedReference,
	                           boolean newMark)
	Name: attemptMark
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicMarkableReference.html#attemptMark-V-boolean-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicMarkableReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::boolean
	
		[result]
		other::boolean
	}
}

[Classifier]
public class AtomicReference<V>
extends Object
implements Serializable
Name: AtomicReference
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public AtomicReference(V initialValue)
	Name: AtomicReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#AtomicReference-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		java.util.concurrent.atomic::AtomicReference
	}

	[Function]
	public AtomicReference()
	Name: AtomicReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#AtomicReference--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicReference
	}

	[Function]
	public final V get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public final void set(V newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#set-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(V newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#lazySet-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		other::void
	}

	[Function]
	public final boolean compareAndSet(V expect,
	                                   V update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#compareAndSet-V-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(V expect,
	                                       V update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#weakCompareAndSet-V-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public final V getAndSet(V newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#getAndSet-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
	
		[result]
		null::V
	}

	[Function]
	public final V getAndUpdate(UnaryOperator<V> updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#getAndUpdate-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::UnaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V updateAndGet(UnaryOperator<V> updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#updateAndGet-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::UnaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V getAndAccumulate(V x,
	                                BinaryOperator<V> accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#getAndAccumulate-V-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		java.util.function::BinaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V accumulateAndGet(V x,
	                                BinaryOperator<V> accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#accumulateAndGet-V-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		java.util.function::BinaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReference.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public class AtomicReferenceArray<E>
extends Object
implements Serializable
Name: AtomicReferenceArray
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	E
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Object
}
members {

	[Function]
	public AtomicReferenceArray(int length)
	Name: AtomicReferenceArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#AtomicReferenceArray-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		java.util.concurrent.atomic::AtomicReferenceArray
	}

	[Function]
	public AtomicReferenceArray(E[] array)
	Name: AtomicReferenceArray
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#AtomicReferenceArray-E:A-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			null::E
		}
	
		[result]
		java.util.concurrent.atomic::AtomicReferenceArray
	}

	[Function]
	public final int length()
	Name: length
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#length--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public final E get(int i)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#get-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
	
		[result]
		null::E
	}

	[Function]
	public final void set(int i,
	                      E newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#set-int-E-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
	
		[result]
		other::void
	}

	[Function]
	public final void lazySet(int i,
	                          E newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#lazySet-int-E-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
	
		[result]
		other::void
	}

	[Function]
	public final E getAndSet(int i,
	                         E newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#getAndSet-int-E-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
	
		[result]
		null::E
	}

	[Function]
	public final boolean compareAndSet(int i,
	                                   E expect,
	                                   E update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#compareAndSet-int-E-E-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public final boolean weakCompareAndSet(int i,
	                                       E expect,
	                                       E update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#weakCompareAndSet-int-E-E-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
		null::E
	
		[result]
		other::boolean
	}

	[Function]
	public final E getAndUpdate(int i,
	                            UnaryOperator<E> updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#getAndUpdate-int-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::UnaryOperator {
			null::E
		}
	
		[result]
		null::E
	}

	[Function]
	public final E updateAndGet(int i,
	                            UnaryOperator<E> updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#updateAndGet-int-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		java.util.function::UnaryOperator {
			null::E
		}
	
		[result]
		null::E
	}

	[Function]
	public final E getAndAccumulate(int i,
	                                E x,
	                                BinaryOperator<E> accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#getAndAccumulate-int-E-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
		java.util.function::BinaryOperator {
			null::E
		}
	
		[result]
		null::E
	}

	[Function]
	public final E accumulateAndGet(int i,
	                                E x,
	                                BinaryOperator<E> accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#accumulateAndGet-int-E-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::int
		null::E
		java.util.function::BinaryOperator {
			null::E
		}
	
		[result]
		null::E
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceArray.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceArray
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}
}

[Classifier]
public abstract class AtomicReferenceFieldUpdater<T,V>
extends Object
Name: AtomicReferenceFieldUpdater
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=true
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	T
	V
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	protected AtomicReferenceFieldUpdater()
	Name: AtomicReferenceFieldUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#AtomicReferenceFieldUpdater--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=protected
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::AtomicReferenceFieldUpdater
	}

	[Function]
	public static <U,W> AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,
	                                                                Class<W> vclass,
	                                                                String fieldName)
	Name: newUpdater
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#newUpdater-java.lang.Class-java.lang.Class-java.lang.String-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=true
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
		U
		W
	}
	Signature = <function> {
		[parameters]
		java.lang::Class {
			null::U
		}
		java.lang::Class {
			null::W
		}
		java.lang::String
	
		[result]
		java.util.concurrent.atomic::AtomicReferenceFieldUpdater {
			null::U
			null::W
		}
	}

	[Function]
	public abstract boolean compareAndSet(T obj,
	                                      V expect,
	                                      V update)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#compareAndSet-T-V-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public abstract boolean weakCompareAndSet(T obj,
	                                          V expect,
	                                          V update)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#weakCompareAndSet-T-V-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
		null::V
	
		[result]
		other::boolean
	}

	[Function]
	public abstract void set(T obj,
	                         V newValue)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#set-T-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
	
		[result]
		other::void
	}

	[Function]
	public abstract void lazySet(T obj,
	                             V newValue)
	Name: lazySet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#lazySet-T-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
	
		[result]
		other::void
	}

	[Function]
	public abstract V get(T obj)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#get-T-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=true
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		null::V
	}

	[Function]
	public V getAndSet(T obj,
	                   V newValue)
	Name: getAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#getAndSet-T-V-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
	
		[result]
		null::V
	}

	[Function]
	public final V getAndUpdate(T obj,
	                            UnaryOperator<V> updateFunction)
	Name: getAndUpdate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#getAndUpdate-T-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::UnaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V updateAndGet(T obj,
	                            UnaryOperator<V> updateFunction)
	Name: updateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#updateAndGet-T-java.util.function.UnaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		java.util.function::UnaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V getAndAccumulate(T obj,
	                                V x,
	                                BinaryOperator<V> accumulatorFunction)
	Name: getAndAccumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#getAndAccumulate-T-V-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
		java.util.function::BinaryOperator {
			null::V
		}
	
		[result]
		null::V
	}

	[Function]
	public final V accumulateAndGet(T obj,
	                                V x,
	                                BinaryOperator<V> accumulatorFunction)
	Name: accumulateAndGet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.html#accumulateAndGet-T-V-java.util.function.BinaryOperator-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=true
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicReferenceFieldUpdater
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::V
		java.util.function::BinaryOperator {
			null::V
		}
	
		[result]
		null::V
	}
}

[Classifier]
public class AtomicStampedReference<V>
extends Object
Name: AtomicStampedReference
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
	V
}
derived {
}
supertypes {
	java.lang::Object
}
members {

	[Function]
	public AtomicStampedReference(V initialRef,
	                              int initialStamp)
	Name: AtomicStampedReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#AtomicStampedReference-V-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::int
	
		[result]
		java.util.concurrent.atomic::AtomicStampedReference
	}

	[Function]
	public V getReference()
	Name: getReference
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#getReference--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::V
	}

	[Function]
	public int getStamp()
	Name: getStamp
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#getStamp--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public V get(int[] stampHolder)
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#get-int:A-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::[] {
			other::int
		}
	
		[result]
		null::V
	}

	[Function]
	public boolean weakCompareAndSet(V expectedReference,
	                                 V newReference,
	                                 int expectedStamp,
	                                 int newStamp)
	Name: weakCompareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#weakCompareAndSet-V-V-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public boolean compareAndSet(V expectedReference,
	                             V newReference,
	                             int expectedStamp,
	                             int newStamp)
	Name: compareAndSet
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#compareAndSet-V-V-int-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		null::V
		other::int
		other::int
	
		[result]
		other::boolean
	}

	[Function]
	public void set(V newReference,
	                int newStamp)
	Name: set
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#set-V-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::int
	
		[result]
		other::void
	}

	[Function]
	public boolean attemptStamp(V expectedReference,
	                            int newStamp)
	Name: attemptStamp
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicStampedReference.html#attemptStamp-V-int-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: AtomicStampedReference
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::V
		other::int
	
		[result]
		other::boolean
	}
}

[Classifier]
public class DoubleAccumulator
extends Number
implements Serializable
Name: DoubleAccumulator
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,
	                         double identity)
	Name: DoubleAccumulator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#DoubleAccumulator-java.util.function.DoubleBinaryOperator-double-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::DoubleBinaryOperator
		other::double
	
		[result]
		java.util.concurrent.atomic::DoubleAccumulator
	}

	[Function]
	public void accumulate(double x)
	Name: accumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#accumulate-double-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::double
	
		[result]
		other::void
	}

	[Function]
	public double get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public void reset()
	Name: reset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#reset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public double getThenReset()
	Name: getThenReset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#getThenReset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAccumulator.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}
}

[Classifier]
public class DoubleAdder
extends Number
implements Serializable
Name: DoubleAdder
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public DoubleAdder()
	Name: DoubleAdder
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#DoubleAdder--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::DoubleAdder
	}

	[Function]
	public void add(double x)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#add-double-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::double
	
		[result]
		other::void
	}

	[Function]
	public double sum()
	Name: sum
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#sum--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public void reset()
	Name: reset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#reset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public double sumThenReset()
	Name: sumThenReset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#sumThenReset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/DoubleAdder.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: DoubleAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}
}

[Classifier]
public class LongAccumulator
extends Number
implements Serializable
Name: LongAccumulator
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public LongAccumulator(LongBinaryOperator accumulatorFunction,
	                       long identity)
	Name: LongAccumulator
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#LongAccumulator-java.util.function.LongBinaryOperator-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
		java.util.function::LongBinaryOperator
		other::long
	
		[result]
		java.util.concurrent.atomic::LongAccumulator
	}

	[Function]
	public void accumulate(long x)
	Name: accumulate
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#accumulate-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}

	[Function]
	public long get()
	Name: get
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#get--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public void reset()
	Name: reset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#reset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public long getThenReset()
	Name: getThenReset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#getThenReset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAccumulator.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAccumulator
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}
}

[Classifier]
public class LongAdder
extends Number
implements Serializable
Name: LongAdder
Language: JAVA
Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html
Containing package: java.util.concurrent.atomic
attributes {
	abstract=false
	final=false
	classifierType=class
	static=false
	scope=public
}
parameters {
}
derived {
}
supertypes {
	java.io::Serializable
	java.lang::Number
}
members {

	[Function]
	public LongAdder()
	Name: LongAdder
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#LongAdder--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=true
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.util.concurrent.atomic::LongAdder
	}

	[Function]
	public void add(long x)
	Name: add
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#add-long-
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
		other::long
	
		[result]
		other::void
	}

	[Function]
	public void increment()
	Name: increment
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#increment--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public void decrement()
	Name: decrement
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#decrement--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public long sum()
	Name: sum
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#sum--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public void reset()
	Name: reset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#reset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::void
	}

	[Function]
	public long sumThenReset()
	Name: sumThenReset
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#sumThenReset--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public String toString()
	Name: toString
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#toString--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	public long longValue()
	Name: longValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#longValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::long
	}

	[Function]
	public int intValue()
	Name: intValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#intValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::int
	}

	[Function]
	public float floatValue()
	Name: floatValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#floatValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::float
	}

	[Function]
	public double doubleValue()
	Name: doubleValue
	Language: JAVA
	Doc: http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/LongAdder.html#doubleValue--
	Containing package: java.util.concurrent.atomic
	attributes {
		abstract=false
		final=false
		scope=public
		default=false
		static=false
		memberType=method
		constructor=false
	}
	Containing type: LongAdder
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		other::double
	}
}