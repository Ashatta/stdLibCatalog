[Classifier]
abstract class GenMapFactory[CC[A, B] <: GenMap[A, B] with GenMapLike[A, B, CC[A, B]]] extends AnyRef
Name: GenMapFactory
Language: SCALA
Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory
Containing package: scala.collection.generic
attributes {
	abstract=true
	final=false
	classifierType=class
	implicit=false
	sealed=false
}
parameters {
	CC: (CC[A, B] <: GenMap[A, B] with GenMapLike[A, B, CC[A, B]]; CC; scala.collection::GenMap, scala.collection::GenMapLike)
}
derived {
	scala.collection.generic::MapFactory
	scala.collection::GenMap
	scala.collection.generic::ParMapFactory
}
supertypes {
	scala::AnyRef
}
members {

	[Function]
	abstract def empty[A, B]: CC[A, B]
	Name: empty
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@empty[A,B]:CC[A,B]
	Containing package: scala.collection.generic
	attributes {
		abstract=true
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		A
		B
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::CC {
			null::A
			null::B
		}
	}

	[Function]
	final def !=(arg0: Any): Boolean
	Name: !=
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@!=(x$1:Any):Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ##(): Int
	Name: ##
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@##():Int
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	def +(other: String): String
	Name: +
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@+(other:String):String
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	def ->[B](y: B): (GenMapFactory[CC], B)
	Name: ->
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@->[B](y:B):(A,B)
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala.collection.generic::GenMapFactory {
				null::CC
			}
			null::B
		}
	}

	[Function]
	final def ==(arg0: Any): Boolean
	Name: ==
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@==(x$1:Any):Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def apply[A, B](elems: (A, B)*): CC[A, B]
	Name: apply
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@apply[A,B](elems:(A,B)*):CC[A,B]
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		A
		B
	}
	Signature = <function> {
		[parameters]
		other::* {
			scala::Tuple2 {
				null::A
				null::B
			}
		}
	
		[result]
		null::CC {
			null::A
			null::B
		}
	}

	[Function]
	final def asInstanceOf[T0]: T0
	Name: asInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@asInstanceOf[T0]:T0
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T0
	}

	[Function]
	def clone(): AnyRef
	Name: clone
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@clone():Object
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::AnyRef
	}

	[Function]
	def ensuring(cond: (GenMapFactory[CC]) ⇒ Boolean, msg: ⇒ Any): GenMapFactory[CC]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@ensuring(cond:A=>Boolean,msg:=>Any):A
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala.collection.generic::GenMapFactory {
				null::CC
			}
		
			[result]
			scala::Boolean
		}
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala.collection.generic::GenMapFactory {
			null::CC
		}
	}

	[Function]
	def ensuring(cond: (GenMapFactory[CC]) ⇒ Boolean): GenMapFactory[CC]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@ensuring(cond:A=>Boolean):A
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala.collection.generic::GenMapFactory {
				null::CC
			}
		
			[result]
			scala::Boolean
		}
	
		[result]
		scala.collection.generic::GenMapFactory {
			null::CC
		}
	}

	[Function]
	def ensuring(cond: Boolean, msg: ⇒ Any): GenMapFactory[CC]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@ensuring(cond:Boolean,msg:=>Any):A
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala.collection.generic::GenMapFactory {
			null::CC
		}
	}

	[Function]
	def ensuring(cond: Boolean): GenMapFactory[CC]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@ensuring(cond:Boolean):A
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
	
		[result]
		scala.collection.generic::GenMapFactory {
			null::CC
		}
	}

	[Function]
	final def eq(arg0: AnyRef): Boolean
	Name: eq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@eq(x$1:AnyRef):Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	def equals(arg0: Any): Boolean
	Name: equals
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@equals(x$1:Any):Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def finalize(): Unit
	Name: finalize
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@finalize():Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def formatted(fmtstr: String): String
	Name: formatted
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@formatted(fmtstr:String):String
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	final def getClass(): Class[_]
	Name: getClass
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@getClass():Class[_]
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	def hashCode(): Int
	Name: hashCode
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@hashCode():Int
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	final def isInstanceOf[T0]: Boolean
	Name: isInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@isInstanceOf[T0]:Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ne(arg0: AnyRef): Boolean
	Name: ne
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@ne(x$1:AnyRef):Boolean
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	def newBuilder[A, B]: Builder[(A, B), CC[A, B]]
	Name: newBuilder
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@newBuilder[A,B]:scala.collection.mutable.Builder[(A,B),CC[A,B]]
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		A
		B
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.collection.mutable::Builder {
			scala::Tuple2 {
				null::A
				null::B
			}
			null::CC {
				null::A
				null::B
			}
		}
	}

	[Function]
	final def notify(): Unit
	Name: notify
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@notify():Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def notifyAll(): Unit
	Name: notifyAll
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@notifyAll():Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def synchronized[T0](arg0: ⇒ T0): T0
	Name: synchronized
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@synchronized[T0](x$1:=>T0):T0
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
		
			[result]
			null::T0
		}
	
		[result]
		null::T0
	}

	[Function]
	def toString(): String
	Name: toString
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@toString():String
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	final def wait(): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@wait():Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long, arg1: Int): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@wait(x$1:Long,x$2:Int):Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
		scala::Int
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@wait(x$1:Long):Unit
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
	
		[result]
		scala::Unit
	}

	[Function]
	def →[B](y: B): (GenMapFactory[CC], B)
	Name: →
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@→[B](y:B):(A,B)
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala.collection.generic::GenMapFactory {
				null::CC
			}
			null::B
		}
	}

	[Function]
	new GenMapFactory()
	Name: GenMapFactory
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.collection.generic.GenMapFactory@<init>():scala.collection.generic.GenMapFactory[CC]
	Containing package: scala.collection.generic
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=constructor
		lazy=false
	}
	Containing type: GenMapFactory
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.collection.generic::GenMapFactory
	}
}