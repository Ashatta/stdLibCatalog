[Classifier]
trait PartialFunction[-A, +B] extends (A) ⇒ B
Name: PartialFunction
Language: SCALA
Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction
Containing package: scala
attributes {
	abstract=false
	final=false
	classifierType=trait
	implicit=false
	sealed=false
}
parameters {
	A
	B
}
derived {
	scala.collection::MapLike
	scala.runtime::AbstractPartialFunction
	scala.collection::Seq
}
supertypes {
	<function> {
		[parameters]
		null::A
	
		[result]
		null::B
	}
}
members {

	[Function]
	abstract def apply(v1: A): B
	Name: apply
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@apply(v1:T1):R
	Containing package: scala
	attributes {
		abstract=true
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::A
	
		[result]
		null::B
	}

	[Function]
	abstract def isDefinedAt(x: A): Boolean
	Name: isDefinedAt
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@isDefinedAt(x:A):Boolean
	Containing package: scala
	attributes {
		abstract=true
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::A
	
		[result]
		scala::Boolean
	}

	[Function]
	final def !=(arg0: Any): Boolean
	Name: !=
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@!=(x$1:Any):Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ##(): Int
	Name: ##
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@##():Int
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	def +(other: String): String
	Name: +
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@+(other:String):String
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	def ->[B](y: B): (PartialFunction[A, B], B)
	Name: ->
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@->[B](y:B):(A,B)
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala::PartialFunction {
				null::A
				null::B
			}
			null::B
		}
	}

	[Function]
	final def ==(arg0: Any): Boolean
	Name: ==
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@==(x$1:Any):Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def andThen[C](k: (B) ⇒ C): PartialFunction[A, C]
	Name: andThen
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@andThen[C](k:B=>C):PartialFunction[A,C]
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		C
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::B
		
			[result]
			null::C
		}
	
		[result]
		scala::PartialFunction {
			null::A
			null::C
		}
	}

	[Function]
	def applyOrElse[A1 <: A, B1 >: B](x: A1, default: (A1) ⇒ B1): B1
	Name: applyOrElse
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@applyOrElse[A1<:A,B1>:B](x:A1,default:A1=>B1):B1
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		A1: (A1 <: A; A1, A; )
		B1: (B1 >: B; B1, B; )
	}
	Signature = <function> {
		[parameters]
		null::A1
		<function> {
			[parameters]
			null::A1
		
			[result]
			null::B1
		}
	
		[result]
		null::B1
	}

	[Function]
	final def asInstanceOf[T0]: T0
	Name: asInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@asInstanceOf[T0]:T0
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T0
	}

	[Function]
	def clone(): AnyRef
	Name: clone
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@clone():Object
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::AnyRef
	}

	[Function]
	def compose[A](g: (A) ⇒ A): (A) ⇒ B
	Name: compose
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@compose[A](g:A=>T1):A=>R
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		A
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::A
		
			[result]
			null::A
		}
	
		[result]
		<function> {
			[parameters]
			null::A
		
			[result]
			null::B
		}
	}

	[Function]
	def ensuring(cond: (PartialFunction[A, B]) ⇒ Boolean, msg: ⇒ Any): PartialFunction[A, B]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@ensuring(cond:A=>Boolean,msg:=>Any):A
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala::PartialFunction {
				null::A
				null::B
			}
		
			[result]
			scala::Boolean
		}
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala::PartialFunction {
			null::A
			null::B
		}
	}

	[Function]
	def ensuring(cond: (PartialFunction[A, B]) ⇒ Boolean): PartialFunction[A, B]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@ensuring(cond:A=>Boolean):A
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala::PartialFunction {
				null::A
				null::B
			}
		
			[result]
			scala::Boolean
		}
	
		[result]
		scala::PartialFunction {
			null::A
			null::B
		}
	}

	[Function]
	def ensuring(cond: Boolean, msg: ⇒ Any): PartialFunction[A, B]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@ensuring(cond:Boolean,msg:=>Any):A
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala::PartialFunction {
			null::A
			null::B
		}
	}

	[Function]
	def ensuring(cond: Boolean): PartialFunction[A, B]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@ensuring(cond:Boolean):A
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
	
		[result]
		scala::PartialFunction {
			null::A
			null::B
		}
	}

	[Function]
	final def eq(arg0: AnyRef): Boolean
	Name: eq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@eq(x$1:AnyRef):Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	def equals(arg0: Any): Boolean
	Name: equals
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@equals(x$1:Any):Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def finalize(): Unit
	Name: finalize
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@finalize():Unit
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def formatted(fmtstr: String): String
	Name: formatted
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@formatted(fmtstr:String):String
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	final def getClass(): Class[_]
	Name: getClass
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@getClass():Class[_]
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	def hashCode(): Int
	Name: hashCode
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@hashCode():Int
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	final def isInstanceOf[T0]: Boolean
	Name: isInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@isInstanceOf[T0]:Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Boolean
	}

	[Function]
	def lift: (A) ⇒ Option[B]
	Name: lift
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@lift:A=>Option[B]
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		<function> {
			[parameters]
			null::A
		
			[result]
			scala::Option {
				null::B
			}
		}
	}

	[Function]
	final def ne(arg0: AnyRef): Boolean
	Name: ne
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@ne(x$1:AnyRef):Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	final def notify(): Unit
	Name: notify
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@notify():Unit
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def notifyAll(): Unit
	Name: notifyAll
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@notifyAll():Unit
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def orElse[A1 <: A, B1 >: B](that: PartialFunction[A1, B1]): PartialFunction[A1, B1]
	Name: orElse
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@orElse[A1<:A,B1>:B](that:PartialFunction[A1,B1]):PartialFunction[A1,B1]
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		A1: (A1 <: A; A1, A; )
		B1: (B1 >: B; B1, B; )
	}
	Signature = <function> {
		[parameters]
		scala::PartialFunction {
			null::A1
			null::B1
		}
	
		[result]
		scala::PartialFunction {
			null::A1
			null::B1
		}
	}

	[Function]
	def runWith[U](action: (B) ⇒ U): (A) ⇒ Boolean
	Name: runWith
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@runWith[U](action:B=>U):A=>Boolean
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::B
		
			[result]
			null::U
		}
	
		[result]
		<function> {
			[parameters]
			null::A
		
			[result]
			scala::Boolean
		}
	}

	[Function]
	final def synchronized[T0](arg0: ⇒ T0): T0
	Name: synchronized
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@synchronized[T0](x$1:=>T0):T0
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
		
			[result]
			null::T0
		}
	
		[result]
		null::T0
	}

	[Function]
	def toString(): String
	Name: toString
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@toString():String
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	final def wait(): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@wait():Unit
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long, arg1: Int): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@wait(x$1:Long,x$2:Int):Unit
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
		scala::Int
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@wait(x$1:Long):Unit
	Containing package: scala
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
	
		[result]
		scala::Unit
	}

	[Function]
	def →[B](y: B): (PartialFunction[A, B], B)
	Name: →
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.PartialFunction@→[B](y:B):(A,B)
	Containing package: scala
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: PartialFunction
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala::PartialFunction {
				null::A
				null::B
			}
			null::B
		}
	}
}