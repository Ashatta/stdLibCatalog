[Classifier]
object Ordering extends LowPriorityOrderingImplicits with Serializable
Name: Ordering
Language: SCALA
Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$
Containing package: scala.math
attributes {
	abstract=false
	final=false
	classifierType=object
	implicit=false
	sealed=false
}
parameters {
}
derived {
}
supertypes {
	scala::Serializable
	scala.math::LowPriorityOrderingImplicits
}
members {

	[Function]
	final def !=(arg0: Any): Boolean
	Name: !=
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@!=(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ##(): Int
	Name: ##
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@##():Int
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	final def ==(arg0: Any): Boolean
	Name: ==
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@==(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	implicit def Iterable[T](implicit ord: Ordering[T]): Ordering[Iterable[T]]
	Name: Iterable
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Iterable[T](implicitord:scala.math.Ordering[T]):scala.math.Ordering[Iterable[T]]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			scala::Iterable {
				null::T
			}
		}
	}

	[Function]
	implicit def Option[T](implicit ord: Ordering[T]): Ordering[Option[T]]
	Name: Option
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Option[T](implicitord:scala.math.Ordering[T]):scala.math.Ordering[Option[T]]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			scala::Option {
				null::T
			}
		}
	}

	[Function]
	implicit def Tuple2[T1, T2](implicit ord1: Ordering[T1], ord2: Ordering[T2]): Ordering[(T1, T2)]
	Name: Tuple2
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple2[T1,T2](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2]):scala.math.Ordering[(T1,T2)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple2 {
				null::T1
				null::T2
			}
		}
	}

	[Function]
	implicit def Tuple3[T1, T2, T3](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3]): Ordering[(T1, T2, T3)]
	Name: Tuple3
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple3[T1,T2,T3](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3]):scala.math.Ordering[(T1,T2,T3)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple3 {
				null::T1
				null::T2
				null::T3
			}
		}
	}

	[Function]
	implicit def Tuple4[T1, T2, T3, T4](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4]): Ordering[(T1, T2, T3, T4)]
	Name: Tuple4
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple4[T1,T2,T3,T4](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4]):scala.math.Ordering[(T1,T2,T3,T4)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple4 {
				null::T1
				null::T2
				null::T3
				null::T4
			}
		}
	}

	[Function]
	implicit def Tuple5[T1, T2, T3, T4, T5](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5]): Ordering[(T1, T2, T3, T4, T5)]
	Name: Tuple5
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple5[T1,T2,T3,T4,T5](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4],implicitord5:scala.math.Ordering[T5]):scala.math.Ordering[(T1,T2,T3,T4,T5)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
		T5
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
		scala.math::Ordering {
			null::T5
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple5 {
				null::T1
				null::T2
				null::T3
				null::T4
				null::T5
			}
		}
	}

	[Function]
	implicit def Tuple6[T1, T2, T3, T4, T5, T6](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6]): Ordering[(T1, T2, T3, T4, T5, T6)]
	Name: Tuple6
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple6[T1,T2,T3,T4,T5,T6](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4],implicitord5:scala.math.Ordering[T5],implicitord6:scala.math.Ordering[T6]):scala.math.Ordering[(T1,T2,T3,T4,T5,T6)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
		T5
		T6
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
		scala.math::Ordering {
			null::T5
		}
		scala.math::Ordering {
			null::T6
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple6 {
				null::T1
				null::T2
				null::T3
				null::T4
				null::T5
				null::T6
			}
		}
	}

	[Function]
	implicit def Tuple7[T1, T2, T3, T4, T5, T6, T7](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7]): Ordering[(T1, T2, T3, T4, T5, T6, T7)]
	Name: Tuple7
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple7[T1,T2,T3,T4,T5,T6,T7](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4],implicitord5:scala.math.Ordering[T5],implicitord6:scala.math.Ordering[T6],implicitord7:scala.math.Ordering[T7]):scala.math.Ordering[(T1,T2,T3,T4,T5,T6,T7)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
		T5
		T6
		T7
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
		scala.math::Ordering {
			null::T5
		}
		scala.math::Ordering {
			null::T6
		}
		scala.math::Ordering {
			null::T7
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple7 {
				null::T1
				null::T2
				null::T3
				null::T4
				null::T5
				null::T6
				null::T7
			}
		}
	}

	[Function]
	implicit def Tuple8[T1, T2, T3, T4, T5, T6, T7, T8](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7], ord8: Ordering[T8]): Ordering[(T1, T2, T3, T4, T5, T6, T7, T8)]
	Name: Tuple8
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple8[T1,T2,T3,T4,T5,T6,T7,T8](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4],implicitord5:scala.math.Ordering[T5],implicitord6:scala.math.Ordering[T6],implicitord7:scala.math.Ordering[T7],implicitord8:scala.math.Ordering[T8]):scala.math.Ordering[(T1,T2,T3,T4,T5,T6,T7,T8)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
		T5
		T6
		T7
		T8
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
		scala.math::Ordering {
			null::T5
		}
		scala.math::Ordering {
			null::T6
		}
		scala.math::Ordering {
			null::T7
		}
		scala.math::Ordering {
			null::T8
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple8 {
				null::T1
				null::T2
				null::T3
				null::T4
				null::T5
				null::T6
				null::T7
				null::T8
			}
		}
	}

	[Function]
	implicit def Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9](implicit ord1: Ordering[T1], ord2: Ordering[T2], ord3: Ordering[T3], ord4: Ordering[T4], ord5: Ordering[T5], ord6: Ordering[T6], ord7: Ordering[T7], ord8: Ordering[T8], ord9: Ordering[T9]): Ordering[(T1, T2, T3, T4, T5, T6, T7, T8, T9)]
	Name: Tuple9
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@Tuple9[T1,T2,T3,T4,T5,T6,T7,T8,T9](implicitord1:scala.math.Ordering[T1],implicitord2:scala.math.Ordering[T2],implicitord3:scala.math.Ordering[T3],implicitord4:scala.math.Ordering[T4],implicitord5:scala.math.Ordering[T5],implicitord6:scala.math.Ordering[T6],implicitord7:scala.math.Ordering[T7],implicitord8:scala.math.Ordering[T8],implicitord9:scala.math.Ordering[T9]):scala.math.Ordering[(T1,T2,T3,T4,T5,T6,T7,T8,T9)]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T1
		T2
		T3
		T4
		T5
		T6
		T7
		T8
		T9
	}
	Signature = <function> {
		[parameters]
		scala.math::Ordering {
			null::T2
		}
		scala.math::Ordering {
			null::T3
		}
		scala.math::Ordering {
			null::T4
		}
		scala.math::Ordering {
			null::T5
		}
		scala.math::Ordering {
			null::T6
		}
		scala.math::Ordering {
			null::T7
		}
		scala.math::Ordering {
			null::T8
		}
		scala.math::Ordering {
			null::T9
		}
	
		[result]
		scala.math::Ordering {
			scala::Tuple9 {
				null::T1
				null::T2
				null::T3
				null::T4
				null::T5
				null::T6
				null::T7
				null::T8
				null::T9
			}
		}
	}

	[Function]
	def apply[T](implicit ord: Ordering[T]): Ordering[T]
	Name: apply
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@apply[T](implicitord:scala.math.Ordering[T]):scala.math.Ordering[T]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	final def asInstanceOf[T0]: T0
	Name: asInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@asInstanceOf[T0]:T0
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T0
	}

	[Function]
	def by[T, S](f: (T) ⇒ S)(implicit ord: Ordering[S]): Ordering[T]
	Name: by
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@by[T,S](f:T=>S)(implicitord:scala.math.Ordering[S]):scala.math.Ordering[T]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T
		S
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::T
		
			[result]
			null::S
		}
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	def clone(): AnyRef
	Name: clone
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@clone():Object
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::AnyRef
	}

	[Function]
	implicit def comparatorToOrdering[A](implicit cmp: Comparator[A]): Ordering[A]
	Name: comparatorToOrdering
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@comparatorToOrdering[A](implicitcmp:java.util.Comparator[A]):scala.math.Ordering[A]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		A
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			null::A
		}
	}

	[Function]
	final def eq(arg0: AnyRef): Boolean
	Name: eq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@eq(x$1:AnyRef):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	def equals(arg0: Any): Boolean
	Name: equals
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@equals(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def finalize(): Unit
	Name: finalize
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@finalize():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def fromLessThan[T](cmp: (T, T) ⇒ Boolean): Ordering[T]
	Name: fromLessThan
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@fromLessThan[T](cmp:(T,T)=>Boolean):scala.math.Ordering[T]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::T
			null::T
		
			[result]
			scala::Boolean
		}
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	final def getClass(): Class[_]
	Name: getClass
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@getClass():Class[_]
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	def hashCode(): Int
	Name: hashCode
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@hashCode():Int
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	final def isInstanceOf[T0]: Boolean
	Name: isInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@isInstanceOf[T0]:Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ne(arg0: AnyRef): Boolean
	Name: ne
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@ne(x$1:AnyRef):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	final def notify(): Unit
	Name: notify
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@notify():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def notifyAll(): Unit
	Name: notifyAll
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@notifyAll():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	implicit def ordered[A](implicit arg0: (A) ⇒ Comparable[A]): Ordering[A]
	Name: ordered
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@ordered[A](implicitevidence$1:A=>Comparable[A]):scala.math.Ordering[A]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		A
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			null::A
		}
	}

	[Function]
	final def synchronized[T0](arg0: ⇒ T0): T0
	Name: synchronized
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@synchronized[T0](x$1:=>T0):T0
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
		
			[result]
			null::T0
		}
	
		[result]
		null::T0
	}

	[Function]
	def toString(): String
	Name: toString
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@toString():String
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	final def wait(): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@wait():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long, arg1: Int): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@wait(x$1:Long,x$2:Int):Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
		scala::Int
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering$@wait(x$1:Long):Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
	
		[result]
		scala::Unit
	}
}