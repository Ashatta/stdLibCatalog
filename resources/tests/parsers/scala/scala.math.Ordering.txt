[Classifier]
trait Ordering[T] extends Comparator[T] with PartialOrdering[T] with Serializable
Name: Ordering
Language: SCALA
Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering
Containing package: scala.math
attributes {
	abstract=false
	final=false
	classifierType=trait
	implicit=false
	sealed=false
}
parameters {
	T
}
derived {
	scala.math::DoubleOrdering
	scala.math::BigDecimalOrdering
	scala.math::IntOrdering
	scala.math::ShortOrdering
	scala.math::OptionOrdering
	scala.math::BooleanOrdering
	scala.math::Numeric
	scala.math::StringOrdering
	scala.math::FloatOrdering
	scala.math::BigIntOrdering
	scala.math::CharOrdering
	scala.math::UnitOrdering
	scala.math::ByteOrdering
	scala.math::LongOrdering
}
supertypes {
	scala.math::PartialOrdering {
		null::T
	}
	scala::Serializable
	java.util::Comparator {
		null::T
	}
}
members {

	[Function]
	abstract def compare(x: T, y: T): Int
	Name: compare
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@compare(x:T,y:T):Int
	Containing package: scala.math
	attributes {
		abstract=true
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Int
	}

	[Function]
	final def !=(arg0: Any): Boolean
	Name: !=
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@!=(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	final def ##(): Int
	Name: ##
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@##():Int
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	def +(other: String): String
	Name: +
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@+(other:String):String
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	def ->[B](y: B): (Ordering[T], B)
	Name: ->
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@->[B](y:B):(A,B)
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala.math::Ordering {
				null::T
			}
			null::B
		}
	}

	[Function]
	final def ==(arg0: Any): Boolean
	Name: ==
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@==(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	final def asInstanceOf[T0]: T0
	Name: asInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@asInstanceOf[T0]:T0
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::T0
	}

	[Function]
	def clone(): AnyRef
	Name: clone
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@clone():Object
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::AnyRef
	}

	[Function]
	def ensuring(cond: (Ordering[T]) ⇒ Boolean, msg: ⇒ Any): Ordering[T]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@ensuring(cond:A=>Boolean,msg:=>Any):A
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala.math::Ordering {
				null::T
			}
		
			[result]
			scala::Boolean
		}
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	def ensuring(cond: (Ordering[T]) ⇒ Boolean): Ordering[T]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@ensuring(cond:A=>Boolean):A
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			scala.math::Ordering {
				null::T
			}
		
			[result]
			scala::Boolean
		}
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	def ensuring(cond: Boolean, msg: ⇒ Any): Ordering[T]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@ensuring(cond:Boolean,msg:=>Any):A
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
		<function> {
			[parameters]
		
			[result]
			scala::Any
		}
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	def ensuring(cond: Boolean): Ordering[T]
	Name: ensuring
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@ensuring(cond:Boolean):A
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Boolean
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	final def eq(arg0: AnyRef): Boolean
	Name: eq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@eq(x$1:AnyRef):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	def equals(arg0: Any): Boolean
	Name: equals
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@equals(x$1:Any):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Any
	
		[result]
		scala::Boolean
	}

	[Function]
	def equiv(x: T, y: T): Boolean
	Name: equiv
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@equiv(x:T,y:T):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Boolean
	}

	[Function]
	def finalize(): Unit
	Name: finalize
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@finalize():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def formatted(fmtstr: String): String
	Name: formatted
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@formatted(fmtstr:String):String
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::String
	
		[result]
		scala::String
	}

	[Function]
	final def getClass(): Class[_]
	Name: getClass
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@getClass():Class[_]
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::Class {
			?
		}
	}

	[Function]
	def gt(x: T, y: T): Boolean
	Name: gt
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@gt(x:T,y:T):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Boolean
	}

	[Function]
	def gteq(x: T, y: T): Boolean
	Name: gteq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@gteq(x:T,y:T):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Boolean
	}

	[Function]
	def hashCode(): Int
	Name: hashCode
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@hashCode():Int
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Int
	}

	[Function]
	final def isInstanceOf[T0]: Boolean
	Name: isInstanceOf
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@isInstanceOf[T0]:Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Boolean
	}

	[Function]
	def lt(x: T, y: T): Boolean
	Name: lt
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@lt(x:T,y:T):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Boolean
	}

	[Function]
	def lteq(x: T, y: T): Boolean
	Name: lteq
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@lteq(x:T,y:T):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Boolean
	}

	[Function]
	def max(x: T, y: T): T
	Name: max
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@max(x:T,y:T):T
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		null::T
	}

	[Function]
	def min(x: T, y: T): T
	Name: min
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@min(x:T,y:T):T
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		null::T
	}

	[Function]
	implicit def mkOrderingOps(lhs: T): Ops
	Name: mkOrderingOps
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@mkOrderingOps(lhs:T):Ordering.this.Ops
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=true
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
	
		[result]
		scala.math::Ops
	}

	[Function]
	final def ne(arg0: AnyRef): Boolean
	Name: ne
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@ne(x$1:AnyRef):Boolean
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::AnyRef
	
		[result]
		scala::Boolean
	}

	[Function]
	final def notify(): Unit
	Name: notify
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@notify():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def notifyAll(): Unit
	Name: notifyAll
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@notifyAll():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	def on[U](f: (U) ⇒ T): Ordering[U]
	Name: on
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@on[U](f:U=>T):scala.math.Ordering[U]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		U
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::U
		
			[result]
			null::T
		}
	
		[result]
		scala.math::Ordering {
			null::U
		}
	}

	[Function]
	def reverse: Ordering[T]
	Name: reverse
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@reverse:scala.math.Ordering[T]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala.math::Ordering {
			null::T
		}
	}

	[Function]
	final def synchronized[T0](arg0: ⇒ T0): T0
	Name: synchronized
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@synchronized[T0](x$1:=>T0):T0
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		T0
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
		
			[result]
			null::T0
		}
	
		[result]
		null::T0
	}

	[Function]
	def toString(): String
	Name: toString
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@toString():String
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		java.lang::String
	}

	[Function]
	def tryCompare(x: T, y: T): Some[Int]
	Name: tryCompare
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@tryCompare(x:T,y:T):Some[Int]
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		null::T
		null::T
	
		[result]
		scala::Some {
			scala::Int
		}
	}

	[Function]
	final def wait(): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@wait():Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long, arg1: Int): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@wait(x$1:Long,x$2:Int):Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
		scala::Int
	
		[result]
		scala::Unit
	}

	[Function]
	final def wait(arg0: Long): Unit
	Name: wait
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@wait(x$1:Long):Unit
	Containing package: scala.math
	attributes {
		abstract=false
		final=true
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
	}
	Signature = <function> {
		[parameters]
		scala::Long
	
		[result]
		scala::Unit
	}

	[Function]
	def →[B](y: B): (Ordering[T], B)
	Name: →
	Language: SCALA
	Doc: http://www.scala-lang.org/api/current/index.html#scala.math.Ordering@→[B](y:B):(A,B)
	Containing package: scala.math
	attributes {
		abstract=false
		final=false
		implicit=false
		memberType=function
		lazy=false
	}
	Containing type: Ordering
	parameters {
		B
	}
	Signature = <function> {
		[parameters]
		null::B
	
		[result]
		scala::Tuple2 {
			scala.math::Ordering {
				null::T
			}
			null::B
		}
	}
}