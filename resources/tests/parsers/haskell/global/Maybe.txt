[Package]
Name: Maybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html
Containing package: null
attributes {
}

Subpackages {
}

[Classifier]
data Maybe a :: * -> * = Nothing | Just a
Name: Maybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#t:Maybe
Containing package: Maybe
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Function]
maybe :: b -> (a -> b) -> Maybe a -> b
Name: maybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:maybe
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	null::b
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	Maybe::Maybe {
		null::a
	}

	[result]
	null::b
}

[Function]
fromMaybe :: a -> Maybe a -> a
Name: fromMaybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:fromMaybe
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a
	Maybe::Maybe {
		null::a
	}

	[result]
	null::a
}

[Function]
isNothing :: Maybe a -> Bool
Name: isNothing
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:isNothing
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Maybe::Maybe {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
catMaybes :: [Maybe a] -> [a]
Name: catMaybes
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:catMaybes
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		Maybe::Maybe {
			null::a
		}
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
mapMaybe :: (a -> Maybe b) -> [a] -> [b]
Name: mapMaybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:mapMaybe
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Maybe::Maybe {
			null::b
		}
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::b
	}
}

[Function]
listToMaybe :: [a] -> Maybe a
Name: listToMaybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:listToMaybe
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Maybe::Maybe {
		null::a
	}
}

[Function]
isJust :: Maybe a -> Bool
Name: isJust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:isJust
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Maybe::Maybe {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
fromJust :: Maybe a -> a
Name: fromJust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:fromJust
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Maybe::Maybe {
		null::a
	}

	[result]
	null::a
}

[Function]
maybeToList :: Maybe a -> [a]
Name: maybeToList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/Maybe.html#v:maybeToList
Containing package: Maybe
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Maybe::Maybe {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}