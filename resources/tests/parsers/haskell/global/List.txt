[Package]
Name: List
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html
Containing package: null
attributes {
}

Subpackages {
}

[Function]
isSuffixOf :: Eq a => [a] -> [a] -> Bool
Name: isSuffixOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:isSuffixOf
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
genericDrop :: Integral i => i -> [a] -> [a]
Name: genericDrop
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericDrop
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Integral i; i; Prelude::Integral)
	a
}
Signature = <function> {
	[parameters]
	null::i
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
unwords :: [String] -> String
Name: unwords
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unwords
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	other::List {
		Prelude::String
	}

	[result]
	Prelude::String
}

[Function]
unlines :: [String] -> String
Name: unlines
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unlines
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	other::List {
		Prelude::String
	}

	[result]
	Prelude::String
}

[Function]
nub :: Eq a => [a] -> [a]
Name: nub
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:nub
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
or :: [Bool] -> Bool
Name: or
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:or
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	other::List {
		Prelude::Bool
	}

	[result]
	Prelude::Bool
}

[Function]
reverse :: [a] -> [a]
Name: reverse
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:reverse
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
genericReplicate :: Integral i => i -> a -> [a]
Name: genericReplicate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericReplicate
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Integral i; i; Prelude::Integral)
	a
}
Signature = <function> {
	[parameters]
	null::i
	null::a

	[result]
	other::List {
		null::a
	}
}

[Function]
mapAccumL :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
Name: mapAccumL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:mapAccumL
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	acc
	x
	y
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::acc
		null::x
	
		[result]
		GHC.Tuple::(,) {
			null::acc
			null::y
		}
	}
	null::acc
	other::List {
		null::x
	}

	[result]
	GHC.Tuple::(,) {
		null::acc
		other::List {
			null::y
		}
	}
}

[Function]
mapAccumR :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
Name: mapAccumR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:mapAccumR
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	acc
	x
	y
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::acc
		null::x
	
		[result]
		GHC.Tuple::(,) {
			null::acc
			null::y
		}
	}
	null::acc
	other::List {
		null::x
	}

	[result]
	GHC.Tuple::(,) {
		null::acc
		other::List {
			null::y
		}
	}
}

[Function]
last :: [a] -> a
Name: last
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:last
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
maximumBy :: (a -> a -> Ordering) -> [a] -> a
Name: maximumBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:maximumBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Ordering
	}
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
maximum :: Ord a => [a] -> a
Name: maximum
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:maximum
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Prelude::Ord)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
groupBy :: (a -> a -> Bool) -> [a] -> [[a]]
Name: groupBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:groupBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}
}

[Function]
deleteBy :: (a -> a -> Bool) -> a -> [a] -> [a]
Name: deleteBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:deleteBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
null :: [a] -> Bool
Name: null
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:null
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
map :: (a -> b) -> [a] -> [b]
Name: map
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:map
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::b
	}
}

[Function]
(!!) :: [a] -> Int -> a
Name: (!!)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:(!!)
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	Prelude::Int

	[result]
	null::a
}

[Function]
nubBy :: (a -> a -> Bool) -> [a] -> [a]
Name: nubBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:nubBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
scanr1 :: (a -> a -> a) -> [a] -> [a]
Name: scanr1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:scanr1
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
filter :: (a -> Bool) -> [a] -> [a]
Name: filter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:filter
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
scanl1 :: (a -> a -> a) -> [a] -> [a]
Name: scanl1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:scanl1
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
length :: [a] -> Int
Name: length
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:length
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Prelude::Int
}

[Function]
all :: (a -> Bool) -> [a] -> Bool
Name: all
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:all
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
and :: [Bool] -> Bool
Name: and
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:and
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	other::List {
		Prelude::Bool
	}

	[result]
	Prelude::Bool
}

[Function]
any :: (a -> Bool) -> [a] -> Bool
Name: any
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:any
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
genericSplitAt :: Integral i => i -> [a] -> ([a], [a])
Name: genericSplitAt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericSplitAt
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Integral i; i; Prelude::Integral)
	a
}
Signature = <function> {
	[parameters]
	null::i
	other::List {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::a
		}
	}
}

[Function]
delete :: Eq a => a -> [a] -> [a]
Name: delete
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:delete
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
sum :: Num a => [a] -> a
Name: sum
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:sum
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Num a; a; Prelude::Num)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
inits :: [a] -> [[a]]
Name: inits
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:inits
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}
}

[Function]
repeat :: a -> [a]
Name: repeat
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:repeat
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a

	[result]
	other::List {
		null::a
	}
}

[Function]
tails :: [a] -> [[a]]
Name: tails
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:tails
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}
}

[Function]
genericIndex :: Integral i => [a] -> i -> a
Name: genericIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericIndex
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Integral i; i; Prelude::Integral)
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	null::i

	[result]
	null::a
}

[Function]
insert :: Ord a => a -> [a] -> [a]
Name: insert
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:insert
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Prelude::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
insertBy :: (a -> a -> Ordering) -> a -> [a] -> [a]
Name: insertBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:insertBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Ordering
	}
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
intersect :: Eq a => [a] -> [a] -> [a]
Name: intersect
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:intersect
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
scanr :: (a -> b -> b) -> b -> [a] -> [b]
Name: scanr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:scanr
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	other::List {
		null::a
	}

	[result]
	other::List {
		null::b
	}
}

[Function]
scanl :: (b -> a -> b) -> b -> [a] -> [b]
Name: scanl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:scanl
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
		null::a
	
		[result]
		null::b
	}
	null::b
	other::List {
		null::a
	}

	[result]
	other::List {
		null::b
	}
}

[Function]
foldr :: (a -> b -> b) -> b -> [a] -> b
Name: foldr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:foldr
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	other::List {
		null::a
	}

	[result]
	null::b
}

[Function]
foldl :: (b -> a -> b) -> b -> [a] -> b
Name: foldl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:foldl
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
		null::a
	
		[result]
		null::b
	}
	null::b
	other::List {
		null::a
	}

	[result]
	null::b
}

[Function]
concat :: [[a]] -> [a]
Name: concat
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:concat
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
elem :: Eq a => a -> [a] -> Bool
Name: elem
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:elem
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
findIndices :: (a -> Bool) -> [a] -> [Int]
Name: findIndices
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:findIndices
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		Prelude::Int
	}
}

[Function]
takeWhile :: (a -> Bool) -> [a] -> [a]
Name: takeWhile
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:takeWhile
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
init :: [a] -> [a]
Name: init
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:init
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
elemIndices :: Eq a => a -> [a] -> [Int]
Name: elemIndices
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:elemIndices
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		Prelude::Int
	}
}

[Function]
notElem :: Eq a => a -> [a] -> Bool
Name: notElem
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:notElem
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
dropWhile :: (a -> Bool) -> [a] -> [a]
Name: dropWhile
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:dropWhile
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
splitAt :: Int -> [a] -> ([a], [a])
Name: splitAt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:splitAt
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Prelude::Int
	other::List {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::a
		}
	}
}

[Function]
sort :: Ord a => [a] -> [a]
Name: sort
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:sort
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Prelude::Ord)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
intersperse :: a -> [a] -> [a]
Name: intersperse
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:intersperse
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
cycle :: [a] -> [a]
Name: cycle
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:cycle
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
span :: (a -> Bool) -> [a] -> ([a], [a])
Name: span
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:span
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::a
		}
	}
}

[Function]
product :: Num a => [a] -> a
Name: product
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:product
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Num a; a; Prelude::Num)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
genericLength :: Num i => [a] -> i
Name: genericLength
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericLength
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Num i; i; Prelude::Num)
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::i
}

[Function]
intersectBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
Name: intersectBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:intersectBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
elemIndex :: Eq a => a -> [a] -> Maybe Int
Name: elemIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:elemIndex
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		null::a
	}

	[result]
	Prelude::Maybe {
		Prelude::Int
	}
}

[Function]
isPrefixOf :: Eq a => [a] -> [a] -> Bool
Name: isPrefixOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:isPrefixOf
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Bool
}

[Function]
break :: (a -> Bool) -> [a] -> ([a], [a])
Name: break
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:break
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::a
		}
	}
}

[Function]
minimumBy :: (a -> a -> Ordering) -> [a] -> a
Name: minimumBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:minimumBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Ordering
	}
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
partition :: (a -> Bool) -> [a] -> ([a], [a])
Name: partition
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:partition
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::a
		}
	}
}

[Function]
find :: (a -> Bool) -> [a] -> Maybe a
Name: find
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:find
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Maybe {
		null::a
	}
}

[Function]
group :: Eq a => [a] -> [[a]]
Name: group
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:group
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}
}

[Function]
take :: Int -> [a] -> [a]
Name: take
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:take
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Prelude::Int
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
tail :: [a] -> [a]
Name: tail
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:tail
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
unzip3 :: [(a, b, c)] -> ([a], [b], [c])
Name: unzip3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip3
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,,) {
			null::a
			null::b
			null::c
		}
	}

	[result]
	GHC.Tuple::(,,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
		other::List {
			null::c
		}
	}
}

[Function]
unzip4 :: [(a, b, c, d)] -> ([a], [b], [c], [d])
Name: unzip4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip4
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,,,) {
			null::a
			null::b
			null::c
			null::d
		}
	}

	[result]
	GHC.Tuple::(,,,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
		other::List {
			null::c
		}
		other::List {
			null::d
		}
	}
}

[Function]
unzip5 :: [(a, b, c, d, e)] -> ([a], [b], [c], [d], [e])
Name: unzip5
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip5
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
		}
	}

	[result]
	GHC.Tuple::(,,,,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
		other::List {
			null::c
		}
		other::List {
			null::d
		}
		other::List {
			null::e
		}
	}
}

[Function]
unzip6 :: [(a, b, c, d, e, f)] -> ([a], [b], [c], [d], [e], [f])
Name: unzip6
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip6
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
			null::f
		}
	}

	[result]
	GHC.Tuple::(,,,,,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
		other::List {
			null::c
		}
		other::List {
			null::d
		}
		other::List {
			null::e
		}
		other::List {
			null::f
		}
	}
}

[Function]
unzip7 :: [(a, b, c, d, e, f, g)] -> ([a], [b], [c], [d], [e], [f], [g])
Name: unzip7
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip7
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
	g
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,,,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
			null::f
			null::g
		}
	}

	[result]
	GHC.Tuple::(,,,,,,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
		other::List {
			null::c
		}
		other::List {
			null::d
		}
		other::List {
			null::e
		}
		other::List {
			null::f
		}
		other::List {
			null::g
		}
	}
}

[Function]
(\\) :: Eq a => [a] -> [a] -> [a]
Name: (\\)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:(\\)
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
Name: zipWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::c
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}

	[result]
	other::List {
		null::c
	}
}

[Function]
unionBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
Name: unionBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unionBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
union :: Eq a => [a] -> [a] -> [a]
Name: union
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:union
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
transpose :: [[a]] -> [[a]]
Name: transpose
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:transpose
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}

	[result]
	other::List {
		<function> {
			[parameters]
		
			[result]
			other::List {
				null::a
			}
		}
	}
}

[Function]
unzip :: [(a, b)] -> ([a], [b])
Name: unzip
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unzip
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,) {
			null::a
			null::b
		}
	}

	[result]
	GHC.Tuple::(,) {
		other::List {
			null::a
		}
		other::List {
			null::b
		}
	}
}

[Function]
unfoldr :: (b -> Maybe (a, b)) -> b -> [a]
Name: unfoldr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:unfoldr
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
	
		[result]
		Prelude::Maybe {
			GHC.Tuple::(,) {
				null::a
				null::b
			}
		}
	}
	null::b

	[result]
	other::List {
		null::a
	}
}

[Function]
head :: [a] -> a
Name: head
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:head
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
deleteFirstsBy :: (a -> a -> Bool) -> [a] -> [a] -> [a]
Name: deleteFirstsBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:deleteFirstsBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
lookup :: Eq a => a -> [(a, b)] -> Maybe b
Name: lookup
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:lookup
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Prelude::Eq)
	b
}
Signature = <function> {
	[parameters]
	null::a
	other::List {
		GHC.Tuple::(,) {
			null::a
			null::b
		}
	}

	[result]
	Prelude::Maybe {
		null::b
	}
}

[Function]
minimum :: Ord a => [a] -> a
Name: minimum
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:minimum
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Prelude::Ord)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
concatMap :: (a -> [b]) -> [a] -> [b]
Name: concatMap
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:concatMap
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		other::List {
			null::b
		}
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::b
	}
}

[Function]
findIndex :: (a -> Bool) -> [a] -> Maybe Int
Name: findIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:findIndex
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Prelude::Bool
	}
	other::List {
		null::a
	}

	[result]
	Prelude::Maybe {
		Prelude::Int
	}
}

[Function]
drop :: Int -> [a] -> [a]
Name: drop
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:drop
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Prelude::Int
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
sortBy :: (a -> a -> Ordering) -> [a] -> [a]
Name: sortBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:sortBy
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Prelude::Ordering
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
lines :: String -> [String]
Name: lines
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:lines
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::String

	[result]
	other::List {
		Prelude::String
	}
}

[Function]
genericTake :: Integral i => i -> [a] -> [a]
Name: genericTake
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:genericTake
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	i: (Integral i; i; Prelude::Integral)
	a
}
Signature = <function> {
	[parameters]
	null::i
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
iterate :: (a -> a) -> a -> [a]
Name: iterate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:iterate
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::a
	}
	null::a

	[result]
	other::List {
		null::a
	}
}

[Function]
(++) :: [a] -> [a] -> [a]
Name: (++)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:(++)
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
foldl1 :: (a -> a -> a) -> [a] -> a
Name: foldl1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:foldl1
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
foldr1 :: (a -> a -> a) -> [a] -> a
Name: foldr1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:foldr1
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		null::a
	}

	[result]
	null::a
}

[Function]
words :: String -> [String]
Name: words
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:words
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::String

	[result]
	other::List {
		Prelude::String
	}
}

[Function]
zip6 :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [(a, b, c, d, e, f)]
Name: zip6
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip6
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}
	other::List {
		null::f
	}

	[result]
	other::List {
		GHC.Tuple::(,,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
			null::f
		}
	}
}

[Function]
zip5 :: [a] -> [b] -> [c] -> [d] -> [e] -> [(a, b, c, d, e)]
Name: zip5
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip5
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}

	[result]
	other::List {
		GHC.Tuple::(,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
		}
	}
}

[Function]
zip4 :: [a] -> [b] -> [c] -> [d] -> [(a, b, c, d)]
Name: zip4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip4
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}

	[result]
	other::List {
		GHC.Tuple::(,,,) {
			null::a
			null::b
			null::c
			null::d
		}
	}
}

[Function]
zip3 :: [a] -> [b] -> [c] -> [(a, b, c)]
Name: zip3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip3
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}

	[result]
	other::List {
		GHC.Tuple::(,,) {
			null::a
			null::b
			null::c
		}
	}
}

[Function]
zip7 :: [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [(a, b, c, d, e, f, g)]
Name: zip7
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip7
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
	g
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}
	other::List {
		null::f
	}
	other::List {
		null::g
	}

	[result]
	other::List {
		GHC.Tuple::(,,,,,,) {
			null::a
			null::b
			null::c
			null::d
			null::e
			null::f
			null::g
		}
	}
}

[Function]
zip :: [a] -> [b] -> [(a, b)]
Name: zip
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zip
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	other::List {
		null::b
	}

	[result]
	other::List {
		GHC.Tuple::(,) {
			null::a
			null::b
		}
	}
}

[Function]
replicate :: Int -> a -> [a]
Name: replicate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:replicate
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Prelude::Int
	null::a

	[result]
	other::List {
		null::a
	}
}

[Function]
zipWith6 :: (a -> b -> c -> d -> e -> f -> g) -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g]
Name: zipWith6
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith6
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
	g
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
		null::d
		null::e
		null::f
	
		[result]
		null::g
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}
	other::List {
		null::f
	}

	[result]
	other::List {
		null::g
	}
}

[Function]
zipWith5 :: (a -> b -> c -> d -> e -> f) -> [a] -> [b] -> [c] -> [d] -> [e] -> [f]
Name: zipWith5
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith5
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
		null::d
		null::e
	
		[result]
		null::f
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}

	[result]
	other::List {
		null::f
	}
}

[Function]
zipWith7 :: (a -> b -> c -> d -> e -> f -> g -> h) -> [a] -> [b] -> [c] -> [d] -> [e] -> [f] -> [g] -> [h]
Name: zipWith7
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith7
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
	f
	g
	h
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
		null::d
		null::e
		null::f
		null::g
	
		[result]
		null::h
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}
	other::List {
		null::e
	}
	other::List {
		null::f
	}
	other::List {
		null::g
	}

	[result]
	other::List {
		null::h
	}
}

[Function]
zipWith4 :: (a -> b -> c -> d -> e) -> [a] -> [b] -> [c] -> [d] -> [e]
Name: zipWith4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith4
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
		null::d
	
		[result]
		null::e
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}
	other::List {
		null::d
	}

	[result]
	other::List {
		null::e
	}
}

[Function]
zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
Name: zipWith3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/haskell98-2.0.0.3/List.html#v:zipWith3
Containing package: List
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
	
		[result]
		null::d
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}
	other::List {
		null::c
	}

	[result]
	other::List {
		null::d
	}
}