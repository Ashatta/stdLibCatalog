[Package]
Name: Control.Monad
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html
Containing package: Control
attributes {
}

Subpackages {
	Control.Monad.Fix
	IO
	Control.Monad.Instances
	Control.Monad.ST
	Trans
	Control.Monad.Zip
}

[Classifier]
class Monad m => MonadPlus m where mzero :: m a mplus :: m a -> m a -> m a
Name: MonadPlus
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#t:MonadPlus
Containing package: Control.Monad
attributes {
	classifierType=typeclass
	fakeInstanceClassifier=false
}
parameters {
}
derived {
	Control.Arrow::Control.Monad.MonadPlus_ArrowMonad<a<>>
	Control.Monad.Trans.Error::Control.Monad.MonadPlus_ErrorT<e<>,m<>>
	Control.Monad.Trans.Identity::Control.Monad.MonadPlus_IdentityT<m<>>
	Control.Monad.Trans.List::Control.Monad.MonadPlus_ListT<m<>>
	Control.Monad.Trans.Maybe::Control.Monad.MonadPlus_MaybeT<m<>>
	Control.Monad.Trans.RWS.Lazy::Control.Monad.MonadPlus_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.RWS.Strict::Control.Monad.MonadPlus_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.Reader::Control.Monad.MonadPlus_ReaderT<r<>,m<>>
	Control.Monad.Trans.State.Lazy::Control.Monad.MonadPlus_StateT<s<>,m<>>
	Control.Monad.Trans.State.Strict::Control.Monad.MonadPlus_StateT<s<>,m<>>
	Control.Monad.Trans.Writer.Lazy::Control.Monad.MonadPlus_WriterT<w<>,m<>>
	Control.Monad.Trans.Writer.Strict::Control.Monad.MonadPlus_WriterT<w<>,m<>>
	other::Control.Monad.MonadPlus_List<curriedParam<>>
	Data.Maybe::Control.Monad.MonadPlus_Maybe<>
	Text.ParserCombinators.ReadP::Control.Monad.MonadPlus_ReadP<>
	Text.ParserCombinators.ReadPrec::Control.Monad.MonadPlus_ReadPrec<>
	GHC.Conc::Control.Monad.MonadPlus_STM<>
	Data.Binary.Get.Internal::Control.Monad.MonadPlus_Get<>
	Data.Binary.Get::Control.Monad.MonadPlus_Get<>
	Data.Binary::Control.Monad.MonadPlus_Get<>
	Data.Functor.Product::Control.Monad.MonadPlus_Product<f<>,g<>>
	Data.Sequence::Control.Monad.MonadPlus_Seq<>
	GHC.Conc.Sync::Control.Monad.MonadPlus_STM<>
	Prelude::Control.Monad.MonadPlus_Maybe<>
	System.Console.Terminfo.Base::Control.Monad.MonadPlus_Capability<>
}
supertypes {
	Control.Monad::Monad
}
members {

	[Function]
	mzero :: m a
	Name: mzero
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mzero
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: MonadPlus
	parameters {
		m: (MonadPlus m; m; Control.Monad::MonadPlus)
		a
	}
	Signature = <function> {
		[parameters]
	
		[result]
		null::m {
			null::a
		}
	}

	[Function]
	mplus :: m a -> m a -> m a
	Name: mplus
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mplus
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: MonadPlus
	parameters {
		m: (MonadPlus m; m; Control.Monad::MonadPlus)
		a
	}
	Signature = <function> {
		[parameters]
		null::m {
			null::a
		}
		null::m {
			null::a
		}
	
		[result]
		null::m {
			null::a
		}
	}
}

[Classifier]
class Functor f where fmap :: (a -> b) -> f a -> f b
Name: Functor
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#t:Functor
Containing package: Control.Monad
attributes {
	classifierType=typeclass
	fakeInstanceClassifier=false
}
parameters {
}
derived {
	Control.Applicative::Applicative
	Data.Traversable::Traversable
	Compiler.Hoopl.Internals::Control.Monad.Functor_MaybeO<ex<>>
	Compiler.Hoopl.Internals::Control.Monad.Functor_MaybeC<ex<>>
	Compiler.Hoopl::Control.Monad.Functor_MaybeO<ex<>>
	Compiler.Hoopl::Control.Monad.Functor_MaybeC<ex<>>
	Compiler.Hoopl::Control.Monad.Functor_Pointed<t<>,b<>>
	Compiler.Hoopl::Control.Monad.Functor_CheckingFuelMonad<m<>>
	Compiler.Hoopl::Control.Monad.Functor_InfiniteFuelMonad<m<>>
	Compiler.Hoopl::Control.Monad.Functor_SimpleUniqueMonad<>
	Compiler.Hoopl::Control.Monad.Functor_UniqueMonadT<m<>>
	Control.Applicative.Backwards::Control.Monad.Functor_Backwards<f<>>
	Control.Applicative.Lift::Control.Monad.Functor_Lift<f<>>
	Control.Applicative::Control.Monad.Functor_Const<m<>>
	Control.Applicative::Control.Monad.Functor_WrappedMonad<m<>>
	Control.Applicative::Control.Monad.Functor_WrappedArrow<a<>,b<>>
	Control.Applicative::Control.Monad.Functor_ZipList<>
	Control.Arrow::Control.Monad.Functor_ArrowMonad<a<>>
	Control.Exception::Control.Monad.Functor_Handler<>
	Control.Monad.ST.Lazy.Safe::Control.Monad.Functor_ST<s<>>
	Control.Monad.ST.Lazy::Control.Monad.Functor_ST<s<>>
	Control.Monad.ST.Safe::Control.Monad.Functor_ST<s<>>
	Control.Monad.ST::Control.Monad.Functor_ST<s<>>
	Control.Monad.Trans.Cont::Control.Monad.Functor_ContT<r<>,m<>>
	Control.Monad.Trans.Error::Control.Monad.Functor_ErrorT<e<>,m<>>
	Control.Monad.Trans.Identity::Control.Monad.Functor_IdentityT<m<>>
	Control.Monad.Trans.List::Control.Monad.Functor_ListT<m<>>
	Control.Monad.Trans.Maybe::Control.Monad.Functor_MaybeT<m<>>
	Control.Monad.Trans.RWS.Lazy::Control.Monad.Functor_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.RWS.Strict::Control.Monad.Functor_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.Reader::Control.Monad.Functor_ReaderT<r<>,m<>>
	Control.Monad.Trans.State.Lazy::Control.Monad.Functor_StateT<s<>,m<>>
	Control.Monad.Trans.State.Strict::Control.Monad.Functor_StateT<s<>,m<>>
	Control.Monad.Trans.Writer.Lazy::Control.Monad.Functor_WriterT<w<>,m<>>
	Control.Monad.Trans.Writer.Strict::Control.Monad.Functor_WriterT<w<>,m<>>
	other::Control.Monad.Functor_List<curriedParam<>>
	System.IO::Control.Monad.Functor_IO<>
	Data.Maybe::Control.Monad.Functor_Maybe<>
	Text.ParserCombinators.ReadP::Control.Monad.Functor_ReadP<>
	Text.ParserCombinators.ReadPrec::Control.Monad.Functor_ReadPrec<>
	GHC.Conc::Control.Monad.Functor_STM<>
	System.Console.GetOpt::Control.Monad.Functor_ArgDescr<>
	System.Console.GetOpt::Control.Monad.Functor_OptDescr<>
	System.Console.GetOpt::Control.Monad.Functor_ArgOrder<>
	other::Control.Monad.Functor_(->)<r<>>
	Data.Either::Control.Monad.Functor_Either<a<>>
	GHC.Tuple::Control.Monad.Functor_(,)<a<>>
	Data.Proxy::Control.Monad.Functor_Proxy<>
	Data.Array.IArray::Control.Monad.Functor_Array<i<>>
	Data.Array::Control.Monad.Functor_Array<i<>>
	Data.Binary.Get.Internal::Control.Monad.Functor_Get<>
	Data.Binary.Get.Internal::Control.Monad.Functor_Decoder<>
	Data.Binary.Get::Control.Monad.Functor_Get<>
	Data.Binary.Put::Control.Monad.Functor_PutM<>
	Data.Binary::Control.Monad.Functor_Get<>
	Data.Functor.Compose::Control.Monad.Functor_Compose<f<>,g<>>
	Data.Functor.Constant::Control.Monad.Functor_Constant<a<>>
	Data.Functor.Identity::Control.Monad.Functor_Identity<>
	Data.Functor.Product::Control.Monad.Functor_Product<f<>,g<>>
	Data.Functor.Reverse::Control.Monad.Functor_Reverse<f<>>
	Data.Graph::Control.Monad.Functor_SCC<>
	Data.IntMap.Lazy::Control.Monad.Functor_IntMap<>
	Data.IntMap.Strict::Control.Monad.Functor_IntMap<>
	Data.Map.Lazy::Control.Monad.Functor_Map<k<>>
	Data.Map.Strict::Control.Monad.Functor_Map<k<>>
	Data.Sequence::Control.Monad.Functor_Seq<>
	Data.Sequence::Control.Monad.Functor_ViewL<>
	Data.Sequence::Control.Monad.Functor_ViewR<>
	Data.Tree::Control.Monad.Functor_Tree<>
	Data.Typeable.Internal::Control.Monad.Functor_Proxy<>
	Data.Typeable::Control.Monad.Functor_Proxy<>
	Distribution.InstalledPackageInfo::Control.Monad.Functor_ParseResult<>
	Distribution.PackageDescription.Parse::Control.Monad.Functor_ParseResult<>
	Distribution.ReadE::Control.Monad.Functor_ReadE<>
	Distribution.Simple.Command::Control.Monad.Functor_CommandParse<>
	Distribution.Simple.InstallDirs::Control.Monad.Functor_InstallDirs<>
	Distribution.Simple.Setup::Control.Monad.Functor_Flag<>
	GHC.Conc.Sync::Control.Monad.Functor_STM<>
	Language.Haskell.TH.PprLib::Control.Monad.Functor_PprM<>
	Language.Haskell.TH.Syntax::Control.Monad.Functor_Q<>
	Language.Haskell.TH::Control.Monad.Functor_Q<>
	System.Console.Haskeline::Control.Monad.Functor_InputT<m<>>
	System.Console.Terminfo.Base::Control.Monad.Functor_Capability<>
}
supertypes {
}
members {

	[Function]
	fmap :: (a -> b) -> f a -> f b
	Name: fmap
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:fmap
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: Functor
	parameters {
		a
		b
		f: (Functor f; f; Control.Monad::Functor)
	}
	Signature = <function> {
		[parameters]
		<function> {
			[parameters]
			null::a
		
			[result]
			null::b
		}
		null::f {
			null::a
		}
	
		[result]
		null::f {
			null::b
		}
	}
}

[Classifier]
class Monad m where (>>=) :: forall a b. m a -> (a -> m b) -> m b (>>) :: forall a b. m a -> m b -> m b return :: a -> m a fail :: String -> m a
Name: Monad
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#t:Monad
Containing package: Control.Monad
attributes {
	classifierType=typeclass
	fakeInstanceClassifier=false
}
parameters {
}
derived {
	Compiler.Hoopl::CheckpointMonad
	Compiler.Hoopl::FuelMonad
	Compiler.Hoopl::UniqueMonad
	Control.Monad.Fix::MonadFix
	Control.Monad.IO.Class::MonadIO
	Control.Monad.Zip::MonadZip
	Control.Monad::MonadPlus
	Data.Array.MArray.Safe::MArray
	Data.Array.MArray::MArray
	Language.Haskell.TH.Syntax::Quasi
	other::Control.Monad.Monad_CheckingFuelm<>
	other::Control.Monad.Monad_InfiniteFuelm<>
	Compiler.Hoopl::Control.Monad.Monad_SimpleUniqueMonad<>
	Compiler.Hoopl::Control.Monad.Monad_UniqueMonadT<m<>>
	other::Control.Monad.Monad_Wrappedm<>
	other::Control.Monad.Monad_Arrowa<>
	Control.Monad.ST.Lazy.Safe::Control.Monad.Monad_ST<s<>>
	Control.Monad.ST.Lazy::Control.Monad.Monad_ST<s<>>
	Control.Monad.ST.Safe::Control.Monad.Monad_ST<s<>>
	Control.Monad.ST::Control.Monad.Monad_ST<s<>>
	Control.Monad.Trans.Cont::Control.Monad.Monad_ContT<r<>,m<>>
	Control.Monad.Trans.Error::Control.Monad.Monad_ErrorT<e<>,m<>>
	Control.Monad.Trans.Identity::Control.Monad.Monad_IdentityT<m<>>
	Control.Monad.Trans.List::Control.Monad.Monad_ListT<m<>>
	Control.Monad.Trans.Maybe::Control.Monad.Monad_MaybeT<m<>>
	Control.Monad.Trans.RWS.Lazy::Control.Monad.Monad_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.RWS.Strict::Control.Monad.Monad_RWST<r<>,w<>,s<>,m<>>
	Control.Monad.Trans.Reader::Control.Monad.Monad_ReaderT<r<>,m<>>
	Control.Monad.Trans.State.Lazy::Control.Monad.Monad_StateT<s<>,m<>>
	Control.Monad.Trans.State.Strict::Control.Monad.Monad_StateT<s<>,m<>>
	Control.Monad.Trans.Writer.Lazy::Control.Monad.Monad_WriterT<w<>,m<>>
	Control.Monad.Trans.Writer.Strict::Control.Monad.Monad_WriterT<w<>,m<>>
	other::Control.Monad.Monad_List<curriedParam<>>
	System.IO::Control.Monad.Monad_IO<>
	Data.Maybe::Control.Monad.Monad_Maybe<>
	Text.ParserCombinators.ReadP::Control.Monad.Monad_ReadP<>
	Text.ParserCombinators.ReadPrec::Control.Monad.Monad_ReadPrec<>
	GHC.Conc::Control.Monad.Monad_STM<>
	other::Control.Monad.Monad_(->)<r<>>
	Data.Either::Control.Monad.Monad_Either<e<>>
	Data.Proxy::Control.Monad.Monad_Proxy<>
	Data.Binary.Get.Internal::Control.Monad.Monad_Get<>
	Data.Binary.Get::Control.Monad.Monad_Get<>
	Data.Binary.Put::Control.Monad.Monad_PutM<>
	Data.Binary::Control.Monad.Monad_Get<>
	Data.Functor.Identity::Control.Monad.Monad_Identity<>
	Data.Functor.Product::Control.Monad.Monad_Product<f<>,g<>>
	Data.Sequence::Control.Monad.Monad_Seq<>
	Data.Tree::Control.Monad.Monad_Tree<>
	Data.Typeable.Internal::Control.Monad.Monad_Proxy<>
	Data.Typeable::Control.Monad.Monad_Proxy<>
	Distribution.InstalledPackageInfo::Control.Monad.Monad_ParseResult<>
	Distribution.PackageDescription.Parse::Control.Monad.Monad_ParseResult<>
	GHC.Conc.Sync::Control.Monad.Monad_STM<>
	Language.Haskell.TH.PprLib::Control.Monad.Monad_PprM<>
	Language.Haskell.TH.Syntax::Control.Monad.Monad_Q<>
	Language.Haskell.TH::Control.Monad.Monad_Q<>
	System.Console.Haskeline::Control.Monad.Monad_InputT<m<>>
	System.Console.Terminfo.Base::Control.Monad.Monad_Capability<>
}
supertypes {
}
members {

	[Function]
	(>>=) :: forall a b. m a -> (a -> m b) -> m b
	Name: (>>=)
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:(>>=)
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: Monad
	parameters {
		m: (Monad m; m; Control.Monad::Monad)
		a
		b
	}
	Signature = <function> {
		[parameters]
		null::m {
			null::a
		}
		<function> {
			[parameters]
			null::a
		
			[result]
			null::m {
				null::b
			}
		}
	
		[result]
		null::m {
			null::b
		}
	}

	[Function]
	(>>) :: forall a b. m a -> m b -> m b
	Name: (>>)
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:(>>)
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: Monad
	parameters {
		m: (Monad m; m; Control.Monad::Monad)
		a
		b
	}
	Signature = <function> {
		[parameters]
		null::m {
			null::a
		}
		null::m {
			null::b
		}
	
		[result]
		null::m {
			null::b
		}
	}

	[Function]
	return :: a -> m a
	Name: return
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:return
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: Monad
	parameters {
		a
		m: (Monad m; m; Control.Monad::Monad)
	}
	Signature = <function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::a
		}
	}

	[Function]
	fail :: String -> m a
	Name: fail
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:fail
	Containing package: Control.Monad
	attributes {
		memberType=function
	}
	Containing type: Monad
	parameters {
		m: (Monad m; m; Control.Monad::Monad)
		a
	}
	Signature = <function> {
		[parameters]
		Data.String::String
	
		[result]
		null::m {
			null::a
		}
	}
}

[Function]
forM :: Monad m => [a] -> (a -> m b) -> m [b]
Name: forM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:forM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}

	[result]
	null::m {
		other::List {
			null::b
		}
	}
}

[Function]
zipWithM_ :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m ()
Name: zipWithM_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:zipWithM_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::m {
			null::c
		}
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
mapM :: Monad m => (a -> m b) -> [a] -> m [b]
Name: mapM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mapM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}
	other::List {
		null::a
	}

	[result]
	null::m {
		other::List {
			null::b
		}
	}
}

[Function]
mapAndUnzipM :: Monad m => (a -> m (b, c)) -> [a] -> m ([b], [c])
Name: mapAndUnzipM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mapAndUnzipM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			GHC.Tuple::(,) {
				null::b
				null::c
			}
		}
	}
	other::List {
		null::a
	}

	[result]
	null::m {
		GHC.Tuple::(,) {
			other::List {
				null::b
			}
			other::List {
				null::c
			}
		}
	}
}

[Function]
msum :: MonadPlus m => [m a] -> m a
Name: msum
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:msum
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (MonadPlus m; m; Control.Monad::MonadPlus)
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::m {
			null::a
		}
	}

	[result]
	null::m {
		null::a
	}
}

[Function]
replicateM_ :: Monad m => Int -> m a -> m ()
Name: replicateM_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:replicateM_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::m {
		null::a
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
liftM :: Monad m => (a1 -> r) -> m a1 -> m r
Name: liftM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:liftM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a1
	r
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a1
	
		[result]
		null::r
	}
	null::m {
		null::a1
	}

	[result]
	null::m {
		null::r
	}
}

[Function]
ap :: Monad m => m (a -> b) -> m a -> m b
Name: ap
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:ap
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	null::m {
		<function> {
			[parameters]
			null::a
		
			[result]
			null::b
		}
	}
	null::m {
		null::a
	}

	[result]
	null::m {
		null::b
	}
}

[Function]
filterM :: Monad m => (a -> m Bool) -> [a] -> m [a]
Name: filterM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:filterM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			Data.Bool::Bool
		}
	}
	other::List {
		null::a
	}

	[result]
	null::m {
		other::List {
			null::a
		}
	}
}

[Function]
guard :: MonadPlus m => Bool -> m ()
Name: guard
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:guard
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (MonadPlus m; m; Control.Monad::MonadPlus)
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
Name: (<=<)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:(<=<)
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	b
	c
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
	
		[result]
		null::m {
			null::c
		}
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}
	null::a

	[result]
	null::m {
		null::c
	}
}

[Function]
forM_ :: Monad m => [a] -> (a -> m b) -> m ()
Name: forM_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:forM_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
sequence_ :: Monad m => [m a] -> m ()
Name: sequence_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:sequence_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::m {
			null::a
		}
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
join :: Monad m => m (m a) -> m a
Name: join
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:join
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	null::m {
		null::m {
			null::a
		}
	}

	[result]
	null::m {
		null::a
	}
}

[Function]
forever :: Monad m => m a -> m b
Name: forever
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:forever
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	null::m {
		null::a
	}

	[result]
	null::m {
		null::b
	}
}

[Function]
replicateM :: Monad m => Int -> m a -> m [a]
Name: replicateM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:replicateM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::m {
		null::a
	}

	[result]
	null::m {
		other::List {
			null::a
		}
	}
}

[Function]
mfilter :: MonadPlus m => (a -> Bool) -> m a -> m a
Name: mfilter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mfilter
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (MonadPlus m; m; Control.Monad::MonadPlus)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	null::m {
		null::a
	}

	[result]
	null::m {
		null::a
	}
}

[Function]
zipWithM :: Monad m => (a -> b -> m c) -> [a] -> [b] -> m [c]
Name: zipWithM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:zipWithM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::m {
			null::c
		}
	}
	other::List {
		null::a
	}
	other::List {
		null::b
	}

	[result]
	null::m {
		other::List {
			null::c
		}
	}
}

[Function]
sequence :: Monad m => [m a] -> m [a]
Name: sequence
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:sequence
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::m {
			null::a
		}
	}

	[result]
	null::m {
		other::List {
			null::a
		}
	}
}

[Function]
foldM_ :: Monad m => (a -> b -> m a) -> a -> [b] -> m ()
Name: foldM_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:foldM_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::m {
			null::a
		}
	}
	null::a
	other::List {
		null::b
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
when :: Monad m => Bool -> m () -> m ()
Name: when
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:when
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	null::m {
		GHC.Tuple::()
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
mapM_ :: Monad m => (a -> m b) -> [a] -> m ()
Name: mapM_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:mapM_
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}
	other::List {
		null::a
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
unless :: Monad m => Bool -> m () -> m ()
Name: unless
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:unless
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	null::m {
		GHC.Tuple::()
	}

	[result]
	null::m {
		GHC.Tuple::()
	}
}

[Function]
foldM :: Monad m => (a -> b -> m a) -> a -> [b] -> m a
Name: foldM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:foldM
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::m {
			null::a
		}
	}
	null::a
	other::List {
		null::b
	}

	[result]
	null::m {
		null::a
	}
}

[Function]
void :: Functor f => f a -> f ()
Name: void
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:void
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	f: (Functor f; f; Control.Monad::Functor)
	a
}
Signature = <function> {
	[parameters]
	null::f {
		null::a
	}

	[result]
	null::f {
		GHC.Tuple::()
	}
}

[Function]
(=<<) :: Monad m => (a -> m b) -> m a -> m b
Name: (=<<)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:(=<<)
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}
	null::m {
		null::a
	}

	[result]
	null::m {
		null::b
	}
}

[Function]
liftM5 :: Monad m => (a1 -> a2 -> a3 -> a4 -> a5 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m a5 -> m r
Name: liftM5
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:liftM5
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a1
	a2
	a3
	a4
	a5
	r
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a1
		null::a2
		null::a3
		null::a4
		null::a5
	
		[result]
		null::r
	}
	null::m {
		null::a1
	}
	null::m {
		null::a2
	}
	null::m {
		null::a3
	}
	null::m {
		null::a4
	}
	null::m {
		null::a5
	}

	[result]
	null::m {
		null::r
	}
}

[Function]
liftM4 :: Monad m => (a1 -> a2 -> a3 -> a4 -> r) -> m a1 -> m a2 -> m a3 -> m a4 -> m r
Name: liftM4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:liftM4
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a1
	a2
	a3
	a4
	r
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a1
		null::a2
		null::a3
		null::a4
	
		[result]
		null::r
	}
	null::m {
		null::a1
	}
	null::m {
		null::a2
	}
	null::m {
		null::a3
	}
	null::m {
		null::a4
	}

	[result]
	null::m {
		null::r
	}
}

[Function]
liftM3 :: Monad m => (a1 -> a2 -> a3 -> r) -> m a1 -> m a2 -> m a3 -> m r
Name: liftM3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:liftM3
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a1
	a2
	a3
	r
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a1
		null::a2
		null::a3
	
		[result]
		null::r
	}
	null::m {
		null::a1
	}
	null::m {
		null::a2
	}
	null::m {
		null::a3
	}

	[result]
	null::m {
		null::r
	}
}

[Function]
liftM2 :: Monad m => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
Name: liftM2
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:liftM2
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a1
	a2
	r
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a1
		null::a2
	
		[result]
		null::r
	}
	null::m {
		null::a1
	}
	null::m {
		null::a2
	}

	[result]
	null::m {
		null::r
	}
}

[Function]
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
Name: (>=>)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Monad.html#v:(>=>)
Containing package: Control.Monad
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::m {
			null::b
		}
	}
	<function> {
		[parameters]
		null::b
	
		[result]
		null::m {
			null::c
		}
	}
	null::a

	[result]
	null::m {
		null::c
	}
}