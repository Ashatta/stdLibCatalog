[Package]
Name: Control.Exception
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html
Containing package: Control
attributes {
}

Subpackages {
	Control.Exception.Base
}

[Classifier]
data Deadlock = Deadlock
Name: Deadlock
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:Deadlock
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data AsyncException = StackOverflow | HeapOverflow | ThreadKilled | UserInterrupt
Name: AsyncException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:AsyncException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
newtype ErrorCall = ErrorCall String
Name: ErrorCall
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:ErrorCall
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=newtype
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data SomeAsyncException = forall e . Exception e => SomeAsyncException e
Name: SomeAsyncException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:SomeAsyncException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data RecSelError = RecSelError String
Name: RecSelError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:RecSelError
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data NoMethodError = NoMethodError String
Name: NoMethodError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:NoMethodError
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data RecUpdError = RecUpdError String
Name: RecUpdError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:RecUpdError
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data SomeException = forall e . Exception e => SomeException e
Name: SomeException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:SomeException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data BlockedIndefinitelyOnMVar = BlockedIndefinitelyOnMVar
Name: BlockedIndefinitelyOnMVar
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:BlockedIndefinitelyOnMVar
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data BlockedIndefinitelyOnSTM = BlockedIndefinitelyOnSTM
Name: BlockedIndefinitelyOnSTM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:BlockedIndefinitelyOnSTM
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data Handler a = forall e . Exception e => Handler (e -> IO a)
Name: Handler
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:Handler
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Classifier]
class (Typeable e, Show e) => Exception e where toException :: e -> SomeException fromException :: SomeException -> Maybe e
Name: Exception
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:Exception
Containing package: Control.Exception
attributes {
	classifierType=typeclass
	fakeInstanceClassifier=false
}
parameters {
}
derived {
	Control.Exception::Control.Exception.Exception_SomeException<>
	Control.Exception::Control.Exception.Exception_ArithException<>
	Control.Exception::Control.Exception.Exception_ErrorCall<>
	Control.Exception::Control.Exception.Exception_IOException<>
	Data.Dynamic::Control.Exception.Exception_Dynamic<>
	System.Exit::Control.Exception.Exception_ExitCode<>
	Control.Exception::Control.Exception.Exception_ArrayException<>
	Control.Exception::Control.Exception.Exception_AsyncException<>
	Control.Exception::Control.Exception.Exception_SomeAsyncException<>
	Control.Exception::Control.Exception.Exception_AssertionFailed<>
	Control.Exception::Control.Exception.Exception_Deadlock<>
	Control.Exception::Control.Exception.Exception_BlockedIndefinitelyOnSTM<>
	Control.Exception::Control.Exception.Exception_BlockedIndefinitelyOnMVar<>
	Control.Exception::Control.Exception.Exception_NestedAtomically<>
	Control.Exception::Control.Exception.Exception_NonTermination<>
	Control.Exception::Control.Exception.Exception_NoMethodError<>
	Control.Exception::Control.Exception.Exception_RecUpdError<>
	Control.Exception::Control.Exception.Exception_RecConError<>
	Control.Exception::Control.Exception.Exception_RecSelError<>
	Control.Exception::Control.Exception.Exception_PatternMatchFail<>
}
supertypes {
	Data.Typeable.Internal::Typeable
	Text.Show::Show
}
members {

	[Function]
	toException :: e -> SomeException
	Name: toException
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:toException
	Containing package: Control.Exception
	attributes {
		memberType=function
	}
	Containing type: Exception
	parameters {
		e: (Exception e; e; Control.Exception::Exception)
	}
	Signature = <function> {
		[parameters]
		null::e
	
		[result]
		Control.Exception::SomeException
	}

	[Function]
	fromException :: SomeException -> Maybe e
	Name: fromException
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:fromException
	Containing package: Control.Exception
	attributes {
		memberType=function
	}
	Containing type: Exception
	parameters {
		e: (Exception e; e; Control.Exception::Exception)
	}
	Signature = <function> {
		[parameters]
		Control.Exception::SomeException
	
		[result]
		Data.Maybe::Maybe {
			null::e
		}
	}
}

[Classifier]
data ArithException = Overflow | Underflow | LossOfPrecision | DivideByZero | Denormal | RatioZeroDenominator
Name: ArithException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:ArithException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data IOException
Name: IOException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:IOException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data MaskingState = Unmasked | MaskedInterruptible | MaskedUninterruptible
Name: MaskingState
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:MaskingState
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data PatternMatchFail = PatternMatchFail String
Name: PatternMatchFail
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:PatternMatchFail
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data NonTermination = NonTermination
Name: NonTermination
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:NonTermination
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data NestedAtomically = NestedAtomically
Name: NestedAtomically
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:NestedAtomically
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data ArrayException = IndexOutOfBounds String | UndefinedElement String
Name: ArrayException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:ArrayException
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data AssertionFailed = AssertionFailed String
Name: AssertionFailed
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:AssertionFailed
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data RecConError = RecConError String
Name: RecConError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#t:RecConError
Containing package: Control.Exception
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
}
derived {
}
supertypes {
}
members {
}

[Function]
getMaskingState :: IO MaskingState
Name: getMaskingState
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:getMaskingState
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]

	[result]
	System.IO::IO {
		Control.Exception::MaskingState
	}
}

[Function]
try :: Exception e => IO a -> IO (Either e a)
Name: try
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:try
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		Data.Either::Either {
			null::e
			null::a
		}
	}
}

[Function]
catchJust :: Exception e => (e -> Maybe b) -> IO a -> (b -> IO a) -> IO a
Name: catchJust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:catchJust
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::e
	
		[result]
		Data.Maybe::Maybe {
			null::b
		}
	}
	System.IO::IO {
		null::a
	}
	<function> {
		[parameters]
		null::b
	
		[result]
		System.IO::IO {
			null::a
		}
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
assert :: Bool -> a -> a
Name: assert
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:assert
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	null::a

	[result]
	null::a
}

[Function]
evaluate :: a -> IO a
Name: evaluate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:evaluate
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
tryJust :: Exception e => (e -> Maybe b) -> IO a -> IO (Either b a)
Name: tryJust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:tryJust
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::e
	
		[result]
		Data.Maybe::Maybe {
			null::b
		}
	}
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		Data.Either::Either {
			null::b
			null::a
		}
	}
}

[Function]
onException :: IO a -> IO b -> IO a
Name: onException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:onException
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	System.IO::IO {
		null::b
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
handleJust :: Exception e => (e -> Maybe b) -> (b -> IO a) -> IO a -> IO a
Name: handleJust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:handleJust
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::e
	
		[result]
		Data.Maybe::Maybe {
			null::b
		}
	}
	<function> {
		[parameters]
		null::b
	
		[result]
		System.IO::IO {
			null::a
		}
	}
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
asyncExceptionToException :: Exception e => e -> SomeException
Name: asyncExceptionToException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:asyncExceptionToException
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
}
Signature = <function> {
	[parameters]
	null::e

	[result]
	Control.Exception::SomeException
}

[Function]
finally :: IO a -> IO b -> IO a
Name: finally
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:finally
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	System.IO::IO {
		null::b
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
bracket_ :: IO a -> IO b -> IO c -> IO c
Name: bracket_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:bracket_
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	System.IO::IO {
		null::b
	}
	System.IO::IO {
		null::c
	}

	[result]
	System.IO::IO {
		null::c
	}
}

[Function]
catch :: Exception e => IO a -> (e -> IO a) -> IO a
Name: catch
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:catch
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	<function> {
		[parameters]
		null::e
	
		[result]
		System.IO::IO {
			null::a
		}
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
throwTo :: Exception e => ThreadId -> e -> IO ()
Name: throwTo
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:throwTo
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
}
Signature = <function> {
	[parameters]
	Control.Concurrent::ThreadId
	null::e

	[result]
	System.IO::IO {
		GHC.Tuple::()
	}
}

[Function]
allowInterrupt :: IO ()
Name: allowInterrupt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:allowInterrupt
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]

	[result]
	System.IO::IO {
		GHC.Tuple::()
	}
}

[Function]
uninterruptibleMask :: ((forall a. IO a -> IO a) -> IO b) -> IO b
Name: uninterruptibleMask
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:uninterruptibleMask
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		<function> {
			[parameters]
			System.IO::IO {
				null::a
			}
		
			[result]
			System.IO::IO {
				null::a
			}
		}
	
		[result]
		System.IO::IO {
			null::b
		}
	}

	[result]
	System.IO::IO {
		null::b
	}
}

[Function]
mapException :: (Exception e1, Exception e2) => (e1 -> e2) -> a -> a
Name: mapException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:mapException
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e1: (Exception e1; e1; Control.Exception::Exception)
	e2: (Exception e2; e2; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::e1
	
		[result]
		null::e2
	}
	null::a

	[result]
	null::a
}

[Function]
throw :: Exception e => e -> a
Name: throw
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:throw
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	null::e

	[result]
	null::a
}

[Function]
mask :: ((forall a. IO a -> IO a) -> IO b) -> IO b
Name: mask
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:mask
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		<function> {
			[parameters]
			System.IO::IO {
				null::a
			}
		
			[result]
			System.IO::IO {
				null::a
			}
		}
	
		[result]
		System.IO::IO {
			null::b
		}
	}

	[result]
	System.IO::IO {
		null::b
	}
}

[Function]
uninterruptibleMask_ :: IO a -> IO a
Name: uninterruptibleMask_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:uninterruptibleMask_
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
Name: bracket
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:bracket
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		System.IO::IO {
			null::b
		}
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		System.IO::IO {
			null::c
		}
	}

	[result]
	System.IO::IO {
		null::c
	}
}

[Function]
handle :: Exception e => (e -> IO a) -> IO a -> IO a
Name: handle
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:handle
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::e
	
		[result]
		System.IO::IO {
			null::a
		}
	}
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
catches :: IO a -> [Handler a] -> IO a
Name: catches
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:catches
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	other::List {
		Control.Exception::Handler {
			null::a
		}
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
mask_ :: IO a -> IO a
Name: mask_
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:mask_
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
asyncExceptionFromException :: Exception e => SomeException -> Maybe e
Name: asyncExceptionFromException
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:asyncExceptionFromException
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
}
Signature = <function> {
	[parameters]
	Control.Exception::SomeException

	[result]
	Data.Maybe::Maybe {
		null::e
	}
}

[Function]
bracketOnError :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
Name: bracketOnError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:bracketOnError
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	System.IO::IO {
		null::a
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		System.IO::IO {
			null::b
		}
	}
	<function> {
		[parameters]
		null::a
	
		[result]
		System.IO::IO {
			null::c
		}
	}

	[result]
	System.IO::IO {
		null::c
	}
}

[Function]
ioError :: IOError -> IO a
Name: ioError
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:ioError
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	System.IO.Error::IOError

	[result]
	System.IO::IO {
		null::a
	}
}

[Function]
throwIO :: Exception e => e -> IO a
Name: throwIO
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Control-Exception.html#v:throwIO
Containing package: Control.Exception
attributes {
	memberType=function
}
Containing type: null
parameters {
	e: (Exception e; e; Control.Exception::Exception)
	a
}
Signature = <function> {
	[parameters]
	null::e

	[result]
	System.IO::IO {
		null::a
	}
}