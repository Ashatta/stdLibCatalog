[Package]
Name: Data.Sequence
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html
Containing package: Data
attributes {
}

Subpackages {
}

[Classifier]
data Seq a
Name: Seq
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#t:Seq
Containing package: Data.Sequence
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data ViewL a = EmptyL | a :< (Seq a)
Name: ViewL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#t:ViewL
Containing package: Data.Sequence
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Classifier]
data ViewR a = EmptyR | (Seq a) :> a
Name: ViewR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#t:ViewR
Containing package: Data.Sequence
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Function]
reverse :: Seq a -> Seq a
Name: reverse
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:reverse
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
replicateM :: Monad m => Int -> m a -> m (Seq a)
Name: replicateM
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:replicateM
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monad m; m; Control.Monad::Monad)
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::m {
		null::a
	}

	[result]
	null::m {
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
fromList :: [a] -> Seq a
Name: fromList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:fromList
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
dropWhileR :: (a -> Bool) -> Seq a -> Seq a
Name: dropWhileR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:dropWhileR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
dropWhileL :: (a -> Bool) -> Seq a -> Seq a
Name: dropWhileL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:dropWhileL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
foldlWithIndex :: (b -> Int -> a -> b) -> b -> Seq a -> b
Name: foldlWithIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:foldlWithIndex
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
		Data.Int::Int
		null::a
	
		[result]
		null::b
	}
	null::b
	Data.Sequence::Seq {
		null::a
	}

	[result]
	null::b
}

[Function]
unstableSortBy :: (a -> a -> Ordering) -> Seq a -> Seq a
Name: unstableSortBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:unstableSortBy
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Data.Ord::Ordering
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
viewl :: Seq a -> ViewL a
Name: viewl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:viewl
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::ViewL {
		null::a
	}
}

[Function]
viewr :: Seq a -> ViewR a
Name: viewr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:viewr
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::ViewR {
		null::a
	}
}

[Function]
update :: Int -> a -> Seq a -> Seq a
Name: update
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:update
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
take :: Int -> Seq a -> Seq a
Name: take
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:take
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
findIndicesL :: (a -> Bool) -> Seq a -> [Int]
Name: findIndicesL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:findIndicesL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	other::List {
		Data.Int::Int
	}
}

[Function]
zipWith3 :: (a -> b -> c -> d) -> Seq a -> Seq b -> Seq c -> Seq d
Name: zipWith3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zipWith3
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
	
		[result]
		null::d
	}
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}
	Data.Sequence::Seq {
		null::c
	}

	[result]
	Data.Sequence::Seq {
		null::d
	}
}

[Function]
zipWith4 :: (a -> b -> c -> d -> e) -> Seq a -> Seq b -> Seq c -> Seq d -> Seq e
Name: zipWith4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zipWith4
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
	e
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
		null::c
		null::d
	
		[result]
		null::e
	}
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}
	Data.Sequence::Seq {
		null::c
	}
	Data.Sequence::Seq {
		null::d
	}

	[result]
	Data.Sequence::Seq {
		null::e
	}
}

[Function]
inits :: Seq a -> Seq (Seq a)
Name: inits
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:inits
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
filter :: (a -> Bool) -> Seq a -> Seq a
Name: filter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:filter
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
findIndicesR :: (a -> Bool) -> Seq a -> [Int]
Name: findIndicesR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:findIndicesR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	other::List {
		Data.Int::Int
	}
}

[Function]
tails :: Seq a -> Seq (Seq a)
Name: tails
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:tails
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
foldrWithIndex :: (Int -> a -> b -> b) -> b -> Seq a -> b
Name: foldrWithIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:foldrWithIndex
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.Int::Int
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Sequence::Seq {
		null::a
	}

	[result]
	null::b
}

[Function]
zipWith :: (a -> b -> c) -> Seq a -> Seq b -> Seq c
Name: zipWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zipWith
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::c
	}
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}

	[result]
	Data.Sequence::Seq {
		null::c
	}
}

[Function]
replicate :: Int -> a -> Seq a
Name: replicate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:replicate
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::a

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
breakr :: (a -> Bool) -> Seq a -> (Seq a, Seq a)
Name: breakr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:breakr
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
breakl :: (a -> Bool) -> Seq a -> (Seq a, Seq a)
Name: breakl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:breakl
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
drop :: Int -> Seq a -> Seq a
Name: drop
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:drop
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
zip4 :: Seq a -> Seq b -> Seq c -> Seq d -> Seq (a, b, c, d)
Name: zip4
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zip4
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
	d
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}
	Data.Sequence::Seq {
		null::c
	}
	Data.Sequence::Seq {
		null::d
	}

	[result]
	Data.Sequence::Seq {
		GHC.Tuple::(,,,) {
			null::a
			null::b
			null::c
			null::d
		}
	}
}

[Function]
zip3 :: Seq a -> Seq b -> Seq c -> Seq (a, b, c)
Name: zip3
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zip3
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}
	Data.Sequence::Seq {
		null::c
	}

	[result]
	Data.Sequence::Seq {
		GHC.Tuple::(,,) {
			null::a
			null::b
			null::c
		}
	}
}

[Function]
index :: Seq a -> Int -> a
Name: index
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:index
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	Data.Int::Int

	[result]
	null::a
}

[Function]
sortBy :: (a -> a -> Ordering) -> Seq a -> Seq a
Name: sortBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:sortBy
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		Data.Ord::Ordering
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
(|>) :: Seq a -> a -> Seq a
Name: (|>)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:(|>)
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	null::a

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
unfoldl :: (b -> Maybe (b, a)) -> b -> Seq a
Name: unfoldl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:unfoldl
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
	
		[result]
		Data.Maybe::Maybe {
			GHC.Tuple::(,) {
				null::b
				null::a
			}
		}
	}
	null::b

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
unfoldr :: (b -> Maybe (a, b)) -> b -> Seq a
Name: unfoldr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:unfoldr
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	b
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::b
	
		[result]
		Data.Maybe::Maybe {
			GHC.Tuple::(,) {
				null::a
				null::b
			}
		}
	}
	null::b

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
replicateA :: Applicative f => Int -> f a -> f (Seq a)
Name: replicateA
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:replicateA
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	f: (Applicative f; f; Control.Applicative::Applicative)
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	null::f {
		null::a
	}

	[result]
	null::f {
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
sort :: Ord a => Seq a -> Seq a
Name: sort
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:sort
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
adjust :: (a -> a) -> Int -> Seq a -> Seq a
Name: adjust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:adjust
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::a
	}
	Data.Int::Int
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
singleton :: a -> Seq a
Name: singleton
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:singleton
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
empty :: Seq a
Name: empty
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:empty
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
scanr :: (a -> b -> b) -> b -> Seq a -> Seq b
Name: scanr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:scanr
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::b
	}
}

[Function]
scanl :: (a -> b -> a) -> a -> Seq b -> Seq a
Name: scanl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:scanl
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.Sequence::Seq {
		null::b
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
(><) :: Seq a -> Seq a -> Seq a
Name: (><)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:(><)
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
elemIndicesL :: Eq a => a -> Seq a -> [Int]
Name: elemIndicesL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:elemIndicesL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	other::List {
		Data.Int::Int
	}
}

[Function]
(<|) :: a -> Seq a -> Seq a
Name: (<|)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:(<|)
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
elemIndicesR :: Eq a => a -> Seq a -> [Int]
Name: elemIndicesR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:elemIndicesR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	other::List {
		Data.Int::Int
	}
}

[Function]
iterateN :: Int -> (a -> a) -> a -> Seq a
Name: iterateN
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:iterateN
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	<function> {
		[parameters]
		null::a
	
		[result]
		null::a
	}
	null::a

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
zip :: Seq a -> Seq b -> Seq (a, b)
Name: zip
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:zip
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}
	Data.Sequence::Seq {
		null::b
	}

	[result]
	Data.Sequence::Seq {
		GHC.Tuple::(,) {
			null::a
			null::b
		}
	}
}

[Function]
unstableSort :: Ord a => Seq a -> Seq a
Name: unstableSort
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:unstableSort
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
partition :: (a -> Bool) -> Seq a -> (Seq a, Seq a)
Name: partition
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:partition
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
spanl :: (a -> Bool) -> Seq a -> (Seq a, Seq a)
Name: spanl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:spanl
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
spanr :: (a -> Bool) -> Seq a -> (Seq a, Seq a)
Name: spanr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:spanr
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
scanr1 :: (a -> a -> a) -> Seq a -> Seq a
Name: scanr1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:scanr1
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
scanl1 :: (a -> a -> a) -> Seq a -> Seq a
Name: scanl1
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:scanl1
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
length :: Seq a -> Int
Name: length
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:length
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Int::Int
}

[Function]
splitAt :: Int -> Seq a -> (Seq a, Seq a)
Name: splitAt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:splitAt
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	Data.Sequence::Seq {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Sequence::Seq {
			null::a
		}
		Data.Sequence::Seq {
			null::a
		}
	}
}

[Function]
takeWhileL :: (a -> Bool) -> Seq a -> Seq a
Name: takeWhileL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:takeWhileL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
takeWhileR :: (a -> Bool) -> Seq a -> Seq a
Name: takeWhileR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:takeWhileR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::a
	}
}

[Function]
findIndexR :: (a -> Bool) -> Seq a -> Maybe Int
Name: findIndexR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:findIndexR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
findIndexL :: (a -> Bool) -> Seq a -> Maybe Int
Name: findIndexL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:findIndexL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
elemIndexR :: Eq a => a -> Seq a -> Maybe Int
Name: elemIndexR
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:elemIndexR
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
elemIndexL :: Eq a => a -> Seq a -> Maybe Int
Name: elemIndexL
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:elemIndexL
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
mapWithIndex :: (Int -> a -> b) -> Seq a -> Seq b
Name: mapWithIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:mapWithIndex
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.Int::Int
		null::a
	
		[result]
		null::b
	}
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Sequence::Seq {
		null::b
	}
}

[Function]
null :: Seq a -> Bool
Name: null
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Sequence.html#v:null
Containing package: Data.Sequence
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Sequence::Seq {
		null::a
	}

	[result]
	Data.Bool::Bool
}