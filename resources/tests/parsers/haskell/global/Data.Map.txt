[Package]
Name: Data.Map
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html
Containing package: Data
attributes {
}

Subpackages {
	Data.Map.Lazy
	Data.Map.Strict
}

[Function]
insertLookupWithKey' :: Ord k => (k -> a -> a -> a) -> k -> a -> Map k a -> (Maybe a, Map k a)
Name: insertLookupWithKey'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html#v:insertLookupWithKey'
Containing package: Data.Map
attributes {
	memberType=function
}
Containing type: null
parameters {
	k: (Ord k; k; Data.Ord::Ord)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::k
		null::a
		null::a
	
		[result]
		null::a
	}
	null::k
	null::a
	Data.Map.Lazy::Map {
		null::k
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Maybe::Maybe {
			null::a
		}
		Data.Map.Lazy::Map {
			null::k
			null::a
		}
	}
}

[Function]
insertWith' :: Ord k => (a -> a -> a) -> k -> a -> Map k a -> Map k a
Name: insertWith'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html#v:insertWith'
Containing package: Data.Map
attributes {
	memberType=function
}
Containing type: null
parameters {
	k: (Ord k; k; Data.Ord::Ord)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	null::k
	null::a
	Data.Map.Lazy::Map {
		null::k
		null::a
	}

	[result]
	Data.Map.Lazy::Map {
		null::k
		null::a
	}
}

[Function]
fold :: (a -> b -> b) -> b -> Map k a -> b
Name: fold
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html#v:fold
Containing package: Data.Map
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	k
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Map.Lazy::Map {
		null::k
		null::a
	}

	[result]
	null::b
}

[Function]
insertWithKey' :: Ord k => (k -> a -> a -> a) -> k -> a -> Map k a -> Map k a
Name: insertWithKey'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html#v:insertWithKey'
Containing package: Data.Map
attributes {
	memberType=function
}
Containing type: null
parameters {
	k: (Ord k; k; Data.Ord::Ord)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::k
		null::a
		null::a
	
		[result]
		null::a
	}
	null::k
	null::a
	Data.Map.Lazy::Map {
		null::k
		null::a
	}

	[result]
	Data.Map.Lazy::Map {
		null::k
		null::a
	}
}

[Function]
foldWithKey :: (k -> a -> b -> b) -> b -> Map k a -> b
Name: foldWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Map.html#v:foldWithKey
Containing package: Data.Map
attributes {
	memberType=function
}
Containing type: null
parameters {
	k
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::k
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Map.Lazy::Map {
		null::k
		null::a
	}

	[result]
	null::b
}