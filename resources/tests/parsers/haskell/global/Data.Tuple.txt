[Package]
Name: Data.Tuple
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html
Containing package: Data
attributes {
}

Subpackages {
}

[Function]
uncurry :: (a -> b -> c) -> (a, b) -> c
Name: uncurry
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html#v:uncurry
Containing package: Data.Tuple
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::c
	}
	GHC.Tuple::(,) {
		null::a
		null::b
	}

	[result]
	null::c
}

[Function]
curry :: ((a, b) -> c) -> a -> b -> c
Name: curry
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html#v:curry
Containing package: Data.Tuple
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		GHC.Tuple::(,) {
			null::a
			null::b
		}
	
		[result]
		null::c
	}
	null::a
	null::b

	[result]
	null::c
}

[Function]
snd :: (a, b) -> b
Name: snd
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html#v:snd
Containing package: Data.Tuple
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	GHC.Tuple::(,) {
		null::a
		null::b
	}

	[result]
	null::b
}

[Function]
swap :: (a, b) -> (b, a)
Name: swap
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html#v:swap
Containing package: Data.Tuple
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	GHC.Tuple::(,) {
		null::a
		null::b
	}

	[result]
	GHC.Tuple::(,) {
		null::b
		null::a
	}
}

[Function]
fst :: (a, b) -> a
Name: fst
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.7.0.1/Data-Tuple.html#v:fst
Containing package: Data.Tuple
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	GHC.Tuple::(,) {
		null::a
		null::b
	}

	[result]
	null::a
}