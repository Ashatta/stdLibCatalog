[Package]
Name: Data.IntMap.Lazy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html
Containing package: Data.IntMap
attributes {
}

Subpackages {
}

[Classifier]
data IntMap a
Name: IntMap
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#t:IntMap
Containing package: Data.IntMap.Lazy
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Alias]
type Key = Int
Name: Key
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#t:Key
Containing package: Data.IntMap.Lazy
attributes {
}
parameters {
}
Aliased type = Data.Int::Int

[Function]
differenceWith :: (a -> b -> Maybe a) -> IntMap a -> IntMap b -> IntMap a
Name: differenceWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:differenceWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
unions :: [IntMap a] -> IntMap a
Name: unions
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:unions
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
lookupGE :: Key -> IntMap a -> Maybe (Key, a)
Name: lookupGE
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:lookupGE
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
union :: IntMap a -> IntMap a -> IntMap a
Name: union
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:union
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
minView :: IntMap a -> Maybe (a, IntMap a)
Name: minView
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:minView
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			null::a
			Data.IntMap.Lazy::IntMap {
				null::a
			}
		}
	}
}

[Function]
alter :: (Maybe a -> Maybe a) -> Key -> IntMap a -> IntMap a
Name: alter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:alter
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.Maybe::Maybe {
			null::a
		}
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
lookupGT :: Key -> IntMap a -> Maybe (Key, a)
Name: lookupGT
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:lookupGT
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
updateLookupWithKey :: (Key -> a -> Maybe a) -> Key -> IntMap a -> (Maybe a, IntMap a)
Name: updateLookupWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateLookupWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Maybe::Maybe {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
adjustWithKey :: (Key -> a -> a) -> Key -> IntMap a -> IntMap a
Name: adjustWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:adjustWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
updateMax :: (a -> Maybe a) -> IntMap a -> IntMap a
Name: updateMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateMax
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
foldrWithKey' :: (Key -> a -> b -> b) -> b -> IntMap a -> b
Name: foldrWithKey'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldrWithKey'
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::b
}

[Function]
minViewWithKey :: IntMap a -> Maybe ((Key, a), IntMap a)
Name: minViewWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:minViewWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			GHC.Tuple::(,) {
				Data.IntMap.Lazy::Key
				null::a
			}
			Data.IntMap.Lazy::IntMap {
				null::a
			}
		}
	}
}

[Function]
intersectionWith :: (a -> b -> c) -> IntMap a -> IntMap b -> IntMap c
Name: intersectionWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:intersectionWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::c
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::c
	}
}

[Function]
updateMin :: (a -> Maybe a) -> IntMap a -> IntMap a
Name: updateMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateMin
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
lookupLT :: Key -> IntMap a -> Maybe (Key, a)
Name: lookupLT
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:lookupLT
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
lookupLE :: Key -> IntMap a -> Maybe (Key, a)
Name: lookupLE
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:lookupLE
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
isProperSubmapOf :: Eq a => IntMap a -> IntMap a -> Bool
Name: isProperSubmapOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:isProperSubmapOf
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
maxViewWithKey :: IntMap a -> Maybe ((Key, a), IntMap a)
Name: maxViewWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:maxViewWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			GHC.Tuple::(,) {
				Data.IntMap.Lazy::Key
				null::a
			}
			Data.IntMap.Lazy::IntMap {
				null::a
			}
		}
	}
}

[Function]
fromAscList :: [(Key, a)] -> IntMap a
Name: fromAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromAscList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
isSubmapOfBy :: (a -> b -> Bool) -> IntMap a -> IntMap b -> Bool
Name: isSubmapOfBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:isSubmapOfBy
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.Bool::Bool
}

[Function]
map :: (a -> b) -> IntMap a -> IntMap b
Name: map
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:map
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::b
	}
}

[Function]
filterWithKey :: (Key -> a -> Bool) -> IntMap a -> IntMap a
Name: filterWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:filterWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
unionWithKey :: (Key -> a -> a -> a) -> IntMap a -> IntMap a -> IntMap a
Name: unionWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:unionWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
mapAccum :: (a -> b -> (a, c)) -> a -> IntMap b -> (a, IntMap c)
Name: mapAccum
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapAccum
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		GHC.Tuple::(,) {
			null::a
			null::c
		}
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	GHC.Tuple::(,) {
		null::a
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
}

[Function]
mapAccumRWithKey :: (a -> Key -> b -> (a, c)) -> a -> IntMap b -> (a, IntMap c)
Name: mapAccumRWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapAccumRWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		Data.IntMap.Lazy::Key
		null::b
	
		[result]
		GHC.Tuple::(,) {
			null::a
			null::c
		}
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	GHC.Tuple::(,) {
		null::a
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
}

[Function]
split :: Key -> IntMap a -> (IntMap a, IntMap a)
Name: split
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:split
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
differenceWithKey :: (Key -> a -> b -> Maybe a) -> IntMap a -> IntMap b -> IntMap a
Name: differenceWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:differenceWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::b
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
deleteFindMax :: IntMap a -> ((Key, a), IntMap a)
Name: deleteFindMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:deleteFindMax
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
size :: IntMap a -> Int
Name: size
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:size
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Int::Int
}

[Function]
mapMaybe :: (a -> Maybe b) -> IntMap a -> IntMap b
Name: mapMaybe
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapMaybe
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::b
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::b
	}
}

[Function]
splitRoot :: IntMap a -> [IntMap a]
Name: splitRoot
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:splitRoot
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
deleteFindMin :: IntMap a -> ((Key, a), IntMap a)
Name: deleteFindMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:deleteFindMin
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
foldMapWithKey :: Monoid m => (Key -> a -> m) -> IntMap a -> m
Name: foldMapWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldMapWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	m: (Monoid m; m; Data.Monoid::Monoid)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		null::m
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::m
}

[Function]
adjust :: (a -> a) -> Key -> IntMap a -> IntMap a
Name: adjust
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:adjust
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
foldl' :: (a -> b -> a) -> a -> IntMap b -> a
Name: foldl'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldl'
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	null::a
}

[Function]
update :: (a -> Maybe a) -> Key -> IntMap a -> IntMap a
Name: update
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:update
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
assocs :: IntMap a -> [(Key, a)]
Name: assocs
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:assocs
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
keysSet :: IntMap a -> IntSet
Name: keysSet
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:keysSet
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntSet::IntSet
}

[Function]
mapWithKey :: (Key -> a -> b) -> IntMap a -> IntMap b
Name: mapWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		null::b
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::b
	}
}

[Function]
foldlWithKey' :: (a -> Key -> b -> a) -> a -> IntMap b -> a
Name: foldlWithKey'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldlWithKey'
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		Data.IntMap.Lazy::Key
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	null::a
}

[Function]
splitLookup :: Key -> IntMap a -> (IntMap a, Maybe a, IntMap a)
Name: splitLookup
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:splitLookup
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,,) {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
		Data.Maybe::Maybe {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
mapEither :: (a -> Either b c) -> IntMap a -> (IntMap b, IntMap c)
Name: mapEither
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapEither
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Either::Either {
			null::b
			null::c
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::IntMap {
			null::b
		}
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
}

[Function]
toDescList :: IntMap a -> [(Key, a)]
Name: toDescList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:toDescList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
foldr' :: (a -> b -> b) -> b -> IntMap a -> b
Name: foldr'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldr'
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::b
}

[Function]
(\\) :: IntMap a -> IntMap b -> IntMap a
Name: (\\)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:(\\)
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
fromList :: [(Key, a)] -> IntMap a
Name: fromList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
foldrWithKey :: (Key -> a -> b -> b) -> b -> IntMap a -> b
Name: foldrWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldrWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::b
}

[Function]
fromAscListWith :: (a -> a -> a) -> [(Key, a)] -> IntMap a
Name: fromAscListWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromAscListWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
member :: Key -> IntMap a -> Bool
Name: member
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:member
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
findWithDefault :: a -> Key -> IntMap a -> a
Name: findWithDefault
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:findWithDefault
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::a
}

[Function]
foldlWithKey :: (a -> Key -> b -> a) -> a -> IntMap b -> a
Name: foldlWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldlWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		Data.IntMap.Lazy::Key
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	null::a
}

[Function]
foldr :: (a -> b -> b) -> b -> IntMap a -> b
Name: foldr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldr
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::b
}

[Function]
foldl :: (a -> b -> a) -> a -> IntMap b -> a
Name: foldl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:foldl
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	null::a
}

[Function]
notMember :: Key -> IntMap a -> Bool
Name: notMember
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:notMember
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
keys :: IntMap a -> [Key]
Name: keys
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:keys
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		Data.IntMap.Lazy::Key
	}
}

[Function]
traverseWithKey :: Applicative t => (Key -> a -> t b) -> IntMap a -> t (IntMap b)
Name: traverseWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:traverseWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	t: (Applicative t; t; Control.Applicative::Applicative)
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		null::t {
			null::b
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	null::t {
		Data.IntMap.Lazy::IntMap {
			null::b
		}
	}
}

[Function]
unionsWith :: (a -> a -> a) -> [IntMap a] -> IntMap a
Name: unionsWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:unionsWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
unionWith :: (a -> a -> a) -> IntMap a -> IntMap a -> IntMap a
Name: unionWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:unionWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
lookup :: Key -> IntMap a -> Maybe a
Name: lookup
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:lookup
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		null::a
	}
}

[Function]
fromSet :: (Key -> a) -> IntSet -> IntMap a
Name: fromSet
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromSet
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
	
		[result]
		null::a
	}
	Data.IntSet::IntSet

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
insert :: Key -> a -> IntMap a -> IntMap a
Name: insert
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:insert
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	null::a
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
intersectionWithKey :: (Key -> a -> b -> c) -> IntMap a -> IntMap b -> IntMap c
Name: intersectionWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:intersectionWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::b
	
		[result]
		null::c
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::c
	}
}

[Function]
showTree :: Show a => IntMap a -> String
Name: showTree
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:showTree
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Show a; a; Text.Show::Show)
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.String::String
}

[Function]
deleteMax :: IntMap a -> IntMap a
Name: deleteMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:deleteMax
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
insertLookupWithKey :: (Key -> a -> a -> a) -> Key -> a -> IntMap a -> (Maybe a, IntMap a)
Name: insertLookupWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:insertLookupWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::Key
	null::a
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Maybe::Maybe {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
(!) :: IntMap a -> Key -> a
Name: (!)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:(!)
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::Key

	[result]
	null::a
}

[Function]
mergeWithKey :: (Key -> a -> b -> Maybe c) -> (IntMap a -> IntMap c) -> (IntMap b -> IntMap c) -> IntMap a -> IntMap b -> IntMap c
Name: mergeWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mergeWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::b
	
		[result]
		Data.Maybe::Maybe {
			null::c
		}
	}
	<function> {
		[parameters]
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	
		[result]
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
	<function> {
		[parameters]
		Data.IntMap.Lazy::IntMap {
			null::b
		}
	
		[result]
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::c
	}
}

[Function]
mapEitherWithKey :: (Key -> a -> Either b c) -> IntMap a -> (IntMap b, IntMap c)
Name: mapEitherWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapEitherWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Either::Either {
			null::b
			null::c
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::IntMap {
			null::b
		}
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
}

[Function]
mapKeys :: (Key -> Key) -> IntMap a -> IntMap a
Name: mapKeys
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapKeys
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
	
		[result]
		Data.IntMap.Lazy::Key
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
deleteMin :: IntMap a -> IntMap a
Name: deleteMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:deleteMin
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
singleton :: Key -> a -> IntMap a
Name: singleton
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:singleton
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	null::a

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
showTreeWith :: Show a => Bool -> Bool -> IntMap a -> String
Name: showTreeWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:showTreeWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Show a; a; Text.Show::Show)
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Bool::Bool
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.String::String
}

[Function]
isSubmapOf :: Eq a => IntMap a -> IntMap a -> Bool
Name: isSubmapOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:isSubmapOf
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
mapMaybeWithKey :: (Key -> a -> Maybe b) -> IntMap a -> IntMap b
Name: mapMaybeWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapMaybeWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::b
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::b
	}
}

[Function]
isProperSubmapOfBy :: (a -> b -> Bool) -> IntMap a -> IntMap b -> Bool
Name: isProperSubmapOfBy
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:isProperSubmapOfBy
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.Bool::Bool
}

[Function]
elems :: IntMap a -> [a]
Name: elems
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:elems
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
null :: IntMap a -> Bool
Name: null
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:null
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
fromDistinctAscList :: [(Key, a)] -> IntMap a
Name: fromDistinctAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromDistinctAscList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
findMax :: IntMap a -> (Key, a)
Name: findMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:findMax
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::Key
		null::a
	}
}

[Function]
updateMinWithKey :: (Key -> a -> Maybe a) -> IntMap a -> IntMap a
Name: updateMinWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateMinWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
partition :: (a -> Bool) -> IntMap a -> (IntMap a, IntMap a)
Name: partition
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:partition
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
empty :: IntMap a
Name: empty
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:empty
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
maxView :: IntMap a -> Maybe (a, IntMap a)
Name: maxView
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:maxView
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			null::a
			Data.IntMap.Lazy::IntMap {
				null::a
			}
		}
	}
}

[Function]
findMin :: IntMap a -> (Key, a)
Name: findMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:findMin
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::Key
		null::a
	}
}

[Function]
delete :: Key -> IntMap a -> IntMap a
Name: delete
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:delete
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
fromListWith :: (a -> a -> a) -> [(Key, a)] -> IntMap a
Name: fromListWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromListWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
insertWith :: (a -> a -> a) -> Key -> a -> IntMap a -> IntMap a
Name: insertWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:insertWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::Key
	null::a
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
partitionWithKey :: (Key -> a -> Bool) -> IntMap a -> (IntMap a, IntMap a)
Name: partitionWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:partitionWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.IntMap.Lazy::IntMap {
			null::a
		}
		Data.IntMap.Lazy::IntMap {
			null::a
		}
	}
}

[Function]
toAscList :: IntMap a -> [(Key, a)]
Name: toAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:toAscList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
mapAccumWithKey :: (a -> Key -> b -> (a, c)) -> a -> IntMap b -> (a, IntMap c)
Name: mapAccumWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapAccumWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
	c
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		Data.IntMap.Lazy::Key
		null::b
	
		[result]
		GHC.Tuple::(,) {
			null::a
			null::c
		}
	}
	null::a
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	GHC.Tuple::(,) {
		null::a
		Data.IntMap.Lazy::IntMap {
			null::c
		}
	}
}

[Function]
filter :: (a -> Bool) -> IntMap a -> IntMap a
Name: filter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:filter
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
insertWithKey :: (Key -> a -> a -> a) -> Key -> a -> IntMap a -> IntMap a
Name: insertWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:insertWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::a
	
		[result]
		null::a
	}
	Data.IntMap.Lazy::Key
	null::a
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
updateMaxWithKey :: (Key -> a -> Maybe a) -> IntMap a -> IntMap a
Name: updateMaxWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateMaxWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
fromListWithKey :: (Key -> a -> a -> a) -> [(Key, a)] -> IntMap a
Name: fromListWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromListWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
updateWithKey :: (Key -> a -> Maybe a) -> Key -> IntMap a -> IntMap a
Name: updateWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:updateWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
	
		[result]
		Data.Maybe::Maybe {
			null::a
		}
	}
	Data.IntMap.Lazy::Key
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
fromAscListWithKey :: (Key -> a -> a -> a) -> [(Key, a)] -> IntMap a
Name: fromAscListWithKey
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:fromAscListWithKey
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
		null::a
		null::a
	
		[result]
		null::a
	}
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
difference :: IntMap a -> IntMap b -> IntMap a
Name: difference
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:difference
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
mapKeysWith :: (a -> a -> a) -> (Key -> Key) -> IntMap a -> IntMap a
Name: mapKeysWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapKeysWith
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::a
	
		[result]
		null::a
	}
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
	
		[result]
		Data.IntMap.Lazy::Key
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
intersection :: IntMap a -> IntMap b -> IntMap a
Name: intersection
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:intersection
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
	Data.IntMap.Lazy::IntMap {
		null::b
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}

[Function]
toList :: IntMap a -> [(Key, a)]
Name: toList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:toList
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	other::List {
		GHC.Tuple::(,) {
			Data.IntMap.Lazy::Key
			null::a
		}
	}
}

[Function]
mapKeysMonotonic :: (Key -> Key) -> IntMap a -> IntMap a
Name: mapKeysMonotonic
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-IntMap-Lazy.html#v:mapKeysMonotonic
Containing package: Data.IntMap.Lazy
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		Data.IntMap.Lazy::Key
	
		[result]
		Data.IntMap.Lazy::Key
	}
	Data.IntMap.Lazy::IntMap {
		null::a
	}

	[result]
	Data.IntMap.Lazy::IntMap {
		null::a
	}
}