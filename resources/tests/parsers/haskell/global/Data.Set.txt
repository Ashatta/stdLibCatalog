[Package]
Name: Data.Set
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html
Containing package: Data
attributes {
}

Subpackages {
}

[Classifier]
data Set a
Name: Set
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#t:Set
Containing package: Data.Set
attributes {
	infix=false
	classifierType=data
	fakeInstanceClassifier=false
}
parameters {
	a
}
derived {
}
supertypes {
}
members {
}

[Function]
fold :: (a -> b -> b) -> b -> Set a -> b
Name: fold
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:fold
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Set::Set {
		null::a
	}

	[result]
	null::b
}

[Function]
findIndex :: Ord a => a -> Set a -> Int
Name: findIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:findIndex
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Int::Int
}

[Function]
intersection :: Ord a => Set a -> Set a -> Set a
Name: intersection
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:intersection
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
insert :: Ord a => a -> Set a -> Set a
Name: insert
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:insert
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
notMember :: Ord a => a -> Set a -> Bool
Name: notMember
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:notMember
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
toAscList :: Set a -> [a]
Name: toAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:toAscList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
toDescList :: Set a -> [a]
Name: toDescList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:toDescList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
valid :: Ord a => Set a -> Bool
Name: valid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:valid
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
showTreeWith :: Show a => Bool -> Bool -> Set a -> String
Name: showTreeWith
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:showTreeWith
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Show a; a; Text.Show::Show)
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Bool::Bool
	Data.Set::Set {
		null::a
	}

	[result]
	Data.String::String
}

[Function]
fromAscList :: Eq a => [a] -> Set a
Name: fromAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:fromAscList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Eq a; a; Data.Eq::Eq)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
size :: Set a -> Int
Name: size
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:size
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Int::Int
}

[Function]
deleteMin :: Set a -> Set a
Name: deleteMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:deleteMin
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
minView :: Set a -> Maybe (a, Set a)
Name: minView
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:minView
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			null::a
			Data.Set::Set {
				null::a
			}
		}
	}
}

[Function]
isSubsetOf :: Ord a => Set a -> Set a -> Bool
Name: isSubsetOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:isSubsetOf
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
elems :: Set a -> [a]
Name: elems
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:elems
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
split :: Ord a => a -> Set a -> (Set a, Set a)
Name: split
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:split
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Set::Set {
			null::a
		}
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
delete :: Ord a => a -> Set a -> Set a
Name: delete
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:delete
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
(\\) :: Ord a => Set a -> Set a -> Set a
Name: (\\)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:(\\)
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
showTree :: Show a => Set a -> String
Name: showTree
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:showTree
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Show a; a; Text.Show::Show)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.String::String
}

[Function]
null :: Set a -> Bool
Name: null
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:null
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
fromDistinctAscList :: [a] -> Set a
Name: fromDistinctAscList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:fromDistinctAscList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
partition :: (a -> Bool) -> Set a -> (Set a, Set a)
Name: partition
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:partition
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Set::Set {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		Data.Set::Set {
			null::a
		}
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
deleteMax :: Set a -> Set a
Name: deleteMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:deleteMax
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
splitRoot :: Set a -> [Set a]
Name: splitRoot
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:splitRoot
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	other::List {
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
elemAt :: Int -> Set a -> a
Name: elemAt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:elemAt
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	Data.Set::Set {
		null::a
	}

	[result]
	null::a
}

[Function]
toList :: Set a -> [a]
Name: toList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:toList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	other::List {
		null::a
	}
}

[Function]
deleteFindMin :: Set a -> (a, Set a)
Name: deleteFindMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:deleteFindMin
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		null::a
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
mapMonotonic :: (a -> b) -> Set a -> Set b
Name: mapMonotonic
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:mapMonotonic
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::b
	}
}

[Function]
filter :: (a -> Bool) -> Set a -> Set a
Name: filter
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:filter
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		Data.Bool::Bool
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
deleteFindMax :: Set a -> (a, Set a)
Name: deleteFindMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:deleteFindMax
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	GHC.Tuple::(,) {
		null::a
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
difference :: Ord a => Set a -> Set a -> Set a
Name: difference
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:difference
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
lookupIndex :: Ord a => a -> Set a -> Maybe Int
Name: lookupIndex
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:lookupIndex
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
maxView :: Set a -> Maybe (a, Set a)
Name: maxView
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:maxView
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		GHC.Tuple::(,) {
			null::a
			Data.Set::Set {
				null::a
			}
		}
	}
}

[Function]
empty :: Set a
Name: empty
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:empty
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
isProperSubsetOf :: Ord a => Set a -> Set a -> Bool
Name: isProperSubsetOf
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:isProperSubsetOf
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
member :: Ord a => a -> Set a -> Bool
Name: member
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:member
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Bool::Bool
}

[Function]
unions :: Ord a => [Set a] -> Set a
Name: unions
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:unions
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	other::List {
		Data.Set::Set {
			null::a
		}
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
union :: Ord a => Set a -> Set a -> Set a
Name: union
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:union
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
lookupLE :: Ord a => a -> Set a -> Maybe a
Name: lookupLE
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:lookupLE
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		null::a
	}
}

[Function]
findMin :: Set a -> a
Name: findMin
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:findMin
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	null::a
}

[Function]
fromList :: Ord a => [a] -> Set a
Name: fromList
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:fromList
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	other::List {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
map :: Ord b => (a -> b) -> Set a -> Set b
Name: map
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:map
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	b: (Ord b; b; Data.Ord::Ord)
	a
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::b
	}
}

[Function]
foldr' :: (a -> b -> b) -> b -> Set a -> b
Name: foldr'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:foldr'
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Set::Set {
		null::a
	}

	[result]
	null::b
}

[Function]
splitMember :: Ord a => a -> Set a -> (Set a, Bool, Set a)
Name: splitMember
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:splitMember
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	GHC.Tuple::(,,) {
		Data.Set::Set {
			null::a
		}
		Data.Bool::Bool
		Data.Set::Set {
			null::a
		}
	}
}

[Function]
lookupGT :: Ord a => a -> Set a -> Maybe a
Name: lookupGT
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:lookupGT
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		null::a
	}
}

[Function]
lookupGE :: Ord a => a -> Set a -> Maybe a
Name: lookupGE
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:lookupGE
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		null::a
	}
}

[Function]
findMax :: Set a -> a
Name: findMax
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:findMax
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Set::Set {
		null::a
	}

	[result]
	null::a
}

[Function]
foldl' :: (a -> b -> a) -> a -> Set b -> a
Name: foldl'
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:foldl'
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.Set::Set {
		null::b
	}

	[result]
	null::a
}

[Function]
deleteAt :: Int -> Set a -> Set a
Name: deleteAt
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:deleteAt
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	Data.Int::Int
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
singleton :: a -> Set a
Name: singleton
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:singleton
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
}
Signature = <function> {
	[parameters]
	null::a

	[result]
	Data.Set::Set {
		null::a
	}
}

[Function]
foldl :: (a -> b -> a) -> a -> Set b -> a
Name: foldl
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:foldl
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::a
	}
	null::a
	Data.Set::Set {
		null::b
	}

	[result]
	null::a
}

[Function]
foldr :: (a -> b -> b) -> b -> Set a -> b
Name: foldr
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:foldr
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
		null::b
	
		[result]
		null::b
	}
	null::b
	Data.Set::Set {
		null::a
	}

	[result]
	null::b
}

[Function]
lookupLT :: Ord a => a -> Set a -> Maybe a
Name: lookupLT
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/containers-0.5.5.1/Data-Set.html#v:lookupLT
Containing package: Data.Set
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (Ord a; a; Data.Ord::Ord)
}
Signature = <function> {
	[parameters]
	null::a
	Data.Set::Set {
		null::a
	}

	[result]
	Data.Maybe::Maybe {
		null::a
	}
}