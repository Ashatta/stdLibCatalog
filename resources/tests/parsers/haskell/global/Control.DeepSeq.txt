[Package]
Name: Control.DeepSeq
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html
Containing package: Control
attributes {
}

Subpackages {
}

[Classifier]
class NFData a where rnf :: a -> ()
Name: NFData
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html#t:NFData
Containing package: Control.DeepSeq
attributes {
	classifierType=typeclass
	fakeInstanceClassifier=false
}
parameters {
}
derived {
	Data.Bool::Control.DeepSeq.NFData_Bool<>
	Data.Char::Control.DeepSeq.NFData_Char<>
	Prelude::Control.DeepSeq.NFData_Double<>
	Prelude::Control.DeepSeq.NFData_Float<>
	Data.Int::Control.DeepSeq.NFData_Int<>
	Data.Int::Control.DeepSeq.NFData_Int8<>
	Data.Int::Control.DeepSeq.NFData_Int16<>
	Data.Int::Control.DeepSeq.NFData_Int32<>
	Data.Int::Control.DeepSeq.NFData_Int64<>
	Prelude::Control.DeepSeq.NFData_Integer<>
	Data.Word::Control.DeepSeq.NFData_Word<>
	Data.Word::Control.DeepSeq.NFData_Word8<>
	Data.Word::Control.DeepSeq.NFData_Word16<>
	Data.Word::Control.DeepSeq.NFData_Word32<>
	Data.Word::Control.DeepSeq.NFData_Word64<>
	GHC.Tuple::Control.DeepSeq.NFData_()<>
	Data.Version::Control.DeepSeq.NFData_Version<>
	other::Control.DeepSeq.NFData_List<a<>>
	Data.Ratio::Control.DeepSeq.NFData_Ratio<a<>>
	Data.Fixed::Control.DeepSeq.NFData_Fixed<a<>>
	Data.Complex::Control.DeepSeq.NFData_Complex<a<>>
	Data.Maybe::Control.DeepSeq.NFData_Maybe<a<>>
	other::Control.DeepSeq.NFData_Function<a<>,b<>>
	Data.Either::Control.DeepSeq.NFData_Either<a<>,b<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,)<a<>,b<>>
	Data.Array::Control.DeepSeq.NFData_Array<a<>,b<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,)<a<>,b<>,c<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,)<a<>,b<>,c<>,d<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,,)<a1<>,a2<>,a3<>,a4<>,a5<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,,,)<a1<>,a2<>,a3<>,a4<>,a5<>,a6<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,,,,)<a1<>,a2<>,a3<>,a4<>,a5<>,a6<>,a7<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,,,,,)<a1<>,a2<>,a3<>,a4<>,a5<>,a6<>,a7<>,a8<>>
	GHC.Tuple::Control.DeepSeq.NFData_(,,,,,,,,,,)<a1<>,a2<>,a3<>,a4<>,a5<>,a6<>,a7<>,a8<>,a9<>>
	Data.ByteString.Char8::Control.DeepSeq.NFData_ByteString<>
	Data.ByteString.Lazy.Char8::Control.DeepSeq.NFData_ByteString<>
	Data.ByteString.Lazy::Control.DeepSeq.NFData_ByteString<>
	Data.ByteString.Short::Control.DeepSeq.NFData_ShortByteString<>
	Data.ByteString::Control.DeepSeq.NFData_ByteString<>
	Data.Graph::Control.DeepSeq.NFData_SCC<a<>>
	Data.IntMap.Lazy::Control.DeepSeq.NFData_IntMap<a<>>
	Data.IntMap.Strict::Control.DeepSeq.NFData_IntMap<a<>>
	Data.IntSet::Control.DeepSeq.NFData_IntSet<>
	Data.Map.Lazy::Control.DeepSeq.NFData_Map<k<>,a<>>
	Data.Map.Strict::Control.DeepSeq.NFData_Map<k<>,a<>>
	Data.Sequence::Control.DeepSeq.NFData_Seq<a<>>
	Data.Set::Control.DeepSeq.NFData_Set<a<>>
	Data.Time.Calendar::Control.DeepSeq.NFData_Day<>
	Data.Time.Clock.TAI::Control.DeepSeq.NFData_AbsoluteTime<>
	Data.Time.Clock::Control.DeepSeq.NFData_UniversalTime<>
	Data.Time.Clock::Control.DeepSeq.NFData_DiffTime<>
	Data.Time.Clock::Control.DeepSeq.NFData_UTCTime<>
	Data.Time.Clock::Control.DeepSeq.NFData_NominalDiffTime<>
	Data.Time.LocalTime::Control.DeepSeq.NFData_TimeZone<>
	Data.Time.LocalTime::Control.DeepSeq.NFData_TimeOfDay<>
	Data.Time.LocalTime::Control.DeepSeq.NFData_LocalTime<>
	Data.Time.LocalTime::Control.DeepSeq.NFData_ZonedTime<>
	Data.Tree::Control.DeepSeq.NFData_Tree<a<>>
	Distribution.Make::Control.DeepSeq.NFData_Version<>
	Distribution.Package::Control.DeepSeq.NFData_PackageName<>
	Distribution.Package::Control.DeepSeq.NFData_PackageIdentifier<>
	Distribution.Version::Control.DeepSeq.NFData_Version<>
}
supertypes {
}
members {

	[Function]
	rnf :: a -> ()
	Name: rnf
	Language: HASKELL
	Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html#v:rnf
	Containing package: Control.DeepSeq
	attributes {
		memberType=function
	}
	Containing type: NFData
	parameters {
		a: (NFData a; a; Control.DeepSeq::NFData)
	}
	Signature = <function> {
		[parameters]
		null::a
	
		[result]
		GHC.Tuple::()
	}
}

[Function]
deepseq :: NFData a => a -> b -> b
Name: deepseq
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html#v:deepseq
Containing package: Control.DeepSeq
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (NFData a; a; Control.DeepSeq::NFData)
	b
}
Signature = <function> {
	[parameters]
	null::a
	null::b

	[result]
	null::b
}

[Function]
force :: NFData a => a -> a
Name: force
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html#v:force
Containing package: Control.DeepSeq
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (NFData a; a; Control.DeepSeq::NFData)
}
Signature = <function> {
	[parameters]
	null::a

	[result]
	null::a
}

[Function]
($!!) :: NFData a => (a -> b) -> a -> b
Name: ($!!)
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/deepseq-1.3.0.2/Control-DeepSeq.html#v:($!!)
Containing package: Control.DeepSeq
attributes {
	memberType=function
}
Containing type: null
parameters {
	a: (NFData a; a; Control.DeepSeq::NFData)
	b
}
Signature = <function> {
	[parameters]
	<function> {
		[parameters]
		null::a
	
		[result]
		null::b
	}
	null::a

	[result]
	null::b
}