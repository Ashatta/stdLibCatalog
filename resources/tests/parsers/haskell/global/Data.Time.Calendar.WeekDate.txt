[Package]
Name: Data.Time.Calendar.WeekDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-WeekDate.html
Containing package: Data.Time.Calendar
attributes {
}

Subpackages {
}

[Function]
showWeekDate :: Day -> String
Name: showWeekDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-WeekDate.html#v:showWeekDate
Containing package: Data.Time.Calendar.WeekDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	Data.String::String
}

[Function]
fromWeekDate :: Integer -> Int -> Int -> Day
Name: fromWeekDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-WeekDate.html#v:fromWeekDate
Containing package: Data.Time.Calendar.WeekDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Time.Calendar::Day
}

[Function]
toWeekDate :: Day -> (Integer, Int, Int)
Name: toWeekDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-WeekDate.html#v:toWeekDate
Containing package: Data.Time.Calendar.WeekDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	GHC.Tuple::(,,) {
		Prelude::Integer
		Data.Int::Int
		Data.Int::Int
	}
}

[Function]
fromWeekDateValid :: Integer -> Int -> Int -> Maybe Day
Name: fromWeekDateValid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-WeekDate.html#v:fromWeekDateValid
Containing package: Data.Time.Calendar.WeekDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Maybe::Maybe {
		Data.Time.Calendar::Day
	}
}