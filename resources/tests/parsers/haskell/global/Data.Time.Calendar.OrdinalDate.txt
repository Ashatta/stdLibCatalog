[Package]
Name: Data.Time.Calendar.OrdinalDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html
Containing package: Data.Time.Calendar
attributes {
}

Subpackages {
}

[Function]
fromMondayStartWeekValid :: Integer -> Int -> Int -> Maybe Day
Name: fromMondayStartWeekValid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromMondayStartWeekValid
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Maybe::Maybe {
		Data.Time.Calendar::Day
	}
}

[Function]
toOrdinalDate :: Day -> (Integer, Int)
Name: toOrdinalDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:toOrdinalDate
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	GHC.Tuple::(,) {
		Prelude::Integer
		Data.Int::Int
	}
}

[Function]
fromOrdinalDateValid :: Integer -> Int -> Maybe Day
Name: fromOrdinalDateValid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromOrdinalDateValid
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int

	[result]
	Data.Maybe::Maybe {
		Data.Time.Calendar::Day
	}
}

[Function]
fromOrdinalDate :: Integer -> Int -> Day
Name: fromOrdinalDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromOrdinalDate
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int

	[result]
	Data.Time.Calendar::Day
}

[Function]
fromMondayStartWeek :: Integer -> Int -> Int -> Day
Name: fromMondayStartWeek
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromMondayStartWeek
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Time.Calendar::Day
}

[Function]
sundayStartWeek :: Day -> (Int, Int)
Name: sundayStartWeek
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:sundayStartWeek
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	GHC.Tuple::(,) {
		Data.Int::Int
		Data.Int::Int
	}
}

[Function]
fromSundayStartWeekValid :: Integer -> Int -> Int -> Maybe Day
Name: fromSundayStartWeekValid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromSundayStartWeekValid
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Maybe::Maybe {
		Data.Time.Calendar::Day
	}
}

[Function]
isLeapYear :: Integer -> Bool
Name: isLeapYear
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:isLeapYear
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer

	[result]
	Data.Bool::Bool
}

[Function]
mondayStartWeek :: Day -> (Int, Int)
Name: mondayStartWeek
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:mondayStartWeek
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	GHC.Tuple::(,) {
		Data.Int::Int
		Data.Int::Int
	}
}

[Function]
fromSundayStartWeek :: Integer -> Int -> Int -> Day
Name: fromSundayStartWeek
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:fromSundayStartWeek
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Prelude::Integer
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Time.Calendar::Day
}

[Function]
showOrdinalDate :: Day -> String
Name: showOrdinalDate
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-OrdinalDate.html#v:showOrdinalDate
Containing package: Data.Time.Calendar.OrdinalDate
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Time.Calendar::Day

	[result]
	Data.String::String
}