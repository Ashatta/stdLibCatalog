[Package]
Name: Data.Time.Calendar.MonthDay
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-MonthDay.html
Containing package: Data.Time.Calendar
attributes {
}

Subpackages {
}

[Function]
monthAndDayToDayOfYearValid :: Bool -> Int -> Int -> Maybe Int
Name: monthAndDayToDayOfYearValid
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-MonthDay.html#v:monthAndDayToDayOfYearValid
Containing package: Data.Time.Calendar.MonthDay
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Maybe::Maybe {
		Data.Int::Int
	}
}

[Function]
dayOfYearToMonthAndDay :: Bool -> Int -> (Int, Int)
Name: dayOfYearToMonthAndDay
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-MonthDay.html#v:dayOfYearToMonthAndDay
Containing package: Data.Time.Calendar.MonthDay
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Int::Int

	[result]
	GHC.Tuple::(,) {
		Data.Int::Int
		Data.Int::Int
	}
}

[Function]
monthLength :: Bool -> Int -> Int
Name: monthLength
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-MonthDay.html#v:monthLength
Containing package: Data.Time.Calendar.MonthDay
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Int::Int

	[result]
	Data.Int::Int
}

[Function]
monthAndDayToDayOfYear :: Bool -> Int -> Int -> Int
Name: monthAndDayToDayOfYear
Language: HASKELL
Doc: http://www.haskell.org/ghc/docs/latest/html/libraries/time-1.4.2/Data-Time-Calendar-MonthDay.html#v:monthAndDayToDayOfYear
Containing package: Data.Time.Calendar.MonthDay
attributes {
	memberType=function
}
Containing type: null
parameters {
}
Signature = <function> {
	[parameters]
	Data.Bool::Bool
	Data.Int::Int
	Data.Int::Int

	[result]
	Data.Int::Int
}